{"version":3,"sources":["zindex.ts","random.ts","element/newElement.ts","math.ts","element/bounds.ts","element/handlerRectangles.ts","element/collision.ts","element/resizeTest.ts","element/typeChecks.ts","element/textWysiwyg.tsx","scene/scrollbars.ts","scene/selection.ts","renderer/roundRect.ts","renderer/renderElement.ts","renderer/renderScene.ts","scene/data.ts","scene/comparisons.ts","utils.ts","components/ButtonSelect.tsx","shapes.tsx","history.ts","components/Popover.tsx","components/ContextMenu.tsx","components/panels/PanelTools.tsx","components/panels/PanelSelection.tsx","components/ColorPicker.tsx","components/panels/PanelColor.tsx","components/EditableText.tsx","components/panels/PanelExport.tsx","components/panels/PanelCanvas.tsx","index.tsx","scene/createScene.ts"],"names":["swap","elements","indexA","indexB","element","moveOneLeft","indicesToMove","sort","a","b","isSorted","forEach","index","i","moveOneRight","reversedIndicesToMove","length","moveAllLeft","leftMostElements","map","reverse","concat","pos","moveAllRight","rightMostElements","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","newElement","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","width","height","id","nanoid","isSelected","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","rotate","angle","cos","sin","getElementAbsoluteCoords","getDiamondPoints","topX","rightX","rightY","getArrowPoints","distance","minSize","min","xs","ys","PI","x3","y3","handlerRectangles","sceneState","elementX1","elementX2","elementY1","elementY2","handlers","marginX","marginY","abs","scrollX","scrollY","nw","se","hitTest","px","py","tx","ty","ex","ey","rx","ry","qx","qy","r","q","max","t","topY","bottomX","bottomY","leftX","leftY","x4","y4","console","warn","Error","resizeTest","filter","Object","keys","key","handler","isTextElement","textWysiwyg","initText","font","onSubmit","input","document","createElement","stopEvent","ev","stopPropagation","handleSubmit","value","cleanup","onblur","onkeydown","window","removeEventListener","body","removeChild","assign","style","color","position","top","left","transform","boxShadow","textAlign","innerWidth","border","background","KEYS","ESCAPE","preventDefault","ENTER","addEventListener","appendChild","focus","select","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","clearSelection","deleteSelectedElements","splice","getSelectedIndices","selectedIndices","push","someElementIsSelected","some","getSelectedAttribute","getAttribute","attributes","Array","from","Set","roundRect","context","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","generator","rough","renderElement","rc","fillRect","shape","rectangle","globalAlpha","translate","draw","polygon","ellipse","options","shapes","line","fillText","text","actualBoundingBoxAscent","renderScene","canvas","offsetX","offsetY","renderScrollbars","renderSelection","getContext","viewBackgroundColor","clearRect","selectedElements","el","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","devicePixelRatio","strokeStyle","scrollBar","saveFile","name","data","link","setAttribute","click","remove","restore","savedElements","savedState","JSON","parse","undefined","e","getElementAtPosition","hitElement","capitalizeString","str","charAt","toUpperCase","slice","isInputLike","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","ButtonSelect","onChange","className","option","onClick","SHAPES","icon","viewBox","d","shapesShortcutKeys","findShapeByKey","reduce","SceneHistory","recording","stateHistory","redoStack","stringify","newEntry","this","entry","newElements","skipRecording","currentEntry","generateCurrentEntry","entryToRestore","pop","restoreEntry","Popover","children","onCloseRequest","onContextMenu","contextMenuNode","ContextMenu","idx","ContextMenuOption","label","action","getContextMenuNode","div","handleClose","unmountComponentAtNode","params","of","render","PanelTools","activeTool","onToolChange","title","checked","PanelSelection","onBringForward","onBringToFront","onSendBackward","onSendToBack","TwitterPicker","lazy","ColorPicker","React","useState","isActive","setActive","Suspense","fallback","colors","changedColor","hex","onPaste","clipboardData","getData","PanelColor","onColorChange","colorValue","EditableText","props","state","edit","setState","maxLength","handleEdit","onBlur","handleBlur","onKeyDown","autoFocus","Component","PanelExport","projectName","exportBackground","onProjectNameChange","onExportBackgroundChange","onSaveScene","onLoadScene","onExportAsPNG","PanelCanvas","onViewBackgroundColorChange","onClearCanvas","history","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","getMinutes","secs","getSeconds","getDateTime","ARROW_LEFT","ARROW_RIGHT","ARROW_DOWN","ARROW_UP","DELETE","BACKSPACE","META_KEY","test","navigator","platform","copiedStyles","isArrowKey","keyCode","resetCursor","documentElement","cursor","addTextElement","currentFont","textMeasure","measureText","parseInt","actualBoundingBoxDescent","lastCanvasWidth","lastCanvasHeight","lastMouseUp","App","draggingElement","resizingElement","elementType","currentItemStrokeColor","currentItemBackgroundColor","currentItemFont","onResize","forceUpdate","event","step","shiftKey","altKey","code","includes","toLowerCase","redoOnce","undoOnce","metaKey","copyStyles","pasteStyles","clearCanvas","confirm","find","pastedElement","removeWheelEventListener","changeProperty","callback","changeOpacity","changeStrokeColor","changeBackgroundColor","copyToClipboard","clipboard","writeText","pasteFromClipboard","readText","then","addElementsFromPaste","handleWheel","deltaX","deltaY","paste","parsedElements","isArray","parsedElement","localStorage","getItem","innerHeight","onCut","setData","onCopy","hasStroke","val","updateProjectName","exportPadding","alert","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","display","toDataURL","exportAsPNG","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","reader","FileReader","accept","onchange","files","readAsText","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","ref","passive","scale","clientX","clientY","onMouseDown","button","activeElement","blur","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","resizeHandle","isDraggingElements","isResizingElements","resizeElement","duplicates","lastX","lastY","onMouseMove","HTMLElement","sign","selection","selectionX1","selectionY1","selectionX2","selectionY2","setSelection","onMouseUp","onDoubleClick","elementAtPosition","indexOf","textX","textY","setItem","isRecording","pushEntry","clearRedoStack","resumeRecording","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.7c836343.chunk.js","sourcesContent":["function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n}\n","// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nexport const LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nexport function randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nexport function withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n","import { randomSeed } from \"../random\";\nimport nanoid from \"nanoid\";\n\nexport function newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    id: nanoid(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    isSelected: false,\n    seed: randomSeed()\n  };\n  return element;\n}\n","// https://stackoverflow.com/a/6853926/232122\nexport function distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nexport function rotate(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number\n) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { rotate } from \"../math\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nexport function getElementAbsoluteCoords(element: ExcalidrawElement) {\n  return [\n    element.width >= 0 ? element.x : element.x + element.width, // x1\n    element.height >= 0 ? element.y : element.y + element.height, // y1\n    element.width >= 0 ? element.x + element.width : element.x, // x2\n    element.height >= 0 ? element.y + element.height : element.y // y2\n  ];\n}\n\nexport function getDiamondPoints(element: ExcalidrawElement) {\n  // Here we add +1 to avoid these numbers to be 0\n  // otherwise rough.js will throw an error complaining about it\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nexport function getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n","import { SceneState } from \"../scene/types\";\nimport { ExcalidrawElement } from \"./types\";\n\ntype Sides = \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\";\n\nexport function handlerRectangles(\n  element: ExcalidrawElement,\n  sceneState: SceneState\n) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers = {} as { [T in Sides]: number[] };\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY1 - margin + sceneState.scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY2 - margin + sceneState.scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + sceneState.scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + sceneState.scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    } as typeof handlers;\n  }\n\n  return handlers;\n}\n","import { distanceBetweenPointAndSegment } from \"../math\";\n\nimport { ExcalidrawElement } from \"./types\";\nimport {\n  getArrowPoints,\n  getDiamondPoints,\n  getElementAbsoluteCoords\n} from \"./bounds\";\n\nexport function hitTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number\n): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = Math.abs(element.width) / 2;\n    const b = Math.abs(element.height) / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    const [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { SceneState } from \"../scene/types\";\n\nimport { handlerRectangles } from \"./handlerRectangles\";\n\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\n\nexport function resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  sceneState: SceneState\n): HandlerRectanglesRet | false {\n  if (!element.isSelected || element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, sceneState);\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key as HandlerRectanglesRet]!;\n\n    return (\n      x + sceneState.scrollX >= handler[0] &&\n      x + sceneState.scrollX <= handler[0] + handler[2] &&\n      y + sceneState.scrollY >= handler[1] &&\n      y + sceneState.scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as HandlerRectanglesRet;\n  }\n\n  return false;\n}\n","import { ExcalidrawElement, ExcalidrawTextElement } from \"./types\";\n\nexport function isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n","import { KEYS } from \"../index\";\n\ntype TextWysiwygParams = {\n  initText: string;\n  x: number;\n  y: number;\n  strokeColor: string;\n  font: string;\n  onSubmit: (text: string) => void;\n};\n\nexport function textWysiwyg({\n  initText,\n  x,\n  y,\n  strokeColor,\n  font,\n  onSubmit\n}: TextWysiwygParams) {\n  const input = document.createElement(\"input\");\n  input.value = initText;\n  Object.assign(input.style, {\n    color: strokeColor,\n    position: \"absolute\",\n    top: y - 8 + \"px\",\n    left: x + \"px\",\n    transform: \"translate(-50%, -50%)\",\n    boxShadow: \"none\",\n    textAlign: \"center\",\n    width: (window.innerWidth - x) * 2 + \"px\",\n    font: font,\n    border: \"none\",\n    background: \"transparent\"\n  });\n\n  input.onkeydown = ev => {\n    if (ev.key === KEYS.ESCAPE) {\n      ev.preventDefault();\n      cleanup();\n      return;\n    }\n    if (ev.key === KEYS.ENTER) {\n      ev.preventDefault();\n      handleSubmit();\n    }\n  };\n  input.onblur = handleSubmit;\n\n  function stopEvent(ev: Event) {\n    ev.stopPropagation();\n  }\n\n  function handleSubmit() {\n    if (input.value) {\n      onSubmit(input.value);\n    }\n    cleanup();\n  }\n\n  function cleanup() {\n    input.onblur = null;\n    input.onkeydown = null;\n    window.removeEventListener(\"wheel\", stopEvent, true);\n    document.body.removeChild(input);\n  }\n\n  window.addEventListener(\"wheel\", stopEvent, true);\n  document.body.appendChild(input);\n  input.focus();\n  input.select();\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport function getScrollBars(\n  elements: ExcalidrawElement[],\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nexport function isOverScrollBars(\n  elements: ExcalidrawElement[],\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(\n    elements,\n    canvasWidth,\n    canvasHeight,\n    scrollX,\n    scrollY\n  );\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport function setSelection(\n  elements: ExcalidrawElement[],\n  selection: ExcalidrawElement\n) {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2\n  ] = getElementAbsoluteCoords(selection);\n  elements.forEach(element => {\n    const [\n      elementX1,\n      elementY1,\n      elementX2,\n      elementY2\n    ] = getElementAbsoluteCoords(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nexport function clearSelection(elements: ExcalidrawElement[]) {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nexport function deleteSelectedElements(elements: ExcalidrawElement[]) {\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nexport function getSelectedIndices(elements: ExcalidrawElement[]) {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nexport const someElementIsSelected = (elements: ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected);\n\nexport function getSelectedAttribute<T>(\n  elements: ExcalidrawElement[],\n  getAttribute: (element: ExcalidrawElement) => T\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => getAttribute(element))\n    )\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import rough from \"roughjs/bin/wrappers/rough\";\n\nimport { withCustomMathRandom } from \"../random\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { isTextElement } from \"../element/typeChecks\";\nimport { getDiamondPoints, getArrowPoints } from \"../element/bounds\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { SceneState } from \"../scene/types\";\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nexport function renderElement(\n  element: ExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  { scrollX, scrollY }: SceneState\n) {\n  if (element.type === \"selection\") {\n    const fillStyle = context.fillStyle;\n    context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n    context.fillRect(\n      element.x + scrollX,\n      element.y + scrollY,\n      element.width,\n      element.height\n    );\n    context.fillStyle = fillStyle;\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor,\n        fillStyle: element.fillStyle,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness\n      });\n    });\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"diamond\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      const [\n        topX,\n        topY,\n        rightX,\n        rightY,\n        bottomX,\n        bottomY,\n        leftX,\n        leftY\n      ] = getDiamondPoints(element);\n      return generator.polygon(\n        [\n          [topX, topY],\n          [rightX, rightY],\n          [bottomX, bottomY],\n          [leftX, leftY]\n        ],\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      );\n    });\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      )\n    );\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const options = {\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      roughness: element.roughness\n    };\n\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, options),\n      // -----\n      generator.line(x1, y1, x2, y2, options),\n      //    /\n      generator.line(x4, y4, x2, y2, options)\n    ]);\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    shapes.forEach(shape => rc.draw(shape));\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n    return;\n  } else if (isTextElement(element)) {\n    context.globalAlpha = element.opacity / 100;\n    const font = context.font;\n    context.font = element.font;\n    const fillStyle = context.fillStyle;\n    context.fillStyle = element.strokeColor;\n    context.fillText(\n      element.text,\n      element.x + scrollX,\n      element.y + element.actualBoundingBoxAscent + scrollY\n    );\n    context.fillStyle = fillStyle;\n    context.font = font;\n    context.globalAlpha = 1;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords, handlerRectangles } from \"../element\";\n\nimport { roundRect } from \"./roundRect\";\nimport { SceneState } from \"../scene/types\";\nimport {\n  getScrollBars,\n  SCROLLBAR_COLOR,\n  SCROLLBAR_WIDTH\n} from \"../scene/scrollbars\";\n\nimport { renderElement } from \"./renderElement\";\n\nexport function renderScene(\n  elements: ExcalidrawElement[],\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    renderElement(element, rc, context, sceneState);\n  });\n\n  if (renderSelection) {\n    const selectedElements = elements.filter(el => el.isSelected);\n\n    selectedElements.forEach(element => {\n      const margin = 4;\n\n      const [\n        elementX1,\n        elementY1,\n        elementX2,\n        elementY2\n      ] = getElementAbsoluteCoords(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n    });\n\n    if (selectedElements.length === 1 && selectedElements[0].type !== \"text\") {\n      const handlers = handlerRectangles(selectedElements[0], sceneState);\n      Object.values(handlers).forEach(handler => {\n        context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n      });\n    }\n  }\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      elements,\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n","import rough from \"roughjs/bin/wrappers/rough\";\n\nimport { ExcalidrawElement } from \"../element/types\";\n\nimport { getElementAbsoluteCoords } from \"../element\";\n\nimport { renderScene } from \"../renderer\";\nimport { AppState } from \"../types\";\nimport nanoid from \"nanoid\";\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\nexport function saveAsJSON(elements: ExcalidrawElement[], name: string) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nexport function loadFromJSON(elements: ExcalidrawElement[]) {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        const data = JSON.parse(reader.result as string);\n        restore(elements, data.elements, null);\n        resolve();\n      }\n    };\n  });\n}\n\nexport function exportAsPNG(\n  elements: ExcalidrawElement[],\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    scrollX: number;\n    scrollY: number;\n    name: string;\n  }\n) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    subCanvasX1 = Math.min(subCanvasX1, x1);\n    subCanvasY1 = Math.min(subCanvasY1, y1);\n    subCanvasX2 = Math.max(subCanvasX2, x2);\n    subCanvasY2 = Math.max(subCanvasY2, y2);\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    elements,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction restore(\n  elements: ExcalidrawElement[],\n  savedElements: string | ExcalidrawElement[] | null,\n  savedState: string | null\n) {\n  try {\n    if (savedElements) {\n      elements.splice(\n        0,\n        elements.length,\n        ...(typeof savedElements === \"string\"\n          ? JSON.parse(savedElements)\n          : savedElements)\n      );\n      elements.forEach((element: ExcalidrawElement) => {\n        element.id = element.id || nanoid();\n        element.fillStyle = element.fillStyle || \"hachure\";\n        element.strokeWidth = element.strokeWidth || 1;\n        element.roughness = element.roughness || 1;\n        element.opacity =\n          element.opacity === null || element.opacity === undefined\n            ? 100\n            : element.opacity;\n      });\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements.splice(0, elements.length);\n    return null;\n  }\n}\n\nexport function restoreFromLocalStorage(elements: ExcalidrawElement[]) {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  return restore(elements, savedElements, savedState);\n}\n\nexport function saveToLocalStorage(\n  elements: ExcalidrawElement[],\n  state: AppState\n) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { hitTest } from \"../element/collision\";\n\nexport const hasBackground = (elements: ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\")\n  );\n\nexport const hasStroke = (elements: ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\" ||\n        element.type === \"arrow\")\n  );\n\nexport function getElementAtPosition(\n  elements: ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], x, y)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n","export function getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\nexport function capitalizeString(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n","import React from \"react\";\n\nexport function ButtonSelect<T>({\n  options,\n  value,\n  onChange\n}: {\n  options: { value: T; text: string }[];\n  value: T | null;\n  onChange: (value: T) => void;\n}) {\n  return (\n    <div className=\"buttonList\">\n      {options.map(option => (\n        <button\n          key={option.text}\n          onClick={() => onChange(option.value)}\n          className={value === option.value ? \"active\" : \"\"}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nexport const SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nexport const shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nexport function findShapeByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n","import { ExcalidrawElement } from \"./element/types\";\n\nclass SceneHistory {\n  private recording: boolean = true;\n  private stateHistory: string[] = [];\n  private redoStack: string[] = [];\n\n  generateCurrentEntry(elements: ExcalidrawElement[]) {\n    return JSON.stringify(\n      elements.map(element => ({ ...element, isSelected: false }))\n    );\n  }\n\n  pushEntry(newEntry: string) {\n    if (\n      this.stateHistory.length > 0 &&\n      this.stateHistory[this.stateHistory.length - 1] === newEntry\n    ) {\n      // If the last entry is the same as this one, ignore it\n      return;\n    }\n    this.stateHistory.push(newEntry);\n  }\n\n  restoreEntry(elements: ExcalidrawElement[], entry: string) {\n    const newElements = JSON.parse(entry);\n    elements.splice(0, elements.length);\n    newElements.forEach((newElement: ExcalidrawElement) => {\n      elements.push(newElement);\n    });\n    // When restoring, we shouldn't add an history entry otherwise we'll be stuck with it and can't go back\n    this.skipRecording();\n  }\n\n  clearRedoStack() {\n    this.redoStack.splice(0, this.redoStack.length);\n  }\n\n  redoOnce(elements: ExcalidrawElement[]) {\n    const currentEntry = this.generateCurrentEntry(elements);\n    const entryToRestore = this.redoStack.pop();\n    if (entryToRestore !== undefined) {\n      this.restoreEntry(elements, entryToRestore);\n      this.stateHistory.push(currentEntry);\n    }\n  }\n\n  undoOnce(elements: ExcalidrawElement[]) {\n    const currentEntry = this.generateCurrentEntry(elements);\n    let entryToRestore = this.stateHistory.pop();\n\n    // If nothing was changed since last, take the previous one\n    if (currentEntry === entryToRestore) {\n      entryToRestore = this.stateHistory.pop();\n    }\n    if (entryToRestore !== undefined) {\n      this.restoreEntry(elements, entryToRestore);\n      this.redoStack.push(currentEntry);\n    }\n  }\n\n  isRecording() {\n    return this.recording;\n  }\n\n  skipRecording() {\n    this.recording = false;\n  }\n\n  resumeRecording() {\n    this.recording = true;\n  }\n}\n\nexport const createHistory: () => { history: SceneHistory } = () => {\n  const history = new SceneHistory();\n  return { history };\n};\n","import React from \"react\";\n\ntype Props = {\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n  onCloseRequest?(): void;\n};\n\nexport function Popover({ children, left, onCloseRequest, top }: Props) {\n  return (\n    <div className=\"popover\" style={{ top: top, left: left }}>\n      <div\n        className=\"cover\"\n        onClick={onCloseRequest}\n        onContextMenu={e => {\n          e.preventDefault();\n          if (onCloseRequest) onCloseRequest();\n        }}\n      />\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\n\nimport \"./ContextMenu.css\";\n\ntype ContextMenuOption = {\n  label: string;\n  action(): void;\n};\n\ntype Props = {\n  options: ContextMenuOption[];\n  onCloseRequest?(): void;\n  top: number;\n  left: number;\n};\n\nfunction ContextMenu({ options, onCloseRequest, top, left }: Props) {\n  return (\n    <Popover onCloseRequest={onCloseRequest} top={top} left={left}>\n      <ul className=\"context-menu\" onContextMenu={e => e.preventDefault()}>\n        {options.map((option, idx) => (\n          <li\n            key={idx}\n            className=\"context-menu__option\"\n            onClick={onCloseRequest}\n          >\n            <ContextMenuOption {...option} />\n          </li>\n        ))}\n      </ul>\n    </Popover>\n  );\n}\n\nfunction ContextMenuOption({ label, action }: ContextMenuOption) {\n  return (\n    <button className=\"context-menu-option\" onClick={action}>\n      {label}\n    </button>\n  );\n}\n\nlet contextMenuNode: HTMLDivElement;\nfunction getContextMenuNode(): HTMLDivElement {\n  if (contextMenuNode) {\n    return contextMenuNode;\n  }\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  return (contextMenuNode = div);\n}\n\ntype ContextMenuParams = {\n  options: (ContextMenuOption | false | null | undefined)[];\n  top: number;\n  left: number;\n};\n\nfunction handleClose() {\n  unmountComponentAtNode(getContextMenuNode());\n}\n\nexport default {\n  push(params: ContextMenuParams) {\n    const options = Array.of<ContextMenuOption>();\n    params.options.forEach(option => {\n      if (option) {\n        options.push(option);\n      }\n    });\n    if (options.length) {\n      render(\n        <ContextMenu\n          top={params.top}\n          left={params.left}\n          options={options}\n          onCloseRequest={handleClose}\n        />,\n        getContextMenuNode()\n      );\n    }\n  }\n};\n","import React from \"react\";\n\nimport { SHAPES } from \"../../shapes\";\nimport { capitalizeString } from \"../../utils\";\n\ninterface PanelToolsProps {\n  activeTool: string;\n  onToolChange: (value: string) => void;\n}\n\nexport const PanelTools: React.FC<PanelToolsProps> = ({\n  activeTool,\n  onToolChange\n}) => {\n  return (\n    <>\n      <h4>Shapes</h4>\n      <div className=\"panelTools\">\n        {SHAPES.map(({ value, icon }) => (\n          <label\n            key={value}\n            className=\"tool\"\n            title={`${capitalizeString(value)} - ${capitalizeString(value)[0]}`}\n          >\n            <input\n              type=\"radio\"\n              checked={activeTool === value}\n              onChange={() => {\n                onToolChange(value);\n              }}\n            />\n            <div className=\"toolIcon\">{icon}</div>\n          </label>\n        ))}\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\n\ninterface PanelSelectionProps {\n  onBringForward: React.MouseEventHandler;\n  onBringToFront: React.MouseEventHandler;\n  onSendBackward: React.MouseEventHandler;\n  onSendToBack: React.MouseEventHandler;\n}\n\nexport const PanelSelection: React.FC<PanelSelectionProps> = ({\n  onBringForward,\n  onBringToFront,\n  onSendBackward,\n  onSendToBack\n}) => {\n  return (\n    <>\n      <h4>Selection</h4>\n      <div className=\"buttonList\">\n        <button type=\"button\" onClick={onBringForward}>\n          Bring forward\n        </button>\n        <button type=\"button\" onClick={onBringToFront}>\n          Bring to front\n        </button>\n        <button type=\"button\" onClick={onSendBackward}>\n          Send backward\n        </button>\n        <button type=\"button\" onClick={onSendToBack}>\n          Send to back\n        </button>\n      </div>\n    </>\n  );\n};\n","import React, { lazy } from \"react\";\nimport { Popover } from \"./Popover\";\n\nconst TwitterPicker = lazy(() =>\n  import(\n    /* webpackPrefetch: true */ \"react-color/lib/components/twitter/Twitter\"\n  )\n);\n\nexport function ColorPicker({\n  color,\n  onChange\n}: {\n  color: string | null;\n  onChange: (color: string) => void;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  return (\n    <div>\n      <button\n        className=\"swatch\"\n        style={color ? { backgroundColor: color } : undefined}\n        onClick={() => setActive(!isActive)}\n      />\n      <React.Suspense fallback=\"\">\n        {isActive ? (\n          <Popover onCloseRequest={() => setActive(false)}>\n            <TwitterPicker\n              colors={[\n                \"#000000\",\n                \"#ABB8C3\",\n                \"#FFFFFF\",\n                \"#FF6900\",\n                \"#FCB900\",\n                \"#00D084\",\n                \"#8ED1FC\",\n                \"#0693E3\",\n                \"#EB144C\",\n                \"#F78DA7\",\n                \"#9900EF\"\n              ]}\n              width=\"205px\"\n              color={color || undefined}\n              onChange={changedColor => {\n                onChange(changedColor.hex);\n              }}\n            />\n          </Popover>\n        ) : null}\n      </React.Suspense>\n      <input\n        type=\"text\"\n        className=\"swatch-input\"\n        value={color || \"\"}\n        onPaste={e => onChange(e.clipboardData.getData(\"text\"))}\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ColorPicker } from \"../ColorPicker\";\n\ninterface PanelColorProps {\n  title: string;\n  colorValue: string | null;\n  onColorChange: (value: string) => void;\n}\n\nexport const PanelColor: React.FC<PanelColorProps> = ({\n  title,\n  onColorChange,\n  colorValue\n}) => {\n  return (\n    <>\n      <h5>{title}</h5>\n      <ColorPicker\n        color={colorValue}\n        onChange={color => onColorChange(color)}\n      />\n    </>\n  );\n};\n","import React, { Fragment, Component } from \"react\";\n\ntype InputState = {\n  value: string;\n  edit: boolean;\n};\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport class EditableText extends Component<Props, InputState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      edit: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props: Props) {\n    this.setState({ value: props.value });\n  }\n\n  private handleEdit(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  private handleBlur() {\n    const { value } = this.state;\n\n    if (!value) {\n      this.setState({ value: this.props.value, edit: false });\n      return;\n    }\n    this.props.onChange(value);\n    this.setState({ edit: false });\n  }\n\n  public render() {\n    const { value, edit } = this.state;\n\n    return (\n      <Fragment>\n        {edit ? (\n          <input\n            className=\"project-name-input\"\n            name=\"name\"\n            maxLength={25}\n            value={value}\n            onChange={e => this.handleEdit(e)}\n            onBlur={() => this.handleBlur()}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                this.handleBlur();\n              }\n            }}\n            autoFocus\n          />\n        ) : (\n          <span\n            onClick={() => this.setState({ edit: true })}\n            className=\"project-name\"\n          >\n            {value}\n          </span>\n        )}\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { EditableText } from \"../EditableText\";\n\ninterface PanelExportProps {\n  projectName: string;\n  onProjectNameChange: (name: string) => void;\n  onExportAsPNG: React.MouseEventHandler;\n  exportBackground: boolean;\n  onExportBackgroundChange: (val: boolean) => void;\n  onSaveScene: React.MouseEventHandler;\n  onLoadScene: React.MouseEventHandler;\n}\n\nexport const PanelExport: React.FC<PanelExportProps> = ({\n  projectName,\n  exportBackground,\n  onProjectNameChange,\n  onExportBackgroundChange,\n  onSaveScene,\n  onLoadScene,\n  onExportAsPNG\n}) => {\n  return (\n    <>\n      <h4>Export</h4>\n      <div className=\"panelColumn\">\n        <h5>Name</h5>\n        {projectName && (\n          <EditableText\n            value={projectName}\n            onChange={(name: string) => onProjectNameChange(name)}\n          />\n        )}\n        <h5>Image</h5>\n        <button onClick={onExportAsPNG}>Export to png</button>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={exportBackground}\n            onChange={e => {\n              onExportBackgroundChange(e.target.checked);\n            }}\n          />\n          background\n        </label>\n        <h5>Scene</h5>\n        <button onClick={onSaveScene}>Save as...</button>\n        <button onClick={onLoadScene}>Load file...</button>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { ColorPicker } from \"../ColorPicker\";\n\ninterface PanelCanvasProps {\n  viewBackgroundColor: string;\n  onViewBackgroundColorChange: (val: string) => void;\n  onClearCanvas: React.MouseEventHandler;\n}\n\nexport const PanelCanvas: React.FC<PanelCanvasProps> = ({\n  viewBackgroundColor,\n  onViewBackgroundColorChange,\n  onClearCanvas\n}) => {\n  return (\n    <>\n      <h4>Canvas</h4>\n      <div className=\"panelColumn\">\n        <h5>Canvas Background Color</h5>\n        <ColorPicker\n          color={viewBackgroundColor}\n          onChange={color => onViewBackgroundColorChange(color)}\n        />\n        <button\n          type=\"button\"\n          onClick={onClearCanvas}\n          title=\"Clear the canvas & reset background color\"\n        >\n          Clear canvas\n        </button>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\n\nimport { moveOneLeft, moveAllLeft, moveOneRight, moveAllRight } from \"./zindex\";\nimport { randomSeed } from \"./random\";\nimport { newElement, resizeTest, isTextElement, textWysiwyg } from \"./element\";\nimport {\n  clearSelection,\n  getSelectedIndices,\n  deleteSelectedElements,\n  setSelection,\n  isOverScrollBars,\n  someElementIsSelected,\n  getSelectedAttribute,\n  loadFromJSON,\n  saveAsJSON,\n  exportAsPNG,\n  restoreFromLocalStorage,\n  saveToLocalStorage,\n  hasBackground,\n  hasStroke,\n  getElementAtPosition,\n  createScene\n} from \"./scene\";\n\nimport { renderScene } from \"./renderer\";\nimport { AppState } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"./element/types\";\n\nimport { getDateTime, isInputLike } from \"./utils\";\n\nimport { ButtonSelect } from \"./components/ButtonSelect\";\nimport { findShapeByKey, shapesShortcutKeys } from \"./shapes\";\nimport { createHistory } from \"./history\";\n\nimport \"./styles.scss\";\nimport ContextMenu from \"./components/ContextMenu\";\nimport { PanelTools } from \"./components/panels/PanelTools\";\nimport { PanelSelection } from \"./components/panels/PanelSelection\";\nimport { PanelColor } from \"./components/panels/PanelColor\";\nimport { PanelExport } from \"./components/panels/PanelExport\";\nimport { PanelCanvas } from \"./components/panels/PanelCanvas\";\n\nconst { elements } = createScene();\nconst { history } = createHistory();\n\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nexport const KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ENTER: \"Enter\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nconst META_KEY = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform)\n  ? \"metaKey\"\n  : \"ctrlKey\";\n\nlet copiedStyles: string = \"{}\";\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction addTextElement(\n  element: ExcalidrawTextElement,\n  text: string,\n  font: string\n) {\n  resetCursor();\n  if (text === null || text === \"\") {\n    return false;\n  }\n  element.text = text;\n  element.font = font;\n  const currentFont = context.font;\n  context.font = element.font;\n  const textMeasure = context.measureText(element.text);\n  const width = textMeasure.width;\n  const actualBoundingBoxAscent =\n    textMeasure.actualBoundingBoxAscent || parseInt(font);\n  const actualBoundingBoxDescent = textMeasure.actualBoundingBoxDescent || 0;\n  element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n  context.font = currentFont;\n  const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n  // Center the text\n  element.x -= width / 2;\n  element.y -= actualBoundingBoxAscent;\n  element.width = width;\n  element.height = height;\n\n  return true;\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const savedState = restoreFromLocalStorage(elements);\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    currentItemFont: \"20px Virgil\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (isInputLike(event.target)) return;\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection(elements);\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      this.deleteSelectedElements();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n\n      // Send backward: Cmd-Shift-Alt-B\n    } else if (\n      event[META_KEY] &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyB\"\n    ) {\n      this.moveOneLeft();\n      event.preventDefault();\n\n      // Send to back: Cmd-Shift-B\n    } else if (event[META_KEY] && event.shiftKey && event.code === \"KeyB\") {\n      this.moveAllLeft();\n      event.preventDefault();\n\n      // Bring forward: Cmd-Shift-Alt-F\n    } else if (\n      event[META_KEY] &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyF\"\n    ) {\n      this.moveOneRight();\n      event.preventDefault();\n\n      // Bring to front: Cmd-Shift-F\n    } else if (event[META_KEY] && event.shiftKey && event.code === \"KeyF\") {\n      this.moveAllRight();\n      event.preventDefault();\n      // Select all: Cmd-A\n    } else if (event[META_KEY] && event.code === \"KeyA\") {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findShapeByKey(event.key) });\n    } else if (event[META_KEY] && event.code === \"KeyZ\") {\n      if (event.shiftKey) {\n        // Redo action\n        history.redoOnce(elements);\n      } else {\n        // undo action\n        history.undoOnce(elements);\n      }\n      this.forceUpdate();\n      event.preventDefault();\n      // Copy Styles: Cmd-Shift-C\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyC\") {\n      this.copyStyles();\n      // Paste Styles: Cmd-Shift-V\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyV\") {\n      this.pasteStyles();\n      event.preventDefault();\n    }\n  };\n\n  private deleteSelectedElements = () => {\n    deleteSelectedElements(elements);\n    this.forceUpdate();\n  };\n\n  private clearCanvas = () => {\n    if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n      elements.splice(0, elements.length);\n      this.setState({\n        viewBackgroundColor: \"#ffffff\",\n        scrollX: 0,\n        scrollY: 0\n      });\n      this.forceUpdate();\n    }\n  };\n\n  private copyStyles = () => {\n    const element = elements.find(el => el.isSelected);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n  };\n\n  private pasteStyles = () => {\n    const pastedElement = JSON.parse(copiedStyles);\n    elements.forEach(element => {\n      if (element.isSelected) {\n        element.backgroundColor = pastedElement?.backgroundColor;\n        element.strokeWidth = pastedElement?.strokeWidth;\n        element.strokeColor = pastedElement?.strokeColor;\n        element.fillStyle = pastedElement?.fillStyle;\n        element.opacity = pastedElement?.opacity;\n        element.roughness = pastedElement?.roughness;\n      }\n    });\n    this.forceUpdate();\n  };\n\n  private moveAllLeft = () => {\n    moveAllLeft(elements, getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveOneLeft = () => {\n    moveOneLeft(elements, getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveAllRight = () => {\n    moveAllRight(elements, getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveOneRight = () => {\n    moveOneRight(elements, getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private updateProjectName(name: string): void {\n    this.setState({ name });\n  }\n\n  private changeProperty = (callback: (element: ExcalidrawElement) => void) => {\n    elements.forEach(element => {\n      if (element.isSelected) {\n        callback(element);\n      }\n    });\n\n    this.forceUpdate();\n  };\n\n  private changeOpacity = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.changeProperty(element => (element.opacity = +event.target.value));\n  };\n\n  private changeStrokeColor = (color: string) => {\n    this.changeProperty(element => (element.strokeColor = color));\n    this.setState({ currentItemStrokeColor: color });\n  };\n\n  private changeBackgroundColor = (color: string) => {\n    this.changeProperty(element => (element.backgroundColor = color));\n    this.setState({ currentItemBackgroundColor: color });\n  };\n\n  private copyToClipboard = () => {\n    if (navigator.clipboard) {\n      const text = JSON.stringify(\n        elements.filter(element => element.isSelected)\n      );\n      navigator.clipboard.writeText(text);\n    }\n  };\n\n  private pasteFromClipboard = (x?: number, y?: number) => {\n    if (navigator.clipboard) {\n      navigator.clipboard\n        .readText()\n        .then(text => this.addElementsFromPaste(text, x, y));\n    }\n  };\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements(elements);\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          this.addElementsFromPaste(paste);\n          e.preventDefault();\n        }}\n      >\n        <div className=\"sidePanel\">\n          <PanelTools\n            activeTool={this.state.elementType}\n            onToolChange={value => {\n              this.setState({ elementType: value });\n              clearSelection(elements);\n              document.documentElement.style.cursor =\n                value === \"text\" ? \"text\" : \"crosshair\";\n              this.forceUpdate();\n            }}\n          />\n          {someElementIsSelected(elements) && (\n            <div className=\"panelColumn\">\n              <PanelSelection\n                onBringForward={this.moveOneRight}\n                onBringToFront={this.moveAllRight}\n                onSendBackward={this.moveOneLeft}\n                onSendToBack={this.moveAllLeft}\n              />\n\n              <PanelColor\n                title=\"Stroke Color\"\n                onColorChange={this.changeStrokeColor}\n                colorValue={getSelectedAttribute(\n                  elements,\n                  element => element.strokeColor\n                )}\n              />\n\n              {hasBackground(elements) && (\n                <>\n                  <PanelColor\n                    title=\"Background Color\"\n                    onColorChange={this.changeBackgroundColor}\n                    colorValue={getSelectedAttribute(\n                      elements,\n                      element => element.backgroundColor\n                    )}\n                  />\n\n                  <h5>Fill</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: \"solid\", text: \"Solid\" },\n                      { value: \"hachure\", text: \"Hachure\" },\n                      { value: \"cross-hatch\", text: \"Cross-hatch\" }\n                    ]}\n                    value={getSelectedAttribute(\n                      elements,\n                      element => element.fillStyle\n                    )}\n                    onChange={value => {\n                      this.changeProperty(element => {\n                        element.fillStyle = value;\n                      });\n                    }}\n                  />\n                </>\n              )}\n\n              {hasStroke(elements) && (\n                <>\n                  <h5>Stroke Width</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: 1, text: \"Thin\" },\n                      { value: 2, text: \"Bold\" },\n                      { value: 4, text: \"Extra Bold\" }\n                    ]}\n                    value={getSelectedAttribute(\n                      elements,\n                      element => element.strokeWidth\n                    )}\n                    onChange={value => {\n                      this.changeProperty(element => {\n                        element.strokeWidth = value;\n                      });\n                    }}\n                  />\n\n                  <h5>Sloppiness</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: 0, text: \"Draftsman\" },\n                      { value: 1, text: \"Artist\" },\n                      { value: 3, text: \"Cartoonist\" }\n                    ]}\n                    value={getSelectedAttribute(\n                      elements,\n                      element => element.roughness\n                    )}\n                    onChange={value =>\n                      this.changeProperty(element => {\n                        element.roughness = value;\n                      })\n                    }\n                  />\n                </>\n              )}\n\n              <h5>Opacity</h5>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                onChange={this.changeOpacity}\n                value={\n                  getSelectedAttribute(elements, element => element.opacity) ||\n                  0 /* Put the opacity at 0 if there are two conflicting ones */\n                }\n              />\n\n              <button onClick={this.deleteSelectedElements}>\n                Delete selected\n              </button>\n            </div>\n          )}\n          <PanelCanvas\n            onClearCanvas={this.clearCanvas}\n            onViewBackgroundColorChange={val =>\n              this.setState({ viewBackgroundColor: val })\n            }\n            viewBackgroundColor={this.state.viewBackgroundColor}\n          />\n          <PanelExport\n            projectName={this.state.name}\n            onProjectNameChange={this.updateProjectName}\n            onExportAsPNG={() => exportAsPNG(elements, canvas, this.state)}\n            exportBackground={this.state.exportBackground}\n            onExportBackgroundChange={val =>\n              this.setState({ exportBackground: val })\n            }\n            onSaveScene={() => saveAsJSON(elements, this.state.name)}\n            onLoadScene={() =>\n              loadFromJSON(elements).then(() => this.forceUpdate())\n            }\n          />\n        </div>\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onContextMenu={e => {\n            e.preventDefault();\n\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n\n            const element = getElementAtPosition(elements, x, y);\n            if (!element) {\n              ContextMenu.push({\n                options: [\n                  navigator.clipboard && {\n                    label: \"Paste\",\n                    action: () => this.pasteFromClipboard(x, y)\n                  }\n                ],\n                top: e.clientY,\n                left: e.clientX\n              });\n              return;\n            }\n\n            if (!element.isSelected) {\n              clearSelection(elements);\n              element.isSelected = true;\n              this.forceUpdate();\n            }\n\n            ContextMenu.push({\n              options: [\n                navigator.clipboard && {\n                  label: \"Copy\",\n                  action: this.copyToClipboard\n                },\n                navigator.clipboard && {\n                  label: \"Paste\",\n                  action: () => this.pasteFromClipboard(x, y)\n                },\n                { label: \"Copy Styles\", action: this.copyStyles },\n                { label: \"Paste Styles\", action: this.pasteStyles },\n                { label: \"Delete\", action: this.deleteSelectedElements },\n                { label: \"Move Forward\", action: this.moveOneRight },\n                { label: \"Send to Front\", action: this.moveAllRight },\n                { label: \"Move Backwards\", action: this.moveOneLeft },\n                { label: \"Send to Back\", action: this.moveAllLeft }\n              ],\n              top: e.clientY,\n              left: e.clientX\n            });\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              elements,\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n            let resizeHandle: ReturnType<typeof resizeTest> = false;\n            let isDraggingElements = false;\n            let isResizingElements = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = elements.find(element => {\n                return resizeTest(element, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              });\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeTest(resizeElement, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                const hitElement = getElementAtPosition(elements, x, y);\n\n                // If we click on something\n                if (hitElement) {\n                  if (hitElement.isSelected) {\n                    // If that element is not already selected, do nothing,\n                    // we're likely going to drag it\n                  } else {\n                    // We unselect every other elements unless shift is pressed\n                    if (!e.shiftKey) {\n                      clearSelection(elements);\n                    }\n                  }\n                  // No matter what, we select it\n                  hitElement.isSelected = true;\n                  // We duplicate the selected element if alt is pressed on Mouse down\n                  if (e.altKey) {\n                    elements.push(\n                      ...elements.reduce((duplicates, element) => {\n                        if (element.isSelected) {\n                          duplicates.push({ ...element });\n                          element.isSelected = false;\n                        }\n                        return duplicates;\n                      }, [] as typeof elements)\n                    );\n                  }\n                } else {\n                  // If we don't click on anything, let's remove all the selected elements\n                  clearSelection(elements);\n                }\n\n                isDraggingElements = someElementIsSelected(elements);\n\n                if (isDraggingElements) {\n                  document.documentElement.style.cursor = \"move\";\n                }\n              }\n            }\n\n            if (isTextElement(element)) {\n              textWysiwyg({\n                initText: \"\",\n                x: e.clientX,\n                y: e.clientY,\n                strokeColor: this.state.currentItemStrokeColor,\n                font: this.state.currentItemFont,\n                onSubmit: text => {\n                  addTextElement(element, text, this.state.currentItemFont);\n                  elements.push(element);\n                  element.isSelected = true;\n                  this.setState({\n                    draggingElement: null,\n                    elementType: \"selection\"\n                  });\n                }\n              });\n              return;\n            }\n\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          element.height += element.y - lastY;\n                          element.y = lastY;\n                        }\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          element.height += element.y - lastY;\n                          element.y = lastY;\n                        }\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height = lastY - element.y;\n                        }\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey\n                ? Math.abs(width) * Math.sign(height)\n                : height;\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(elements, draggingElement);\n              }\n              // We don't want to save history when moving an element\n              history.skipRecording();\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection(elements);\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            history.skipRecording();\n            this.forceUpdate();\n          }}\n          onDoubleClick={e => {\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n            const elementAtPosition = getElementAtPosition(elements, x, y);\n            if (elementAtPosition && !isTextElement(elementAtPosition)) {\n              return;\n            } else if (elementAtPosition) {\n              elements.splice(elements.indexOf(elementAtPosition), 1);\n              this.forceUpdate();\n            }\n\n            const element = newElement(\n              \"text\",\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            ) as ExcalidrawTextElement;\n\n            let initText = \"\";\n            let textX = e.clientX;\n            let textY = e.clientY;\n            if (elementAtPosition) {\n              Object.assign(element, elementAtPosition);\n              // x and y will change after calling addTextElement function\n              element.x = elementAtPosition.x + elementAtPosition.width / 2;\n              element.y =\n                elementAtPosition.y + elementAtPosition.actualBoundingBoxAscent;\n              initText = elementAtPosition.text;\n              textX =\n                this.state.scrollX +\n                elementAtPosition.x +\n                CANVAS_WINDOW_OFFSET_LEFT +\n                elementAtPosition.width / 2;\n              textY =\n                this.state.scrollY +\n                elementAtPosition.y +\n                CANVAS_WINDOW_OFFSET_TOP +\n                elementAtPosition.actualBoundingBoxAscent;\n            }\n\n            textWysiwyg({\n              initText,\n              x: textX,\n              y: textY,\n              strokeColor: element.strokeColor,\n              font: element.font || this.state.currentItemFont,\n              onSubmit: text => {\n                addTextElement(\n                  element,\n                  text,\n                  element.font || this.state.currentItemFont\n                );\n                elements.push(element);\n                element.isSelected = true;\n                this.setState({\n                  draggingElement: null,\n                  elementType: \"selection\"\n                });\n              }\n            });\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  private addElementsFromPaste = (paste: string, x?: number, y?: number) => {\n    let parsedElements;\n    try {\n      parsedElements = JSON.parse(paste);\n    } catch (e) {}\n    if (\n      Array.isArray(parsedElements) &&\n      parsedElements.length > 0 &&\n      parsedElements[0].type // need to implement a better check here...\n    ) {\n      clearSelection(elements);\n\n      if (x == null) x = 10 - this.state.scrollX;\n      if (y == null) y = 10 - this.state.scrollY;\n      const minX = Math.min(...parsedElements.map(element => element.x));\n      const minY = Math.min(...parsedElements.map(element => element.y));\n      const dx = x - minX;\n      const dy = y - minY;\n\n      parsedElements.forEach(parsedElement => {\n        parsedElement.x += dx;\n        parsedElement.y += dy;\n        parsedElement.seed = randomSeed();\n        elements.push(parsedElement);\n      });\n      this.forceUpdate();\n    }\n  };\n\n  componentDidUpdate() {\n    renderScene(elements, rc, canvas, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    saveToLocalStorage(elements, this.state);\n    if (history.isRecording()) {\n      history.pushEntry(history.generateCurrentEntry(elements));\n      history.clearRedoStack();\n    }\n    history.resumeRecording();\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\nReactDOM.render(<App />, rootElement);\n","import { ExcalidrawElement } from \"../element/types\";\n\nexport const createScene = () => {\n  const elements = Array.of<ExcalidrawElement>();\n  return { elements };\n};\n"],"sourceRoot":""}