{"version":3,"sources":["element/newElement.ts","math.ts","element/bounds.ts","element/handlerRectangles.ts","element/collision.ts","element/resizeTest.ts","element/typeChecks.ts","keys.ts","element/textWysiwyg.tsx","utils.ts","element/textElement.ts","scene/scrollbars.ts","scene/selection.ts","renderer/roundRect.ts","renderer/renderElement.ts","renderer/renderScene.ts","scene/data.ts","scene/comparisons.ts","scene/createScene.ts","shapes.tsx","history.ts","components/Popover.tsx","components/ContextMenu.tsx","actions/manager.tsx","actions/actionDeleteSelected.tsx","zindex.ts","actions/actionZindex.tsx","actions/actionSelectAll.ts","components/ButtonSelect.tsx","components/ColorPicker.tsx","components/panels/PanelColor.tsx","actions/actionProperties.tsx","appState.ts","actions/actionCanvas.tsx","components/EditableText.tsx","actions/actionExport.tsx","actions/actionStyles.ts","components/Panel.tsx","components/panels/PanelTools.tsx","components/panels/PanelSelection.tsx","components/panels/PanelCanvas.tsx","components/panels/PanelExport.tsx","components/SidePanel.tsx","index.tsx"],"names":["newElement","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","width","height","element","id","nanoid","isSelected","seed","randomSeed","shape","duplicateElement","copy","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","Math","hypot","rotate","angle","cos","sin","getElementAbsoluteCoords","getDiamondPoints","topX","floor","rightX","rightY","getArrowPoints","distance","minSize","min","xs","ys","PI","x3","y3","handlerRectangles","scrollX","scrollY","elementX1","elementX2","elementY1","elementY2","handlers","marginX","marginY","abs","nw","se","hitTest","px","py","tx","ty","a","b","forEach","ex","ey","rx","ry","qx","qy","r","q","max","t","topY","bottomX","bottomY","leftX","leftY","x4","y4","console","warn","Error","getElementWithResizeHandler","elements","reduce","result","resizeHandle","filter","Object","keys","key","handler","length","resizeTest","isTextElement","KEYS","META_KEY","test","window","navigator","platform","textWysiwyg","initText","font","onSubmit","editable","document","createElement","stopEvent","ev","stopPropagation","handleSubmit","innerText","cleanup","onblur","onkeydown","onpaste","removeEventListener","body","removeChild","contentEditable","tabIndex","dataset","assign","style","color","position","top","left","transform","textAlign","display","padding","outline","whiteSpace","minHeight","preventDefault","text","clipboardData","getData","replace","textContent","addEventListener","appendChild","focus","selection","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","capitalizeString","str","charAt","toUpperCase","slice","isInputLike","target","HTMLElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","measureText","line","offsetWidth","offsetHeight","span","overflow","baseline","offsetTop","redrawTextBoundingBox","metrics","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","clearSelection","newElements","deleteSelectedElements","el","getSelectedIndices","selectedIndices","index","push","someElementIsSelected","some","getSelectedAttribute","getAttribute","attributes","Array","from","Set","map","roundRect","context","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","renderElement","rc","generator","fillRect","rectangle","undefined","globalAlpha","draw","polygon","ellipse","options","fillText","actualBoundingBoxAscent","renderScene","canvas","sceneState","offsetX","offsetY","renderScrollbars","renderSelection","getContext","viewBackgroundColor","clearRect","translate","selectedElements","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","devicePixelRatio","strokeStyle","scrollBar","saveFile","name","data","link","setAttribute","click","remove","restore","savedElements","savedState","appState","getElementAtPosition","hitElement","i","SHAPES","icon","viewBox","d","value","shapesShortcutKeys","SceneHistory","recording","stateHistory","redoStack","JSON","stringify","newEntry","this","clearRedoStack","entry","parse","splice","entryToRestore","pop","restoreEntry","currentEntry","Popover","children","onCloseRequest","fitInViewport","popoverRef","useRef","useLayoutEffect","current","getBoundingClientRect","viewportWidth","innerWidth","viewportHeight","innerHeight","className","ref","onClick","onContextMenu","e","contextMenuNode","ContextMenu","option","idx","ContextMenuOption","label","action","getContextMenuNode","div","handleClose","unmountComponentAtNode","params","of","render","ActionManager","actions","updater","event","sort","keyPriority","keyTest","perform","actionFilter","contextMenuOrder","contextItemLabel","PanelComponent","updateData","formState","actionDeleteSelected","swap","indexA","indexB","moveOneLeft","indicesToMove","isSorted","moveOneRight","reversedIndicesToMove","moveAllLeft","leftMostElements","reverse","concat","pos","moveAllRight","rightMostElements","actionSendBackward","shiftKey","altKey","code","actionBringForward","actionSendToBack","actionBringToFront","actionSelectAll","elem","ButtonSelect","onChange","Picker","colors","React","useState","innerValue","setInnerValue","useEffect","title","spellCheck","match","clear","ColorPicker","isActive","setActive","Suspense","fallback","changedColor","onPaste","canvasBackground","elementBackground","elementStroke","PanelColor","colorType","onColorChange","colorValue","changeProperty","callback","actionChangeStrokeColor","currentItemStrokeColor","actionChangeBackgroundColor","currentItemBackgroundColor","actionChangeFillStyle","actionChangeStrokeWidth","actionChangeSloppiness","actionChangeOpacity","actionChangeFontSize","split","actionChangeFontFamily","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","getMinutes","secs","getSeconds","getDateTime","getDefaultAppState","draggingElement","resizingElement","elementType","exportBackground","currentItemFont","cursorX","cursorY","actionChangeViewBackgroundColor","actionClearCanvas","confirm","EditableText","props","state","edit","setState","maxLength","handleEdit","onBlur","handleBlur","onKeyDown","autoFocus","Component","actionChangeProjectName","actionChangeExportBackground","checked","actionSaveScene","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","actionLoadScene","loadedElements","input","reader","FileReader","accept","onchange","files","readAsText","alert","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","then","copiedStyles","actionCopyStyles","find","actionPasteStyles","pastedElement","Panel","defaultCollapsed","hide","collapsed","setCollapsed","PanelTools","activeTool","onToolChange","PanelSelection","actionManager","syncActionResult","renderAction","PanelCanvas","ClipboardIcon","probablySupportsClipboard","HTMLCanvasElement","prototype","clipboard","PanelExport","onExportCanvas","SidePanel","hasBackground","hasStroke","hasText","exportPadding","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","rough","toDataURL","toBlob","blob","async","write","ClipboardItem","err","exportCanvas","history","resetCursor","documentElement","cursor","addTextElement","lastCanvasWidth","lastCanvasHeight","lastMouseUp","viewportCoordsToSceneCoords","clientX","clientY","App","canvasOnlyActions","res","forceUpdate","onCut","setData","onCopy","paste","addElementsFromPaste","onResize","getCurrentCursorPosition","activeElement","blur","keyCode","handleKeyDown","step","includes","toLowerCase","ctrlKey","metaKey","redoOnce","undoOnce","removeWheelEventListener","copyToClipboard","writeText","pasteFromClipboard","readText","handleWheel","deltaX","deltaY","parsedElements","isArray","parsedElement","elementsCenterX","elementsCenterY","duplicate","saveDebounced","fn","timeout","handle","args","clearTimeout","setTimeout","debounce","localStorage","setItem","registerAction","getItem","restoreFromLocalStorage","passive","scale","getContextMenuItems","onMouseDown","button","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","isResizingElements","draggingOccured","elementIsAddedToSelection","resizeElement","textX","textY","snappedToCenterPosition","getTextWysiwygSnappedToCenterPosition","elementCenterX","elementCenterY","wysiwygX","wysiwygY","lastX","lastY","onMouseMove","skipRecording","sign","selectionX1","selectionY1","selectionX2","selectionY2","getElementsWithinSelection","onMouseUp","resumeRecording","onDoubleClick","elementAtPosition","Boolean","buttons","elementClickedInside","getElementContainingPosition","isRecording","pushEntry","generateCurrentEntry","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.f49a7f8e.chunk.js","sourcesContent":["import { randomSeed } from \"roughjs/bin/math\";\nimport nanoid from \"nanoid\";\nimport { Drawable } from \"roughjs/bin/core\";\n\nexport function newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    id: nanoid(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    isSelected: false,\n    seed: randomSeed(),\n    shape: null as Drawable | Drawable[] | null\n  };\n  return element;\n}\n\nexport function duplicateElement(element: ReturnType<typeof newElement>) {\n  const copy = { ...element };\n  delete copy.shape;\n  copy.id = nanoid();\n  copy.seed = randomSeed();\n  return copy;\n}\n","// https://stackoverflow.com/a/6853926/232122\nexport function distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nexport function rotate(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number\n) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { rotate } from \"../math\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nexport function getElementAbsoluteCoords(element: ExcalidrawElement) {\n  return [\n    element.width >= 0 ? element.x : element.x + element.width, // x1\n    element.height >= 0 ? element.y : element.y + element.height, // y1\n    element.width >= 0 ? element.x + element.width : element.x, // x2\n    element.height >= 0 ? element.y + element.height : element.y // y2\n  ];\n}\n\nexport function getDiamondPoints(element: ExcalidrawElement) {\n  // Here we add +1 to avoid these numbers to be 0\n  // otherwise rough.js will throw an error complaining about it\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nexport function getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { SceneScroll } from \"../scene/types\";\n\ntype Sides = \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\";\n\nexport function handlerRectangles(\n  element: ExcalidrawElement,\n  { scrollX, scrollY }: SceneScroll\n) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers = {} as { [T in Sides]: number[] };\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + scrollX - 4,\n      elementY1 - margin + scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + scrollX - 4,\n      elementY2 - margin + scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + scrollX + marginX,\n    elementY1 - margin + scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + scrollX - marginX,\n    elementY1 - margin + scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + scrollX + marginX,\n    elementY2 - margin + scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + scrollX - marginX,\n    elementY2 - margin + scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    } as typeof handlers;\n  }\n\n  return handlers;\n}\n","import { distanceBetweenPointAndSegment } from \"../math\";\n\nimport { ExcalidrawElement } from \"./types\";\nimport {\n  getArrowPoints,\n  getDiamondPoints,\n  getElementAbsoluteCoords\n} from \"./bounds\";\n\nexport function hitTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number\n): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = Math.abs(element.width) / 2;\n    const b = Math.abs(element.height) / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    if (element.backgroundColor !== \"transparent\") {\n      return (\n        a * tx - (px - lineThreshold) >= 0 && b * ty - (py - lineThreshold) >= 0\n      );\n    } else {\n      return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n    }\n  } else if (element.type === \"rectangle\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    if (element.backgroundColor !== \"transparent\") {\n      return (\n        x > x1 - lineThreshold &&\n        x < x2 + lineThreshold &&\n        y > y1 - lineThreshold &&\n        y < y2 + lineThreshold\n      );\n    }\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    let [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    if (element.backgroundColor !== \"transparent\") {\n      // TODO: remove this when we normalize coordinates globally\n      if (topY > bottomY) [bottomY, topY] = [topY, bottomY];\n      if (rightX < leftX) [leftX, rightX] = [rightX, leftX];\n\n      topY -= lineThreshold;\n      bottomY += lineThreshold;\n      leftX -= lineThreshold;\n      rightX += lineThreshold;\n\n      // all deltas should be < 0. Delta > 0 indicates it's on the outside side\n      //  of the line.\n      //\n      //          (topX, topY)\n      //     D  /             \\ A\n      //      /               \\\n      //  (leftX, leftY)  (rightX, rightY)\n      //    C \\               / B\n      //      \\              /\n      //      (bottomX, bottomY)\n      //\n      // https://stackoverflow.com/a/2752753/927631\n      return (\n        // delta from line D\n        (leftX - topX) * (y - leftY) - (leftX - x) * (topY - leftY) <= 0 &&\n        // delta from line A\n        (topX - rightX) * (y - rightY) - (x - rightX) * (topY - rightY) <= 0 &&\n        // delta from line B\n        (rightX - bottomX) * (y - bottomY) -\n          (x - bottomX) * (rightY - bottomY) <=\n          0 &&\n        // delta from line C\n        (bottomX - leftX) * (y - leftY) - (x - leftX) * (bottomY - leftY) <= 0\n      );\n    }\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { ExcalidrawElement } from \"./types\";\n\nimport { handlerRectangles } from \"./handlerRectangles\";\nimport { SceneScroll } from \"../scene/types\";\n\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\n\nexport function resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  { scrollX, scrollY }: SceneScroll\n): HandlerRectanglesRet | false {\n  if (!element.isSelected || element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, { scrollX, scrollY });\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key as HandlerRectanglesRet]!;\n\n    return (\n      x + scrollX >= handler[0] &&\n      x + scrollX <= handler[0] + handler[2] &&\n      y + scrollY >= handler[1] &&\n      y + scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as HandlerRectanglesRet;\n  }\n\n  return false;\n}\n\nexport function getElementWithResizeHandler(\n  elements: readonly ExcalidrawElement[],\n  { x, y }: { x: number; y: number },\n  { scrollX, scrollY }: SceneScroll\n) {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const resizeHandle = resizeTest(element, x, y, {\n      scrollX,\n      scrollY\n    });\n    return resizeHandle ? { element, resizeHandle } : null;\n  }, null as { element: ExcalidrawElement; resizeHandle: ReturnType<typeof resizeTest> } | null);\n}\n","import { ExcalidrawElement, ExcalidrawTextElement } from \"./types\";\n\nexport function isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n","export const KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ENTER: \"Enter\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nexport const META_KEY = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform)\n  ? \"metaKey\"\n  : \"ctrlKey\";\n\nexport function isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n","import { KEYS } from \"../keys\";\n\ntype TextWysiwygParams = {\n  initText: string;\n  x: number;\n  y: number;\n  strokeColor: string;\n  font: string;\n  onSubmit: (text: string) => void;\n};\n\nexport function textWysiwyg({\n  initText,\n  x,\n  y,\n  strokeColor,\n  font,\n  onSubmit\n}: TextWysiwygParams) {\n  // Using contenteditable here as it has dynamic width.\n  // But this solution has an issue — it allows to paste\n  // multiline text, which is not currently supported\n  const editable = document.createElement(\"div\");\n  editable.contentEditable = \"true\";\n  editable.tabIndex = 0;\n  editable.innerText = initText;\n  editable.dataset.type = \"wysiwyg\";\n\n  Object.assign(editable.style, {\n    color: strokeColor,\n    position: \"absolute\",\n    top: y + \"px\",\n    left: x + \"px\",\n    transform: \"translate(-50%, -50%)\",\n    textAlign: \"center\",\n    display: \"inline-block\",\n    font: font,\n    padding: \"4px\",\n    outline: \"transparent\",\n    whiteSpace: \"nowrap\",\n    minHeight: \"1em\"\n  });\n\n  editable.onkeydown = ev => {\n    if (ev.key === KEYS.ESCAPE) {\n      ev.preventDefault();\n      if (initText) {\n        editable.innerText = initText;\n        handleSubmit();\n        return;\n      }\n      cleanup();\n      return;\n    }\n    if (ev.key === KEYS.ENTER) {\n      ev.preventDefault();\n      handleSubmit();\n    }\n  };\n  editable.onblur = handleSubmit;\n  // override paste to disallow non-textual data, and replace newlines\n  editable.onpaste = ev => {\n    ev.preventDefault();\n    try {\n      const text = ev.clipboardData!.getData(\"text\").replace(/\\n+/g, \" \");\n      editable.textContent = text;\n    } catch {}\n  };\n\n  function stopEvent(ev: Event) {\n    ev.stopPropagation();\n  }\n\n  function handleSubmit() {\n    if (editable.innerText) {\n      onSubmit(editable.innerText);\n    }\n    cleanup();\n  }\n\n  function cleanup() {\n    editable.onblur = null;\n    editable.onkeydown = null;\n    editable.onpaste = null;\n    window.removeEventListener(\"wheel\", stopEvent, true);\n    document.body.removeChild(editable);\n  }\n\n  window.addEventListener(\"wheel\", stopEvent, true);\n  document.body.appendChild(editable);\n  editable.focus();\n  const selection = window.getSelection();\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(editable);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export function getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\nexport function capitalizeString(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\n// https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\nexport function measureText(text: string, font: string) {\n  const line = document.createElement(\"div\");\n  const body = document.body;\n  line.style.position = \"absolute\";\n  line.style.whiteSpace = \"nowrap\";\n  line.style.font = font;\n  body.appendChild(line);\n  // Now we can measure width and height of the letter\n  line.innerText = text;\n  const width = line.offsetWidth;\n  const height = line.offsetHeight;\n  // Now creating 1px sized item that will be aligned to baseline\n  // to calculate baseline shift\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  span.style.overflow = \"hidden\";\n  span.style.width = \"1px\";\n  span.style.height = \"1px\";\n  line.appendChild(span);\n  // Baseline is important for positioning text on canvas\n  const baseline = span.offsetTop + span.offsetHeight;\n  document.body.removeChild(line);\n\n  return { width, height, baseline };\n}\n\nexport function debounce<T extends any[]>(\n  fn: (...args: T) => void,\n  timeout: number\n) {\n  let handle = 0;\n  return (...args: T) => {\n    clearTimeout(handle);\n    handle = window.setTimeout(() => fn(...args), timeout);\n  };\n}\n","import { measureText } from \"../utils\";\nimport { ExcalidrawTextElement } from \"./types\";\n\nexport const redrawTextBoundingBox = (element: ExcalidrawTextElement) => {\n  const metrics = measureText(element.text, element.font);\n  element.width = metrics.width;\n  element.height = metrics.height;\n  element.baseline = metrics.baseline;\n};\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport function getScrollBars(\n  elements: readonly ExcalidrawElement[],\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nexport function isOverScrollBars(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(\n    elements,\n    canvasWidth,\n    canvasHeight,\n    scrollX,\n    scrollY\n  );\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport function getElementsWithinSelection(\n  elements: readonly ExcalidrawElement[],\n  selection: ExcalidrawElement\n) {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2\n  ] = getElementAbsoluteCoords(selection);\n  return elements.filter(element => {\n    const [\n      elementX1,\n      elementY1,\n      elementX2,\n      elementY2\n    ] = getElementAbsoluteCoords(element);\n\n    return (\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2\n    );\n  });\n}\n\nexport function clearSelection(elements: readonly ExcalidrawElement[]) {\n  const newElements = [...elements];\n\n  newElements.forEach(element => {\n    element.isSelected = false;\n  });\n\n  return newElements;\n}\n\nexport function deleteSelectedElements(elements: readonly ExcalidrawElement[]) {\n  return elements.filter(el => !el.isSelected);\n}\n\nexport function getSelectedIndices(elements: readonly ExcalidrawElement[]) {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nexport const someElementIsSelected = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected);\n\nexport function getSelectedAttribute<T>(\n  elements: readonly ExcalidrawElement[],\n  getAttribute: (element: ExcalidrawElement) => T\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => getAttribute(element))\n    )\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { isTextElement } from \"../element/typeChecks\";\nimport { getDiamondPoints, getArrowPoints } from \"../element/bounds\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { Drawable } from \"roughjs/bin/core\";\n\nexport function renderElement(\n  element: ExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D\n) {\n  const generator = rc.generator;\n  if (element.type === \"selection\") {\n    const fillStyle = context.fillStyle;\n    context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n    context.fillRect(0, 0, element.width, element.height);\n    context.fillStyle = fillStyle;\n  } else if (element.type === \"rectangle\") {\n    if (!element.shape) {\n      element.shape = generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill:\n          element.backgroundColor === \"transparent\"\n            ? undefined\n            : element.backgroundColor,\n        fillStyle: element.fillStyle,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness,\n        seed: element.seed\n      });\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"diamond\") {\n    if (!element.shape) {\n      const [\n        topX,\n        topY,\n        rightX,\n        rightY,\n        bottomX,\n        bottomY,\n        leftX,\n        leftY\n      ] = getDiamondPoints(element);\n      element.shape = generator.polygon(\n        [\n          [topX, topY],\n          [rightX, rightY],\n          [bottomX, bottomY],\n          [leftX, leftY]\n        ],\n        {\n          stroke: element.strokeColor,\n          fill:\n            element.backgroundColor === \"transparent\"\n              ? undefined\n              : element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness,\n          seed: element.seed\n        }\n      );\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"ellipse\") {\n    if (!element.shape) {\n      element.shape = generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        {\n          stroke: element.strokeColor,\n          fill:\n            element.backgroundColor === \"transparent\"\n              ? undefined\n              : element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness,\n          seed: element.seed\n        }\n      );\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const options = {\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      roughness: element.roughness,\n      seed: element.seed\n    };\n\n    if (!element.shape) {\n      element.shape = [\n        //    \\\n        generator.line(x3, y3, x2, y2, options),\n        // -----\n        generator.line(x1, y1, x2, y2, options),\n        //    /\n        generator.line(x4, y4, x2, y2, options)\n      ];\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    (element.shape as Drawable[]).forEach(shape => rc.draw(shape));\n    context.globalAlpha = 1;\n    return;\n  } else if (isTextElement(element)) {\n    context.globalAlpha = element.opacity / 100;\n    const font = context.font;\n    context.font = element.font;\n    const fillStyle = context.fillStyle;\n    context.fillStyle = element.strokeColor;\n    context.fillText(\n      element.text,\n      0,\n      element.baseline || element.actualBoundingBoxAscent || 0\n    );\n    context.fillStyle = fillStyle;\n    context.font = font;\n    context.globalAlpha = 1;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords, handlerRectangles } from \"../element\";\n\nimport { roundRect } from \"./roundRect\";\nimport { SceneState } from \"../scene/types\";\nimport {\n  getScrollBars,\n  SCROLLBAR_COLOR,\n  SCROLLBAR_WIDTH\n} from \"../scene/scrollbars\";\n\nimport { renderElement } from \"./renderElement\";\n\nexport function renderScene(\n  elements: readonly ExcalidrawElement[],\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    context.translate(\n      element.x + sceneState.scrollX,\n      element.y + sceneState.scrollY\n    );\n    renderElement(element, rc, context);\n    context.translate(\n      -element.x - sceneState.scrollX,\n      -element.y - sceneState.scrollY\n    );\n  });\n\n  if (renderSelection) {\n    const selectedElements = elements.filter(el => el.isSelected);\n\n    selectedElements.forEach(element => {\n      const margin = 4;\n\n      const [\n        elementX1,\n        elementY1,\n        elementX2,\n        elementY2\n      ] = getElementAbsoluteCoords(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n    });\n\n    if (selectedElements.length === 1 && selectedElements[0].type !== \"text\") {\n      const handlers = handlerRectangles(selectedElements[0], sceneState);\n      Object.values(handlers).forEach(handler => {\n        context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n      });\n    }\n  }\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      elements,\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n","import rough from \"roughjs/bin/rough\";\n\nimport { ExcalidrawElement } from \"../element/types\";\n\nimport { getElementAbsoluteCoords } from \"../element\";\n\nimport { renderScene } from \"../renderer\";\nimport { AppState } from \"../types\";\nimport { ExportType } from \"./types\";\nimport nanoid from \"nanoid\";\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\ninterface DataState {\n  elements: readonly ExcalidrawElement[];\n  appState: any;\n}\n\nexport function saveAsJSON(\n  elements: readonly ExcalidrawElement[],\n  name: string\n) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements: elements.map(({ shape, ...el }) => el)\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nexport function loadFromJSON() {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise<DataState>(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        let elements = [];\n        try {\n          const data = JSON.parse(reader.result as string);\n          elements = data.elements || [];\n        } catch (e) {\n          // Do nothing because elements array is already empty\n        }\n        resolve(restore(elements, null));\n      }\n    };\n  });\n}\n\nexport function exportCanvas(\n  type: ExportType,\n  elements: readonly ExcalidrawElement[],\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    scrollX: number;\n    scrollY: number;\n    name: string;\n  }\n) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    subCanvasX1 = Math.min(subCanvasX1, x1);\n    subCanvasY1 = Math.min(subCanvasY1, y1);\n    subCanvasX2 = Math.max(subCanvasX2, x2);\n    subCanvasY2 = Math.max(subCanvasY2, y2);\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    elements,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  if (type === \"png\") {\n    saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n  } else if (type === \"clipboard\") {\n    try {\n      tempCanvas.toBlob(async function(blob) {\n        try {\n          await navigator.clipboard.write([\n            new window.ClipboardItem({ \"image/png\": blob })\n          ]);\n        } catch (err) {\n          window.alert(\"Couldn't copy to clipboard. Try using Chrome browser.\");\n        }\n      });\n    } catch (err) {\n      window.alert(\"Couldn't copy to clipboard. Try using Chrome browser.\");\n    }\n  }\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction restore(\n  savedElements: readonly ExcalidrawElement[],\n  savedState: any\n): DataState {\n  return {\n    elements: savedElements.map(element => ({\n      ...element,\n      id: element.id || nanoid(),\n      fillStyle: element.fillStyle || \"hachure\",\n      strokeWidth: element.strokeWidth || 1,\n      roughness: element.roughness || 1,\n      opacity:\n        element.opacity === null || element.opacity === undefined\n          ? 100\n          : element.opacity\n    })),\n    appState: savedState\n  };\n}\n\nexport function restoreFromLocalStorage() {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  let elements = [];\n  if (savedElements) {\n    try {\n      elements = JSON.parse(savedElements).map(\n        ({ shape, ...element }: ExcalidrawElement) => element\n      );\n    } catch (e) {\n      // Do nothing because elements array is already empty\n    }\n  }\n\n  let appState = null;\n  if (savedState) {\n    try {\n      appState = JSON.parse(savedState);\n    } catch (e) {\n      // Do nothing because appState is already null\n    }\n  }\n\n  return restore(elements, appState);\n}\n\nexport function saveToLocalStorage(\n  elements: readonly ExcalidrawElement[],\n  state: AppState\n) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { hitTest } from \"../element/collision\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport const hasBackground = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\")\n  );\n\nexport const hasStroke = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\" ||\n        element.type === \"arrow\")\n  );\n\nexport const hasText = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected && element.type === \"text\");\n\nexport function getElementAtPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], x, y)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n\nexport function getElementContainingPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(elements[i]);\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n  return hitElement;\n}\n","import { ExcalidrawElement } from \"../element/types\";\n\nexport const createScene = () => {\n  const elements: readonly ExcalidrawElement[] = [];\n  return { elements };\n};\n","import React from \"react\";\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nexport const SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nexport const shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nexport function findShapeByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n","import { ExcalidrawElement } from \"./element/types\";\n\nclass SceneHistory {\n  private recording: boolean = true;\n  private stateHistory: string[] = [];\n  private redoStack: string[] = [];\n\n  generateCurrentEntry(elements: readonly ExcalidrawElement[]) {\n    return JSON.stringify(\n      elements.map(({ shape, ...element }) => ({\n        ...element,\n        isSelected: false\n      }))\n    );\n  }\n\n  pushEntry(newEntry: string) {\n    if (\n      this.stateHistory.length > 0 &&\n      this.stateHistory[this.stateHistory.length - 1] === newEntry\n    ) {\n      // If the last entry is the same as this one, ignore it\n      return;\n    }\n\n    this.stateHistory.push(newEntry);\n\n    // As a new entry was pushed, we invalidate the redo stack\n    this.clearRedoStack();\n  }\n\n  restoreEntry(entry: string) {\n    try {\n      return JSON.parse(entry);\n    } catch {\n      return null;\n    }\n  }\n\n  clearRedoStack() {\n    this.redoStack.splice(0, this.redoStack.length);\n  }\n\n  redoOnce() {\n    if (this.redoStack.length === 0) {\n      return null;\n    }\n\n    const entryToRestore = this.redoStack.pop();\n\n    if (entryToRestore !== undefined) {\n      this.stateHistory.push(entryToRestore);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  undoOnce() {\n    if (this.stateHistory.length === 0) {\n      return null;\n    }\n\n    const currentEntry = this.stateHistory.pop();\n    const entryToRestore = this.stateHistory[this.stateHistory.length - 1];\n\n    if (currentEntry !== undefined) {\n      this.redoStack.push(currentEntry);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  isRecording() {\n    return this.recording;\n  }\n\n  skipRecording() {\n    this.recording = false;\n  }\n\n  resumeRecording() {\n    this.recording = true;\n  }\n}\n\nexport const createHistory: () => { history: SceneHistory } = () => {\n  const history = new SceneHistory();\n  return { history };\n};\n","import React, { useLayoutEffect, useRef } from \"react\";\n\ntype Props = {\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n  onCloseRequest?(): void;\n  fitInViewport?: boolean;\n};\n\nexport function Popover({\n  children,\n  left,\n  top,\n  onCloseRequest,\n  fitInViewport = false\n}: Props) {\n  const popoverRef = useRef<HTMLDivElement>(null);\n\n  // ensure the popover doesn't overflow the viewport\n  useLayoutEffect(() => {\n    if (fitInViewport && popoverRef.current) {\n      const element = popoverRef.current;\n      const { x, y, width, height } = element.getBoundingClientRect();\n\n      const viewportWidth = window.innerWidth;\n      if (x + width > viewportWidth) {\n        element.style.left = viewportWidth - width + \"px\";\n      }\n      const viewportHeight = window.innerHeight;\n      if (y + height > viewportHeight) {\n        element.style.top = viewportHeight - height + \"px\";\n      }\n    }\n  }, [fitInViewport]);\n\n  return (\n    <div className=\"popover\" style={{ top: top, left: left }} ref={popoverRef}>\n      <div\n        className=\"cover\"\n        onClick={onCloseRequest}\n        onContextMenu={e => {\n          e.preventDefault();\n          if (onCloseRequest) onCloseRequest();\n        }}\n      />\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\n\nimport \"./ContextMenu.css\";\n\ntype ContextMenuOption = {\n  label: string;\n  action(): void;\n};\n\ntype Props = {\n  options: ContextMenuOption[];\n  onCloseRequest?(): void;\n  top: number;\n  left: number;\n};\n\nfunction ContextMenu({ options, onCloseRequest, top, left }: Props) {\n  return (\n    <Popover\n      onCloseRequest={onCloseRequest}\n      top={top}\n      left={left}\n      fitInViewport={true}\n    >\n      <ul className=\"context-menu\" onContextMenu={e => e.preventDefault()}>\n        {options.map((option, idx) => (\n          <li\n            key={idx}\n            className=\"context-menu__option\"\n            onClick={onCloseRequest}\n          >\n            <ContextMenuOption {...option} />\n          </li>\n        ))}\n      </ul>\n    </Popover>\n  );\n}\n\nfunction ContextMenuOption({ label, action }: ContextMenuOption) {\n  return (\n    <button className=\"context-menu-option\" onClick={action}>\n      {label}\n    </button>\n  );\n}\n\nlet contextMenuNode: HTMLDivElement;\nfunction getContextMenuNode(): HTMLDivElement {\n  if (contextMenuNode) {\n    return contextMenuNode;\n  }\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  return (contextMenuNode = div);\n}\n\ntype ContextMenuParams = {\n  options: (ContextMenuOption | false | null | undefined)[];\n  top: number;\n  left: number;\n};\n\nfunction handleClose() {\n  unmountComponentAtNode(getContextMenuNode());\n}\n\nexport default {\n  push(params: ContextMenuParams) {\n    const options = Array.of<ContextMenuOption>();\n    params.options.forEach(option => {\n      if (option) {\n        options.push(option);\n      }\n    });\n    if (options.length) {\n      render(\n        <ContextMenu\n          top={params.top}\n          left={params.left}\n          options={options}\n          onCloseRequest={handleClose}\n        />,\n        getContextMenuNode()\n      );\n    }\n  }\n};\n","import React from \"react\";\nimport {\n  Action,\n  ActionsManagerInterface,\n  UpdaterFn,\n  ActionFilterFn\n} from \"./types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\n\nexport class ActionManager implements ActionsManagerInterface {\n  actions: { [keyProp: string]: Action } = {};\n\n  updater:\n    | ((elements: ExcalidrawElement[], appState: AppState) => void)\n    | null = null;\n\n  setUpdater(\n    updater: (elements: ExcalidrawElement[], appState: AppState) => void\n  ) {\n    this.updater = updater;\n  }\n\n  registerAction(action: Action) {\n    this.actions[action.name] = action;\n  }\n\n  handleKeyDown(\n    event: KeyboardEvent,\n    elements: readonly ExcalidrawElement[],\n    appState: AppState\n  ) {\n    const data = Object.values(this.actions)\n      .sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0))\n      .filter(\n        action => action.keyTest && action.keyTest(event, elements, appState)\n      );\n\n    if (data.length === 0) return {};\n\n    event.preventDefault();\n    return data[0].perform(elements, appState, null);\n  }\n\n  getContextMenuItems(\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n    updater: UpdaterFn,\n    actionFilter: ActionFilterFn = action => action\n  ) {\n    return Object.values(this.actions)\n      .filter(actionFilter)\n      .filter(action => \"contextItemLabel\" in action)\n      .sort(\n        (a, b) =>\n          (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) -\n          (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999)\n      )\n      .map(action => ({\n        label: action.contextItemLabel!,\n        action: () => {\n          updater(action.perform(elements, appState, null));\n        }\n      }));\n  }\n\n  renderAction(\n    name: string,\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n    updater: UpdaterFn\n  ) {\n    if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\n      const action = this.actions[name];\n      const PanelComponent = action.PanelComponent!;\n      const updateData = (formState: any) => {\n        updater(action.perform(elements, appState, formState));\n      };\n\n      return (\n        <PanelComponent\n          elements={elements}\n          appState={appState}\n          updateData={updateData}\n        />\n      );\n    }\n\n    return null;\n  }\n}\n","import { Action } from \"./types\";\nimport { deleteSelectedElements } from \"../scene\";\nimport { KEYS } from \"../keys\";\n\nexport const actionDeleteSelected: Action = {\n  name: \"deleteSelectedElements\",\n  perform: elements => {\n    return {\n      elements: deleteSelectedElements(elements)\n    };\n  },\n  contextItemLabel: \"Delete\",\n  contextMenuOrder: 3,\n  keyTest: event => event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE\n};\n","function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n\n  return elements;\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n  return elements;\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n\n  return elements;\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n\n  return elements;\n}\n","import { Action } from \"./types\";\nimport {\n  moveOneLeft,\n  moveOneRight,\n  moveAllLeft,\n  moveAllRight\n} from \"../zindex\";\nimport { getSelectedIndices } from \"../scene\";\nimport { META_KEY } from \"../keys\";\n\nexport const actionSendBackward: Action = {\n  name: \"sendBackward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneLeft([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Send Backward\",\n  keyPriority: 40,\n  keyTest: event =>\n    event[META_KEY] && event.shiftKey && event.altKey && event.code === \"KeyB\"\n};\n\nexport const actionBringForward: Action = {\n  name: \"bringForward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneRight([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Bring Forward\",\n  keyPriority: 40,\n  keyTest: event =>\n    event[META_KEY] && event.shiftKey && event.altKey && event.code === \"KeyF\"\n};\n\nexport const actionSendToBack: Action = {\n  name: \"sendToBack\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllLeft([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Send to Back\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyB\"\n};\n\nexport const actionBringToFront: Action = {\n  name: \"bringToFront\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllRight([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Bring to Front\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyF\"\n};\n","import { Action } from \"./types\";\nimport { META_KEY } from \"../keys\";\n\nexport const actionSelectAll: Action = {\n  name: \"selectAll\",\n  perform: elements => {\n    return {\n      elements: elements.map(elem => ({ ...elem, isSelected: true }))\n    };\n  },\n  contextItemLabel: \"Select All\",\n  keyTest: event => event[META_KEY] && event.code === \"KeyA\"\n};\n","import React from \"react\";\n\nexport function ButtonSelect<T>({\n  options,\n  value,\n  onChange\n}: {\n  options: { value: T; text: string }[];\n  value: T | null;\n  onChange: (value: T) => void;\n}) {\n  return (\n    <div className=\"buttonList\">\n      {options.map(option => (\n        <button\n          key={option.text}\n          onClick={() => onChange(option.value)}\n          className={value === option.value ? \"active\" : \"\"}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\n\nimport \"./ColorPicker.css\";\n\n// This is a narrow reimplementation of the awesome react-color Twitter component\n// https://github.com/casesandberg/react-color/blob/master/src/components/twitter/Twitter.js\n\nconst Picker = function({\n  colors,\n  color,\n  onChange\n}: {\n  colors: string[];\n  color: string | undefined;\n  onChange: (color: string) => void;\n}) {\n  const [innerValue, setInnerValue] = React.useState(color);\n  React.useEffect(() => {\n    setInnerValue(color);\n  }, [color]);\n  return (\n    <div className=\"color-picker\">\n      <div className=\"color-picker-triangle-shadow\"></div>\n      <div className=\"color-picker-triangle\"></div>\n      <div className=\"color-picker-content\">\n        {colors.map(color => (\n          <div\n            className=\"color-picker-swatch\"\n            onClick={() => {\n              onChange(color);\n            }}\n            title={color}\n            tabIndex={0}\n            style={{ backgroundColor: color }}\n          >\n            {color === \"transparent\" ? (\n              <div className=\"color-picker-transparent\"></div>\n            ) : (\n              undefined\n            )}\n          </div>\n        ))}\n        <div className=\"color-picker-hash\">#</div>\n        <div style={{ position: \"relative\" }}>\n          <input\n            spellCheck={false}\n            className=\"color-picker-input\"\n            onChange={e => {\n              const value = e.target.value;\n              if (value.match(/^([0-9a-f]{3}|[0-9a-f]{6}|transparent)$/)) {\n                onChange(value === \"transparent\" ? \"transparent\" : \"#\" + value);\n              }\n              setInnerValue(value);\n            }}\n            value={(innerValue || \"\").replace(/^#/, \"\")}\n          />\n        </div>\n        <div style={{ clear: \"both\" }}></div>\n      </div>\n    </div>\n  );\n};\n\nexport function ColorPicker({\n  type,\n  color,\n  onChange\n}: {\n  type: \"canvasBackground\" | \"elementBackground\" | \"elementStroke\";\n  color: string | null;\n  onChange: (color: string) => void;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  return (\n    <div>\n      <button\n        className=\"swatch\"\n        style={color ? { backgroundColor: color } : undefined}\n        onClick={() => setActive(!isActive)}\n      />\n      <React.Suspense fallback=\"\">\n        {isActive ? (\n          <Popover onCloseRequest={() => setActive(false)}>\n            <Picker\n              colors={colors[type]}\n              color={color || undefined}\n              onChange={changedColor => {\n                onChange(changedColor);\n              }}\n            />\n          </Popover>\n        ) : null}\n      </React.Suspense>\n      <input\n        type=\"text\"\n        className=\"swatch-input\"\n        value={color || \"\"}\n        onPaste={e => onChange(e.clipboardData.getData(\"text\"))}\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n}\n\nconst colors = {\n  canvasBackground: [\n    \"#DEE6EF\",\n    \"#FCEAD8\",\n    \"#F9E0E0\",\n    \"#E6F1F1\",\n    \"#E0EDDF\",\n    \"#FBF5DD\",\n    \"#F0E6ED\",\n    \"#FFEDEF\",\n    \"#EDE5E1\",\n    \"#F2F0EF\",\n    \"#FFFFFF\"\n  ],\n  elementBackground: [\n    \"#4E79A7\",\n    \"#F28E2C\",\n    \"#E15759\",\n    \"#76B7B2\",\n    \"#59A14F\",\n    \"#EDC949\",\n    \"#AF7AA1\",\n    \"#FF9DA7\",\n    \"#9C755F\",\n    \"#BAB0AB\",\n    \"transparent\"\n  ],\n  elementStroke: [\n    \"#324E6B\",\n    \"#9B5B1D\",\n    \"#903839\",\n    \"#4C7572\",\n    \"#396733\",\n    \"#AD9336\",\n    \"#805976\",\n    \"#BA737A\",\n    \"#725646\",\n    \"#88817D\",\n    \"#000000\"\n  ]\n};\n","import React from \"react\";\nimport { ColorPicker } from \"../ColorPicker\";\n\ninterface PanelColorProps {\n  title: string;\n  colorType: \"canvasBackground\" | \"elementBackground\" | \"elementStroke\";\n  colorValue: string | null;\n  onColorChange: (value: string) => void;\n}\n\nexport const PanelColor: React.FC<PanelColorProps> = ({\n  title,\n  colorType,\n  onColorChange,\n  colorValue\n}) => {\n  return (\n    <>\n      <h5>{title}</h5>\n      <ColorPicker\n        type={colorType}\n        color={colorValue}\n        onChange={color => onColorChange(color)}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"../element/types\";\nimport { getSelectedAttribute } from \"../scene\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport { PanelColor } from \"../components/panels/PanelColor\";\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\n\nconst changeProperty = (\n  elements: readonly ExcalidrawElement[],\n  callback: (element: ExcalidrawElement) => ExcalidrawElement\n) => {\n  return elements.map(element => {\n    if (element.isSelected) {\n      return callback(element);\n    }\n    return element;\n  });\n};\n\nexport const actionChangeStrokeColor: Action = {\n  name: \"changeStrokeColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        strokeColor: value\n      })),\n      appState: { ...appState, currentItemStrokeColor: value }\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <PanelColor\n      title=\"Stroke Color\"\n      colorType=\"elementStroke\"\n      onColorChange={(color: string) => {\n        updateData(color);\n      }}\n      colorValue={getSelectedAttribute(\n        elements,\n        element => element.strokeColor\n      )}\n    />\n  )\n};\n\nexport const actionChangeBackgroundColor: Action = {\n  name: \"changeBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        backgroundColor: value\n      })),\n      appState: { ...appState, currentItemBackgroundColor: value }\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <PanelColor\n      title=\"Background Color\"\n      colorType=\"elementBackground\"\n      onColorChange={(color: string) => {\n        updateData(color);\n      }}\n      colorValue={getSelectedAttribute(\n        elements,\n        element => element.backgroundColor\n      )}\n    />\n  )\n};\n\nexport const actionChangeFillStyle: Action = {\n  name: \"changeFillStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        fillStyle: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Fill</h5>\n      <ButtonSelect\n        options={[\n          { value: \"solid\", text: \"Solid\" },\n          { value: \"hachure\", text: \"Hachure\" },\n          { value: \"cross-hatch\", text: \"Cross-hatch\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.fillStyle)}\n        onChange={value => {\n          updateData(value);\n        }}\n      />\n    </>\n  )\n};\n\nexport const actionChangeStrokeWidth: Action = {\n  name: \"changeStrokeWidth\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        strokeWidth: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h5>Stroke Width</h5>\n      <ButtonSelect\n        options={[\n          { value: 1, text: \"Thin\" },\n          { value: 2, text: \"Bold\" },\n          { value: 4, text: \"Extra Bold\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.strokeWidth)}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeSloppiness: Action = {\n  name: \"changeSloppiness\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        roughness: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h5>Sloppiness</h5>\n      <ButtonSelect\n        options={[\n          { value: 0, text: \"Draftsman\" },\n          { value: 1, text: \"Artist\" },\n          { value: 3, text: \"Cartoonist\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.roughness)}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeOpacity: Action = {\n  name: \"changeOpacity\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        opacity: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Opacity</h5>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        onChange={e => updateData(+e.target.value)}\n        value={\n          getSelectedAttribute(elements, element => element.opacity) ||\n          0 /* Put the opacity at 0 if there are two conflicting ones */\n        }\n      />\n    </>\n  )\n};\n\nexport const actionChangeFontSize: Action = {\n  name: \"changeFontSize\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = {\n            ...el,\n            shape: null,\n            font: `${value}px ${el.font.split(\"px \")[1]}`\n          };\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      })\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Font size</h5>\n      <ButtonSelect\n        options={[\n          { value: 16, text: \"Small\" },\n          { value: 20, text: \"Medium\" },\n          { value: 28, text: \"Large\" },\n          { value: 36, text: \"Very Large\" }\n        ]}\n        value={getSelectedAttribute(\n          elements,\n          element => isTextElement(element) && +element.font.split(\"px \")[0]\n        )}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeFontFamily: Action = {\n  name: \"changeFontFamily\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = {\n            ...el,\n            shape: null,\n            font: `${el.font.split(\"px \")[0]}px ${value}`\n          };\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      })\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Font family</h5>\n      <ButtonSelect\n        options={[\n          { value: \"Virgil\", text: \"Virgil\" },\n          { value: \"Helvetica\", text: \"Helvetica\" },\n          { value: \"Courier\", text: \"Courier\" }\n        ]}\n        value={getSelectedAttribute(\n          elements,\n          element => isTextElement(element) && element.font.split(\"px \")[1]\n        )}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n","import { AppState } from \"./types\";\nimport { getDateTime } from \"./utils\";\n\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nexport function getDefaultAppState(): AppState {\n  return {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"transparent\",\n    currentItemFont: \"20px Virgil\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    cursorX: 0,\n    cursorY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n}\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { getDefaultAppState } from \"../appState\";\n\nexport const actionChangeViewBackgroundColor: Action = {\n  name: \"changeViewBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, viewBackgroundColor: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <>\n      <h5>Canvas Background Color</h5>\n      <ColorPicker\n        type=\"canvasBackground\"\n        color={appState.viewBackgroundColor}\n        onChange={color => updateData(color)}\n      />\n    </>\n  )\n};\n\nexport const actionClearCanvas: Action = {\n  name: \"clearCanvas\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: [],\n      appState: getDefaultAppState()\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      onClick={() => {\n        if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n          updateData(null);\n        }\n      }}\n      title=\"Clear the canvas & reset background color\"\n    >\n      Clear canvas\n    </button>\n  )\n};\n","import React, { Fragment, Component } from \"react\";\n\ntype InputState = {\n  value: string;\n  edit: boolean;\n};\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport class EditableText extends Component<Props, InputState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      edit: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props: Props) {\n    this.setState({ value: props.value });\n  }\n\n  private handleEdit(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  private handleBlur() {\n    const { value } = this.state;\n\n    if (!value) {\n      this.setState({ value: this.props.value, edit: false });\n      return;\n    }\n    this.props.onChange(value);\n    this.setState({ edit: false });\n  }\n\n  public render() {\n    const { value, edit } = this.state;\n\n    return (\n      <Fragment>\n        {edit ? (\n          <input\n            className=\"project-name-input\"\n            name=\"name\"\n            maxLength={25}\n            value={value}\n            onChange={e => this.handleEdit(e)}\n            onBlur={() => this.handleBlur()}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                this.handleBlur();\n              }\n            }}\n            autoFocus\n          />\n        ) : (\n          <span\n            onClick={() => this.setState({ edit: true })}\n            className=\"project-name\"\n          >\n            {value}\n          </span>\n        )}\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { EditableText } from \"../components/EditableText\";\nimport { saveAsJSON, loadFromJSON } from \"../scene\";\n\nexport const actionChangeProjectName: Action = {\n  name: \"changeProjectName\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, name: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <>\n      <h5>Name</h5>\n      {appState.name && (\n        <EditableText\n          value={appState.name}\n          onChange={(name: string) => updateData(name)}\n        />\n      )}\n    </>\n  )\n};\n\nexport const actionChangeExportBackground: Action = {\n  name: \"changeExportBackground\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, exportBackground: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={appState.exportBackground}\n        onChange={e => {\n          updateData(e.target.checked);\n        }}\n      />\n      background\n    </label>\n  )\n};\n\nexport const actionSaveScene: Action = {\n  name: \"saveScene\",\n  perform: (elements, appState, value) => {\n    saveAsJSON(elements, appState.name);\n    return {};\n  },\n  PanelComponent: ({ updateData }) => (\n    <button onClick={() => updateData(null)}>Save as...</button>\n  )\n};\n\nexport const actionLoadScene: Action = {\n  name: \"loadScene\",\n  perform: (elements, appState, loadedElements) => {\n    return { elements: loadedElements };\n  },\n  PanelComponent: ({ updateData }) => (\n    <button\n      onClick={() => {\n        loadFromJSON().then(({ elements }) => {\n          updateData(elements);\n        });\n      }}\n    >\n      Load file...\n    </button>\n  )\n};\n","import { Action } from \"./types\";\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\nimport { META_KEY } from \"../keys\";\n\nlet copiedStyles: string = \"{}\";\n\nexport const actionCopyStyles: Action = {\n  name: \"copyStyles\",\n  perform: elements => {\n    const element = elements.find(el => el.isSelected);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n    return {};\n  },\n  contextItemLabel: \"Copy Styles\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyC\",\n  contextMenuOrder: 0\n};\n\nexport const actionPasteStyles: Action = {\n  name: \"pasteStyles\",\n  perform: elements => {\n    const pastedElement = JSON.parse(copiedStyles);\n    return {\n      elements: elements.map(element => {\n        if (element.isSelected) {\n          const newElement = {\n            ...element,\n            shape: null,\n            backgroundColor: pastedElement?.backgroundColor,\n            strokeWidth: pastedElement?.strokeWidth,\n            strokeColor: pastedElement?.strokeColor,\n            fillStyle: pastedElement?.fillStyle,\n            opacity: pastedElement?.opacity,\n            roughness: pastedElement?.roughness\n          };\n          if (isTextElement(newElement)) {\n            newElement.font = pastedElement?.font;\n            redrawTextBoundingBox(newElement);\n          }\n          return newElement;\n        }\n        return element;\n      })\n    };\n  },\n  contextItemLabel: \"Paste Styles\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyV\",\n  contextMenuOrder: 1\n};\n","import React, { useState } from \"react\";\n\ninterface PanelProps {\n  title: string;\n  defaultCollapsed?: boolean;\n  hide?: boolean;\n}\n\nexport const Panel: React.FC<PanelProps> = ({\n  title,\n  children,\n  defaultCollapsed = false,\n  hide = false\n}) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n\n  if (hide) return null;\n\n  return (\n    <div className=\"panel\">\n      <h4>{title}</h4>\n      <button\n        className=\"btn-panel-collapse\"\n        type=\"button\"\n        onClick={e => {\n          e.preventDefault();\n          setCollapsed(collapsed => !collapsed);\n        }}\n      >\n        {\n          <span\n            className={`btn-panel-collapse-icon ${\n              collapsed ? \"btn-panel-collapse-icon-closed\" : \"\"\n            }`}\n          >\n            ▼\n          </span>\n        }\n      </button>\n      {!collapsed && <div className=\"panelColumn\">{children}</div>}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { SHAPES } from \"../../shapes\";\nimport { capitalizeString } from \"../../utils\";\nimport { Panel } from \"../Panel\";\n\ninterface PanelToolsProps {\n  activeTool: string;\n  onToolChange: (value: string) => void;\n}\n\nexport const PanelTools: React.FC<PanelToolsProps> = ({\n  activeTool,\n  onToolChange\n}) => {\n  return (\n    <Panel title=\"Shapes\">\n      <div className=\"panelTools\">\n        {SHAPES.map(({ value, icon }) => (\n          <label\n            key={value}\n            className=\"tool\"\n            title={`${capitalizeString(value)} - ${capitalizeString(value)[0]}`}\n          >\n            <input\n              type=\"radio\"\n              checked={activeTool === value}\n              onChange={() => {\n                onToolChange(value);\n              }}\n            />\n            <div className=\"toolIcon\">{icon}</div>\n          </label>\n        ))}\n      </div>\n    </Panel>\n  );\n};\n","import React from \"react\";\nimport { ActionManager } from \"../../actions\";\nimport { ExcalidrawElement } from \"../../element/types\";\nimport { AppState } from \"../../types\";\nimport { UpdaterFn } from \"../../actions/types\";\n\ninterface PanelSelectionProps {\n  actionManager: ActionManager;\n  elements: readonly ExcalidrawElement[];\n  appState: AppState;\n  syncActionResult: UpdaterFn;\n}\n\nexport const PanelSelection: React.FC<PanelSelectionProps> = ({\n  actionManager,\n  elements,\n  appState,\n  syncActionResult\n}) => {\n  return (\n    <div>\n      <div className=\"buttonList\">\n        {actionManager.renderAction(\n          \"bringForward\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        {actionManager.renderAction(\n          \"bringToFront\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        {actionManager.renderAction(\n          \"sendBackward\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        {actionManager.renderAction(\n          \"sendToBack\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Panel } from \"../Panel\";\nimport { ActionManager } from \"../../actions\";\nimport { ExcalidrawElement } from \"../../element/types\";\nimport { AppState } from \"../../types\";\nimport { UpdaterFn } from \"../../actions/types\";\n\ninterface PanelCanvasProps {\n  actionManager: ActionManager;\n  elements: readonly ExcalidrawElement[];\n  appState: AppState;\n  syncActionResult: UpdaterFn;\n}\n\nexport const PanelCanvas: React.FC<PanelCanvasProps> = ({\n  actionManager,\n  elements,\n  appState,\n  syncActionResult\n}) => {\n  return (\n    <Panel title=\"Canvas\">\n      {actionManager.renderAction(\n        \"changeViewBackgroundColor\",\n        elements,\n        appState,\n        syncActionResult\n      )}\n\n      {actionManager.renderAction(\n        \"clearCanvas\",\n        elements,\n        appState,\n        syncActionResult\n      )}\n    </Panel>\n  );\n};\n","import React from \"react\";\nimport { Panel } from \"../Panel\";\nimport { ExportType } from \"../../scene/types\";\n\nimport \"./panelExport.scss\";\nimport { ActionManager } from \"../../actions\";\nimport { ExcalidrawElement } from \"../../element/types\";\nimport { AppState } from \"../../types\";\nimport { UpdaterFn } from \"../../actions/types\";\n\ninterface PanelExportProps {\n  actionManager: ActionManager;\n  elements: readonly ExcalidrawElement[];\n  appState: AppState;\n  syncActionResult: UpdaterFn;\n  onExportCanvas: (type: ExportType) => void;\n}\n\n// fa-clipboard\nconst ClipboardIcon = () => (\n  <svg viewBox=\"0 0 384 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\"\n    ></path>\n  </svg>\n);\n\nconst probablySupportsClipboard =\n  \"toBlob\" in HTMLCanvasElement.prototype &&\n  \"clipboard\" in navigator &&\n  \"write\" in navigator.clipboard &&\n  \"ClipboardItem\" in window;\n\nexport const PanelExport: React.FC<PanelExportProps> = ({\n  actionManager,\n  elements,\n  appState,\n  syncActionResult,\n  onExportCanvas\n}) => {\n  return (\n    <Panel title=\"Export\">\n      <div className=\"panelColumn\">\n        {actionManager.renderAction(\n          \"changeProjectName\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        <h5>Image</h5>\n        <div className=\"panelExport-imageButtons\">\n          <button\n            className=\"panelExport-exportToPngButton\"\n            onClick={() => onExportCanvas(\"png\")}\n          >\n            Export to PNG\n          </button>\n          {probablySupportsClipboard && (\n            <button\n              className=\"panelExport-exportToClipboardButton\"\n              onClick={() => onExportCanvas(\"clipboard\")}\n              title=\"Copy to clipboard (experimental)\"\n            >\n              <ClipboardIcon />\n            </button>\n          )}\n        </div>\n        {actionManager.renderAction(\n          \"changeExportBackground\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n\n        <h5>Scene</h5>\n        {actionManager.renderAction(\n          \"saveScene\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        {actionManager.renderAction(\n          \"loadScene\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n      </div>\n    </Panel>\n  );\n};\n","import React from \"react\";\nimport { PanelTools } from \"./panels/PanelTools\";\nimport { Panel } from \"./Panel\";\nimport { PanelSelection } from \"./panels/PanelSelection\";\nimport {\n  hasBackground,\n  someElementIsSelected,\n  hasStroke,\n  hasText,\n  exportCanvas\n} from \"../scene\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { PanelCanvas } from \"./panels/PanelCanvas\";\nimport { PanelExport } from \"./panels/PanelExport\";\nimport { ExportType } from \"../scene/types\";\nimport { AppState } from \"../types\";\nimport { ActionManager } from \"../actions\";\nimport { UpdaterFn } from \"../actions/types\";\n\ninterface SidePanelProps {\n  actionManager: ActionManager;\n  elements: readonly ExcalidrawElement[];\n  syncActionResult: UpdaterFn;\n  appState: AppState;\n  onToolChange: (elementType: string) => void;\n  canvas: HTMLCanvasElement;\n}\n\nexport const SidePanel: React.FC<SidePanelProps> = ({\n  actionManager,\n  syncActionResult,\n  elements,\n  onToolChange,\n  appState,\n  canvas\n}) => {\n  return (\n    <div className=\"sidePanel\">\n      <PanelTools\n        activeTool={appState.elementType}\n        onToolChange={value => {\n          onToolChange(value);\n        }}\n      />\n      <Panel title=\"Selection\" hide={!someElementIsSelected(elements)}>\n        <PanelSelection\n          actionManager={actionManager}\n          syncActionResult={syncActionResult}\n          elements={elements}\n          appState={appState}\n        />\n\n        {actionManager.renderAction(\n          \"changeStrokeColor\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n\n        {hasBackground(elements) && (\n          <>\n            {actionManager.renderAction(\n              \"changeBackgroundColor\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n\n            {actionManager.renderAction(\n              \"changeFillStyle\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n          </>\n        )}\n\n        {hasStroke(elements) && (\n          <>\n            {actionManager.renderAction(\n              \"changeStrokeWidth\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n\n            {actionManager.renderAction(\n              \"changeSloppiness\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n          </>\n        )}\n\n        {hasText(elements) && (\n          <>\n            {actionManager.renderAction(\n              \"changeFontSize\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n\n            {actionManager.renderAction(\n              \"changeFontFamily\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n          </>\n        )}\n\n        {actionManager.renderAction(\n          \"changeOpacity\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n\n        {actionManager.renderAction(\n          \"deleteSelectedElements\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n      </Panel>\n      <PanelCanvas\n        actionManager={actionManager}\n        syncActionResult={syncActionResult}\n        elements={elements}\n        appState={appState}\n      />\n      <PanelExport\n        actionManager={actionManager}\n        syncActionResult={syncActionResult}\n        elements={elements}\n        appState={appState}\n        onExportCanvas={(type: ExportType) => {\n          const exportedElements = elements.some(element => element.isSelected)\n            ? elements.filter(element => element.isSelected)\n            : elements;\n          return exportCanvas(type, exportedElements, canvas, appState);\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport rough from \"roughjs/bin/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport {\n  newElement,\n  duplicateElement,\n  resizeTest,\n  isTextElement,\n  textWysiwyg,\n  getElementAbsoluteCoords\n} from \"./element\";\nimport {\n  clearSelection,\n  deleteSelectedElements,\n  getElementsWithinSelection,\n  isOverScrollBars,\n  restoreFromLocalStorage,\n  saveToLocalStorage,\n  getElementAtPosition,\n  createScene,\n  getElementContainingPosition\n} from \"./scene\";\n\nimport { renderScene } from \"./renderer\";\nimport { AppState } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"./element/types\";\n\nimport { isInputLike, measureText, debounce } from \"./utils\";\nimport { KEYS, META_KEY, isArrowKey } from \"./keys\";\n\nimport { findShapeByKey, shapesShortcutKeys } from \"./shapes\";\nimport { createHistory } from \"./history\";\n\nimport ContextMenu from \"./components/ContextMenu\";\n\nimport \"./styles.scss\";\nimport { getElementWithResizeHandler } from \"./element/resizeTest\";\nimport {\n  ActionManager,\n  actionDeleteSelected,\n  actionSendBackward,\n  actionBringForward,\n  actionSendToBack,\n  actionBringToFront,\n  actionSelectAll,\n  actionChangeStrokeColor,\n  actionChangeBackgroundColor,\n  actionChangeOpacity,\n  actionChangeStrokeWidth,\n  actionChangeFillStyle,\n  actionChangeSloppiness,\n  actionChangeFontSize,\n  actionChangeFontFamily,\n  actionChangeViewBackgroundColor,\n  actionClearCanvas,\n  actionChangeProjectName,\n  actionChangeExportBackground,\n  actionLoadScene,\n  actionSaveScene,\n  actionCopyStyles,\n  actionPasteStyles\n} from \"./actions\";\nimport { SidePanel } from \"./components/SidePanel\";\nimport { Action, ActionResult } from \"./actions/types\";\nimport { getDefaultAppState } from \"./appState\";\n\nlet { elements } = createScene();\nconst { history } = createHistory();\n\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction addTextElement(\n  element: ExcalidrawTextElement,\n  text: string,\n  font: string\n) {\n  resetCursor();\n  if (text === null || text === \"\") {\n    return false;\n  }\n\n  const metrics = measureText(text, font);\n  element.text = text;\n  element.font = font;\n  // Center the text\n  element.x -= metrics.width / 2;\n  element.y -= metrics.height / 2;\n  element.width = metrics.width;\n  element.height = metrics.height;\n  element.baseline = metrics.baseline;\n\n  return true;\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\nconst TEXT_TO_CENTER_SNAP_THRESHOLD = 30;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nexport function viewportCoordsToSceneCoords(\n  { clientX, clientY }: { clientX: number; clientY: number },\n  { scrollX, scrollY }: { scrollX: number; scrollY: number }\n) {\n  const x = clientX - CANVAS_WINDOW_OFFSET_LEFT - scrollX;\n  const y = clientY - CANVAS_WINDOW_OFFSET_TOP - scrollY;\n  return { x, y };\n}\n\nexport class App extends React.Component<{}, AppState> {\n  canvas: HTMLCanvasElement | null = null;\n  rc: RoughCanvas | null = null;\n\n  actionManager: ActionManager = new ActionManager();\n  canvasOnlyActions: Array<Action>;\n  constructor(props: any) {\n    super(props);\n    this.actionManager.registerAction(actionDeleteSelected);\n    this.actionManager.registerAction(actionSendToBack);\n    this.actionManager.registerAction(actionBringToFront);\n    this.actionManager.registerAction(actionSendBackward);\n    this.actionManager.registerAction(actionBringForward);\n    this.actionManager.registerAction(actionSelectAll);\n\n    this.actionManager.registerAction(actionChangeStrokeColor);\n    this.actionManager.registerAction(actionChangeBackgroundColor);\n    this.actionManager.registerAction(actionChangeFillStyle);\n    this.actionManager.registerAction(actionChangeStrokeWidth);\n    this.actionManager.registerAction(actionChangeOpacity);\n    this.actionManager.registerAction(actionChangeSloppiness);\n    this.actionManager.registerAction(actionChangeFontSize);\n    this.actionManager.registerAction(actionChangeFontFamily);\n\n    this.actionManager.registerAction(actionChangeViewBackgroundColor);\n    this.actionManager.registerAction(actionClearCanvas);\n\n    this.actionManager.registerAction(actionChangeProjectName);\n    this.actionManager.registerAction(actionChangeExportBackground);\n    this.actionManager.registerAction(actionSaveScene);\n    this.actionManager.registerAction(actionLoadScene);\n\n    this.actionManager.registerAction(actionCopyStyles);\n    this.actionManager.registerAction(actionPasteStyles);\n\n    this.canvasOnlyActions = [actionSelectAll];\n  }\n\n  private syncActionResult = (res: ActionResult) => {\n    if (res.elements !== undefined) {\n      elements = res.elements;\n      this.forceUpdate();\n    }\n\n    if (res.appState !== undefined) {\n      this.setState({ ...res.appState });\n    }\n  };\n\n  private onCut = (e: ClipboardEvent) => {\n    if (isInputLike(e.target)) return;\n    e.clipboardData?.setData(\n      \"text/plain\",\n      JSON.stringify(\n        elements\n          .filter(element => element.isSelected)\n          .map(({ shape, ...el }) => el)\n      )\n    );\n    elements = deleteSelectedElements(elements);\n    this.forceUpdate();\n    e.preventDefault();\n  };\n  private onCopy = (e: ClipboardEvent) => {\n    if (isInputLike(e.target)) return;\n    e.clipboardData?.setData(\n      \"text/plain\",\n      JSON.stringify(\n        elements\n          .filter(element => element.isSelected)\n          .map(({ shape, ...el }) => el)\n      )\n    );\n    e.preventDefault();\n  };\n  private onPaste = (e: ClipboardEvent) => {\n    if (isInputLike(e.target)) return;\n    const paste = e.clipboardData?.getData(\"text\") || \"\";\n    this.addElementsFromPaste(paste);\n    e.preventDefault();\n  };\n\n  public componentDidMount() {\n    document.addEventListener(\"copy\", this.onCopy);\n    document.addEventListener(\"paste\", this.onPaste);\n    document.addEventListener(\"cut\", this.onCut);\n\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    document.addEventListener(\"mousemove\", this.getCurrentCursorPosition);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const { elements: newElements, appState } = restoreFromLocalStorage();\n\n    if (newElements) {\n      elements = newElements;\n    }\n\n    if (appState) {\n      this.setState(appState);\n    } else {\n      this.forceUpdate();\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"copy\", this.onCopy);\n    document.removeEventListener(\"paste\", this.onPaste);\n    document.removeEventListener(\"cut\", this.onCut);\n\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    document.removeEventListener(\n      \"mousemove\",\n      this.getCurrentCursorPosition,\n      false\n    );\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = getDefaultAppState();\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private getCurrentCursorPosition = (e: MouseEvent) => {\n    this.setState({ cursorX: e.x, cursorY: e.y });\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (event.key === KEYS.ESCAPE) {\n      elements = clearSelection(elements);\n      this.forceUpdate();\n      this.setState({ elementType: \"selection\" });\n      if (window.document.activeElement instanceof HTMLElement) {\n        window.document.activeElement.blur();\n      }\n      event.preventDefault();\n      return;\n    }\n    if (isInputLike(event.target)) return;\n\n    const data = this.actionManager.handleKeyDown(event, elements, this.state);\n    this.syncActionResult(data);\n\n    if (data.elements !== undefined || data.appState !== undefined) {\n      return;\n    }\n\n    if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements = elements.map(el => {\n        if (el.isSelected) {\n          const element = { ...el };\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n          return element;\n        }\n        return el;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (\n      shapesShortcutKeys.includes(event.key.toLowerCase()) &&\n      !event.ctrlKey &&\n      !event.shiftKey &&\n      !event.altKey &&\n      !event.metaKey\n    ) {\n      this.setState({ elementType: findShapeByKey(event.key) });\n    } else if (event[META_KEY] && event.code === \"KeyZ\") {\n      if (event.shiftKey) {\n        // Redo action\n        const data = history.redoOnce();\n        if (data !== null) {\n          elements = data;\n        }\n      } else {\n        // undo action\n        const data = history.undoOnce();\n        if (data !== null) {\n          elements = data;\n        }\n      }\n      this.forceUpdate();\n      event.preventDefault();\n    }\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private copyToClipboard = () => {\n    if (navigator.clipboard) {\n      const text = JSON.stringify(\n        elements\n          .filter(element => element.isSelected)\n          .map(({ shape, ...el }) => el)\n      );\n      navigator.clipboard.writeText(text);\n    }\n  };\n\n  private pasteFromClipboard = () => {\n    if (navigator.clipboard) {\n      navigator.clipboard\n        .readText()\n        .then(text => this.addElementsFromPaste(text));\n    }\n  };\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div className=\"container\">\n        <SidePanel\n          actionManager={this.actionManager}\n          syncActionResult={this.syncActionResult}\n          appState={{ ...this.state }}\n          elements={elements}\n          onToolChange={value => {\n            this.setState({ elementType: value });\n            elements = clearSelection(elements);\n            document.documentElement.style.cursor =\n              value === \"text\" ? \"text\" : \"crosshair\";\n            this.forceUpdate();\n          }}\n          canvas={this.canvas!}\n        />\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.canvas === null) {\n              this.canvas = canvas;\n              this.rc = rough.canvas(this.canvas!);\n            }\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onContextMenu={e => {\n            e.preventDefault();\n\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const element = getElementAtPosition(elements, x, y);\n            if (!element) {\n              ContextMenu.push({\n                options: [\n                  navigator.clipboard && {\n                    label: \"Paste\",\n                    action: () => this.pasteFromClipboard()\n                  },\n                  ...this.actionManager.getContextMenuItems(\n                    elements,\n                    this.state,\n                    this.syncActionResult,\n                    action => this.canvasOnlyActions.includes(action)\n                  )\n                ],\n                top: e.clientY,\n                left: e.clientX\n              });\n              return;\n            }\n\n            if (!element.isSelected) {\n              elements = clearSelection(elements);\n              element.isSelected = true;\n              this.forceUpdate();\n            }\n\n            ContextMenu.push({\n              options: [\n                navigator.clipboard && {\n                  label: \"Copy\",\n                  action: this.copyToClipboard\n                },\n                navigator.clipboard && {\n                  label: \"Paste\",\n                  action: () => this.pasteFromClipboard()\n                },\n                ...this.actionManager.getContextMenuItems(\n                  elements,\n                  this.state,\n                  this.syncActionResult,\n                  action => !this.canvasOnlyActions.includes(action)\n                )\n              ],\n              top: e.clientY,\n              left: e.clientX\n            });\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              elements,\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n\n            type ResizeTestType = ReturnType<typeof resizeTest>;\n            let resizeHandle: ResizeTestType = false;\n            let isResizingElements = false;\n            let draggingOccured = false;\n            let hitElement: ExcalidrawElement | null = null;\n            let elementIsAddedToSelection = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = getElementWithResizeHandler(\n                elements,\n                { x, y },\n                this.state\n              );\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement.element : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeElement.resizeHandle;\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                hitElement = getElementAtPosition(elements, x, y);\n                // clear selection if shift is not clicked\n                if (!hitElement?.isSelected && !e.shiftKey) {\n                  elements = clearSelection(elements);\n                }\n\n                // If we click on something\n                if (hitElement) {\n                  // deselect if item is selected\n                  // if shift is not clicked, this will always return true\n                  // otherwise, it will trigger selection based on current\n                  // state of the box\n                  if (!hitElement.isSelected) {\n                    hitElement.isSelected = true;\n                    elementIsAddedToSelection = true;\n                  }\n\n                  // We duplicate the selected element if alt is pressed on Mouse down\n                  if (e.altKey) {\n                    elements = [\n                      ...elements.map(element => ({\n                        ...element,\n                        isSelected: false\n                      })),\n                      ...elements\n                        .filter(element => element.isSelected)\n                        .map(element => {\n                          const newElement = duplicateElement(element);\n                          newElement.isSelected = true;\n                          return newElement;\n                        })\n                    ];\n                  }\n                }\n              }\n            } else {\n              elements = clearSelection(elements);\n            }\n\n            if (isTextElement(element)) {\n              let textX = e.clientX;\n              let textY = e.clientY;\n              if (!e.altKey) {\n                const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n                  x,\n                  y\n                );\n                if (snappedToCenterPosition) {\n                  element.x = snappedToCenterPosition.elementCenterX;\n                  element.y = snappedToCenterPosition.elementCenterY;\n                  textX = snappedToCenterPosition.wysiwygX;\n                  textY = snappedToCenterPosition.wysiwygY;\n                }\n              }\n\n              textWysiwyg({\n                initText: \"\",\n                x: textX,\n                y: textY,\n                strokeColor: this.state.currentItemStrokeColor,\n                font: this.state.currentItemFont,\n                onSubmit: text => {\n                  addTextElement(element, text, this.state.currentItemFont);\n                  elements = [...elements, { ...element, isSelected: true }];\n                  this.setState({\n                    draggingElement: null,\n                    elementType: \"selection\"\n                  });\n                }\n              });\n              this.setState({ elementType: \"selection\" });\n              return;\n            }\n\n            if (this.state.elementType === \"text\") {\n              elements = [...elements, { ...element, isSelected: true }];\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n            } else {\n              elements = [...elements, element];\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n                  let deltaX = 0;\n                  let deltaY = 0;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        deltaX = lastX - x;\n                        element.width += deltaX;\n                        element.x -= deltaX;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          const deltaY = lastY - y;\n                          element.height += deltaY;\n                          element.y -= deltaY;\n                        }\n                        break;\n                      case \"ne\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          deltaY = lastY - y;\n                          element.height += deltaY;\n                          element.y -= deltaY;\n                        }\n                        break;\n                      case \"sw\":\n                        deltaX = lastX - x;\n                        element.width += deltaX;\n                        element.x -= deltaX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        deltaY = lastY - y;\n                        element.height += deltaY;\n                        element.y -= deltaY;\n                        break;\n                      case \"w\":\n                        deltaX = lastX - x;\n                        element.width += deltaX;\n                        element.x -= deltaX;\n                        break;\n                      case \"s\":\n                        element.height += y - lastY;\n                        break;\n                      case \"e\":\n                        element.width += x - lastX;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                    el.shape = null;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (hitElement?.isSelected) {\n                // Marking that click was used for dragging to check\n                // if elements should be deselected on mouseup\n                draggingOccured = true;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height =\n                e.shiftKey && this.state.elementType !== \"selection\"\n                  ? Math.abs(width) * Math.sign(height)\n                  : height;\n              draggingElement.shape = null;\n\n              if (this.state.elementType === \"selection\") {\n                if (!e.shiftKey) {\n                  elements = clearSelection(elements);\n                }\n                const elementsWithinSelection = getElementsWithinSelection(\n                  elements,\n                  draggingElement\n                );\n                elementsWithinSelection.forEach(element => {\n                  element.isSelected = true;\n                });\n              }\n              // We don't want to save history when moving an element\n              history.skipRecording();\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // If click occured on already selected element\n              // it is needed to remove selection from other elements\n              // or if SHIFT or META key pressed remove selection\n              // from hitted element\n              //\n              // If click occured and elements were dragged or some element\n              // was added to selection (on mousedown phase) we need to keep\n              // selection unchanged\n              if (\n                hitElement &&\n                !draggingOccured &&\n                !elementIsAddedToSelection\n              ) {\n                if (e.shiftKey) {\n                  hitElement.isSelected = false;\n                } else {\n                  elements = clearSelection(elements);\n                  hitElement.isSelected = true;\n                }\n              }\n\n              if (draggingElement === null) {\n                // if no element is clicked, clear the selection and redraw\n                elements = clearSelection(elements);\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                elements = elements.slice(0, -1);\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n\n              history.resumeRecording();\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            history.skipRecording();\n            this.forceUpdate();\n          }}\n          onDoubleClick={e => {\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const elementAtPosition = getElementAtPosition(elements, x, y);\n\n            const element = newElement(\n              \"text\",\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            ) as ExcalidrawTextElement;\n\n            let initText = \"\";\n            let textX = e.clientX;\n            let textY = e.clientY;\n\n            if (elementAtPosition && isTextElement(elementAtPosition)) {\n              elements = elements.filter(\n                element => element.id !== elementAtPosition.id\n              );\n              this.forceUpdate();\n\n              Object.assign(element, elementAtPosition);\n              // x and y will change after calling addTextElement function\n              element.x = elementAtPosition.x + elementAtPosition.width / 2;\n              element.y = elementAtPosition.y + elementAtPosition.height / 2;\n              initText = elementAtPosition.text;\n              textX =\n                this.state.scrollX +\n                elementAtPosition.x +\n                CANVAS_WINDOW_OFFSET_LEFT +\n                elementAtPosition.width / 2;\n              textY =\n                this.state.scrollY +\n                elementAtPosition.y +\n                CANVAS_WINDOW_OFFSET_TOP +\n                elementAtPosition.height / 2;\n            } else if (!e.altKey) {\n              const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n                x,\n                y\n              );\n\n              if (snappedToCenterPosition) {\n                element.x = snappedToCenterPosition.elementCenterX;\n                element.y = snappedToCenterPosition.elementCenterY;\n                textX = snappedToCenterPosition.wysiwygX;\n                textY = snappedToCenterPosition.wysiwygY;\n              }\n            }\n\n            textWysiwyg({\n              initText,\n              x: textX,\n              y: textY,\n              strokeColor: element.strokeColor,\n              font: element.font || this.state.currentItemFont,\n              onSubmit: text => {\n                addTextElement(\n                  element,\n                  text,\n                  element.font || this.state.currentItemFont\n                );\n                elements = [...elements, { ...element, isSelected: true }];\n                this.setState({\n                  draggingElement: null,\n                  elementType: \"selection\"\n                });\n              }\n            });\n          }}\n          onMouseMove={e => {\n            const hasDeselectedButton = Boolean(e.buttons);\n            if (hasDeselectedButton || this.state.elementType !== \"selection\") {\n              return;\n            }\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n            const selectedElements = elements.filter(e => e.isSelected).length;\n            if (selectedElements === 1) {\n              const resizeElement = getElementWithResizeHandler(\n                elements,\n                { x, y },\n                this.state\n              );\n              if (resizeElement && resizeElement.resizeHandle) {\n                document.documentElement.style.cursor = `${resizeElement.resizeHandle}-resize`;\n                return;\n              }\n            }\n            const hitElement = getElementAtPosition(elements, x, y);\n            document.documentElement.style.cursor = hitElement ? \"move\" : \"\";\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  private addElementsFromPaste = (paste: string) => {\n    let parsedElements;\n    try {\n      parsedElements = JSON.parse(paste);\n    } catch (e) {}\n    if (\n      Array.isArray(parsedElements) &&\n      parsedElements.length > 0 &&\n      parsedElements[0].type // need to implement a better check here...\n    ) {\n      elements = clearSelection(elements);\n\n      let subCanvasX1 = Infinity;\n      let subCanvasX2 = 0;\n      let subCanvasY1 = Infinity;\n      let subCanvasY2 = 0;\n\n      const minX = Math.min(...parsedElements.map(element => element.x));\n      const minY = Math.min(...parsedElements.map(element => element.y));\n\n      const distance = (x: number, y: number) => {\n        return Math.abs(x > y ? x - y : y - x);\n      };\n\n      parsedElements.forEach(parsedElement => {\n        const [x1, y1, x2, y2] = getElementAbsoluteCoords(parsedElement);\n        subCanvasX1 = Math.min(subCanvasX1, x1);\n        subCanvasY1 = Math.min(subCanvasY1, y1);\n        subCanvasX2 = Math.max(subCanvasX2, x2);\n        subCanvasY2 = Math.max(subCanvasY2, y2);\n      });\n\n      const elementsCenterX = distance(subCanvasX1, subCanvasX2) / 2;\n      const elementsCenterY = distance(subCanvasY1, subCanvasY2) / 2;\n\n      const dx =\n        this.state.cursorX -\n        this.state.scrollX -\n        CANVAS_WINDOW_OFFSET_LEFT -\n        elementsCenterX;\n      const dy =\n        this.state.cursorY -\n        this.state.scrollY -\n        CANVAS_WINDOW_OFFSET_TOP -\n        elementsCenterY;\n\n      elements = [\n        ...elements,\n        ...parsedElements.map(parsedElement => {\n          const duplicate = duplicateElement(parsedElement);\n          duplicate.x += dx - minX;\n          duplicate.y += dy - minY;\n          return duplicate;\n        })\n      ];\n      this.forceUpdate();\n    }\n  };\n\n  private getTextWysiwygSnappedToCenterPosition(x: number, y: number) {\n    const elementClickedInside = getElementContainingPosition(elements, x, y);\n    if (elementClickedInside) {\n      const elementCenterX =\n        elementClickedInside.x + elementClickedInside.width / 2;\n      const elementCenterY =\n        elementClickedInside.y + elementClickedInside.height / 2;\n      const distanceToCenter = Math.hypot(\n        x - elementCenterX,\n        y - elementCenterY\n      );\n      const isSnappedToCenter =\n        distanceToCenter < TEXT_TO_CENTER_SNAP_THRESHOLD;\n      if (isSnappedToCenter) {\n        const wysiwygX =\n          this.state.scrollX +\n          elementClickedInside.x +\n          CANVAS_WINDOW_OFFSET_LEFT +\n          elementClickedInside.width / 2;\n        const wysiwygY =\n          this.state.scrollY +\n          elementClickedInside.y +\n          CANVAS_WINDOW_OFFSET_TOP +\n          elementClickedInside.height / 2;\n        return { wysiwygX, wysiwygY, elementCenterX, elementCenterY };\n      }\n    }\n  }\n\n  private saveDebounced = debounce(() => {\n    saveToLocalStorage(elements, this.state);\n  }, 300);\n\n  componentDidUpdate() {\n    renderScene(elements, this.rc!, this.canvas!, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    this.saveDebounced();\n    if (history.isRecording()) {\n      history.pushEntry(history.generateCurrentEntry(elements));\n    }\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}