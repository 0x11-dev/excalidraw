{"version":3,"sources":["zindex.ts","roundRect.ts","components/EditableText.tsx","index.tsx"],"names":["swap","elements","indexA","indexB","element","moveOneLeft","indicesToMove","sort","a","b","isSorted","forEach","index","i","moveOneRight","reversedIndicesToMove","length","moveAllLeft","leftMostElements","map","reverse","concat","pos","moveAllRight","rightMostElements","roundRect","context","x","y","width","height","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","EditableText","props","state","value","edit","this","setState","e","target","onChange","className","name","maxLength","handleEdit","onBlur","handleBlur","onKeyDown","key","autoFocus","onClick","Component","Array","of","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","min","getMinutes","secs","getSeconds","getDateTime","skipHistory","stateHistory","generateHistoryCurrentEntry","JSON","stringify","isSelected","restoreHistoryEntry","entry","newElements","parse","splice","newElement","generateDraw","push","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","hitTest","type","px","abs","py","tx","ty","ex","ey","rx","ry","qx","qy","r","q","max","t","getElementAbsoluteX1","getElementAbsoluteX2","getElementAbsoluteY1","getElementAbsoluteY2","getDiamondPoints","topX","topY","rightX","rightY","bottomX","bottomY","leftX","leftY","getArrowPoints","x3","y3","x4","y4","console","warn","Error","resizeTest","sceneState","handlers","handlerRectangles","filter","Object","keys","handler","scrollX","scrollY","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","elementX1","elementX2","elementY1","elementY2","marginX","marginY","nw","se","renderScene","rc","canvas","offsetX","offsetY","renderScrollbars","renderSelection","getContext","fillStyle","viewBackgroundColor","fillRect","clearRect","selectedIndices","getSelectedIndices","draw","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","window","devicePixelRatio","strokeStyle","scrollBar","saveFile","data","link","document","createElement","setAttribute","click","remove","rotate","angle","cos","sin","ColorPicker","generator","rough","isTextElement","isInputLike","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","distance","minSize","xs","ys","PI","shape","rectangle","strokeColor","backgroundColor","translate","polygon","ellipse","shapes","line","font","fillText","text","actualBoundingBoxAscent","clearSelection","resetCursor","documentElement","style","cursor","deleteSelectedElements","restore","savedElements","savedState","KEYS","SHAPES","icon","viewBox","d","shapesShortcutKeys","capitalize","str","charAt","toUpperCase","slice","findElementByKey","reduce","isArrowKey","keyCode","someElementIsSelected","some","lastCanvasWidth","lastCanvasHeight","lastMouseUp","App","draggingElement","resizingElement","elementType","currentColorPicker","exportBackground","currentItemStrokeColor","currentItemBackgroundColor","onResize","forceUpdate","event","preventDefault","step","shiftKey","metaKey","altKey","code","includes","toLowerCase","lastEntry","pop","undefined","clearCanvas","confirm","removeWheelEventListener","handleWheel","deltaX","deltaY","addEventListener","localStorage","getItem","removeEventListener","innerWidth","innerHeight","onCut","clipboardData","setData","onCopy","onPaste","parsedElements","paste","getData","isArray","parsedElement","title","checked","s","CANVAS_BACKGROUND","color","hex","SHAPE_STROKE","SHAPE_BACKGROUND","updateProjectName","exportPadding","alert","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","display","body","appendChild","toDataURL","exportAsPNG","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","input","reader","FileReader","accept","onchange","files","readAsText","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","then","id","ref","passive","scale","onMouseDown","button","activeElement","blur","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","clientX","clientY","resizeHandle","isDraggingElements","isResizingElements","resizeElement","find","hitElement","prompt","textMeasure","measureText","actualBoundingBoxDescent","lastX","lastY","onMouseMove","HTMLElement","el","selectedElements","sign","selection","selectionX1","selectionX2","selectionY1","selectionY2","setSelection","onMouseUp","newEntry","setItem","React","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b256368e.chunk.js","sourcesContent":["function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import React, { Fragment, Component } from \"react\";\n\ntype InputState = {\n  value: string;\n  edit: boolean;\n};\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport default class EditableText extends Component<Props, InputState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      edit: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props: Props) {\n    this.setState({ value: props.value });\n  }\n\n  private handleEdit(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  private handleBlur() {\n    const { value } = this.state;\n\n    if (!value) {\n      this.setState({ value: this.props.value, edit: false });\n      return;\n    }\n    this.props.onChange(value);\n    this.setState({ edit: false });\n  }\n\n  public render() {\n    const { value, edit } = this.state;\n\n    return (\n      <Fragment>\n        {edit ? (\n          <input\n            className=\"project-name-input\"\n            name=\"name\"\n            maxLength={25}\n            value={value}\n            onChange={e => this.handleEdit(e)}\n            onBlur={() => this.handleBlur()}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                this.handleBlur();\n              }\n            }}\n            autoFocus\n          />\n        ) : (\n          <span\n            onClick={() => this.setState({ edit: true })}\n            className=\"project-name\"\n          >\n            {value}\n          </span>\n        )}\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { SketchPicker } from \"react-color\";\n\nimport { moveOneLeft, moveAllLeft, moveOneRight, moveAllRight } from \"./zindex\";\nimport { roundRect } from \"./roundRect\";\nimport EditableText from \"./components/EditableText\";\n\nimport \"./styles.scss\";\n\ntype ExcalidrawElement = ReturnType<typeof newElement>;\ntype ExcalidrawTextElement = ExcalidrawElement & {\n  type: \"text\";\n  font: string;\n  text: string;\n  actualBoundingBoxAscent: number;\n};\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nconst elements = Array.of<ExcalidrawElement>();\n\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nlet skipHistory = false;\nconst stateHistory: string[] = [];\nfunction generateHistoryCurrentEntry() {\n  return JSON.stringify(\n    elements.map(element => ({ ...element, isSelected: false }))\n  );\n}\nfunction pushHistoryEntry(newEntry: string) {\n  if (\n    stateHistory.length > 0 &&\n    stateHistory[stateHistory.length - 1] === newEntry\n  ) {\n    // If the last entry is the same as this one, ignore it\n    return;\n  }\n  stateHistory.push(newEntry);\n}\nfunction restoreHistoryEntry(entry: string) {\n  const newElements = JSON.parse(entry);\n  elements.splice(0, elements.length);\n  newElements.forEach((newElement: ExcalidrawElement) => {\n    generateDraw(newElement);\n    elements.push(newElement);\n  });\n  // When restoring, we shouldn't add an history entry otherwise we'll be stuck with it and can't go back\n  skipHistory = true;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nconst LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nfunction randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nfunction withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n\n// https://stackoverflow.com/a/6853926/232122\nfunction distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nfunction hitTest(element: ExcalidrawElement, x: number, y: number): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = element.width / 2;\n    const b = element.height / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    const [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\nfunction resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  sceneState: SceneState\n): string | false {\n  if (element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, sceneState);\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key];\n\n    return (\n      x + sceneState.scrollX >= handler[0] &&\n      x + sceneState.scrollX <= handler[0] + handler[2] &&\n      y + sceneState.scrollY >= handler[1] &&\n      y + sceneState.scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n}\n\nfunction newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    type: type,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    isSelected: false,\n    strokeColor: strokeColor,\n    backgroundColor: backgroundColor,\n    seed: randomSeed(),\n    draw(\n      rc: RoughCanvas,\n      context: CanvasRenderingContext2D,\n      sceneState: SceneState\n    ) {}\n  };\n  return element;\n}\n\ntype SceneState = {\n  scrollX: number;\n  scrollY: number;\n  // null indicates transparent bg\n  viewBackgroundColor: string | null;\n};\n\nconst SCROLLBAR_WIDTH = 6;\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nconst SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nfunction getScrollBars(\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    minX = Math.min(minX, getElementAbsoluteX1(element));\n    maxX = Math.max(maxX, getElementAbsoluteX2(element));\n    minY = Math.min(minY, getElementAbsoluteY1(element));\n    maxY = Math.max(maxY, getElementAbsoluteY2(element));\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nfunction isOverScrollBars(\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(canvasWidth, canvasHeight, scrollX, scrollY);\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n\nfunction handlerRectangles(element: ExcalidrawElement, sceneState: SceneState) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers: { [handler: string]: number[] } = {};\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY1 - margin + sceneState.scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY2 - margin + sceneState.scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + sceneState.scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + sceneState.scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    };\n  }\n\n  return handlers;\n}\n\nfunction renderScene(\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  const selectedIndices = getSelectedIndices();\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    element.draw(rc, context, sceneState);\n    if (renderSelection && element.isSelected) {\n      const margin = 4;\n\n      const elementX1 = getElementAbsoluteX1(element);\n      const elementX2 = getElementAbsoluteX2(element);\n      const elementY1 = getElementAbsoluteY1(element);\n      const elementY2 = getElementAbsoluteY2(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n\n      if (element.type !== \"text\" && selectedIndices.length === 1) {\n        const handlers = handlerRectangles(element, sceneState);\n        Object.values(handlers).forEach(handler => {\n          context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n        });\n      }\n    }\n  });\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n\nfunction saveAsJSON(name: string) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nfunction loadFromJSON() {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        const data = JSON.parse(reader.result as string);\n        restore(data.elements, null);\n        resolve();\n      }\n    };\n  });\n}\n\nfunction exportAsPNG({\n  exportBackground,\n  exportPadding = 10,\n  viewBackgroundColor,\n  name\n}: {\n  exportBackground: boolean;\n  exportPadding?: number;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n  name: string;\n}) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    subCanvasX1 = Math.min(subCanvasX1, getElementAbsoluteX1(element));\n    subCanvasX2 = Math.max(subCanvasX2, getElementAbsoluteX2(element));\n    subCanvasY1 = Math.min(subCanvasY1, getElementAbsoluteY1(element));\n    subCanvasY2 = Math.max(subCanvasY2, getElementAbsoluteY2(element));\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\nfunction rotate(x1: number, y1: number, x2: number, y2: number, angle: number) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n\nfunction getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nfunction isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n\nfunction isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\nfunction getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n\nfunction getDiamondPoints(element: ExcalidrawElement) {\n  const topX = Math.PI + element.width / 2;\n  const topY = element.height - element.height;\n  const rightX = element.width;\n  const rightY = Math.PI + element.height / 2;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nfunction generateDraw(element: ExcalidrawElement) {\n  if (element.type === \"selection\") {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(\n        element.x + scrollX,\n        element.y + scrollY,\n        element.width,\n        element.height\n      );\n      context.fillStyle = fillStyle;\n    };\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor\n      });\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"diamond\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      const [\n        topX,\n        topY,\n        rightX,\n        rightY,\n        bottomX,\n        bottomY,\n        leftX,\n        leftY\n      ] = getDiamondPoints(element);\n      return generator.polygon(\n        [\n          [topX, topY],\n          [rightX, rightY],\n          [bottomX, bottomY],\n          [leftX, leftY]\n        ],\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor\n        }\n      );\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        { stroke: element.strokeColor, fill: element.backgroundColor }\n      )\n    );\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, { stroke: element.strokeColor }),\n      // -----\n      generator.line(x1, y1, x2, y2, { stroke: element.strokeColor }),\n      //    /\n      generator.line(x4, y4, x2, y2, { stroke: element.strokeColor })\n    ]);\n\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      shapes.forEach(shape => rc.draw(shape));\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n    return;\n  } else if (isTextElement(element)) {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const font = context.font;\n      context.font = element.font;\n      const fillStyle = context.fillStyle;\n      context.fillStyle = element.strokeColor;\n      context.fillText(\n        element.text,\n        element.x + scrollX,\n        element.y + element.actualBoundingBoxAscent + scrollY\n      );\n      context.fillStyle = fillStyle;\n      context.font = font;\n    };\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nfunction getElementAbsoluteX1(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x : element.x + element.width;\n}\nfunction getElementAbsoluteX2(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x + element.width : element.x;\n}\nfunction getElementAbsoluteY1(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y : element.y + element.height;\n}\nfunction getElementAbsoluteY2(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y + element.height : element.y;\n}\n\nfunction setSelection(selection: ExcalidrawElement) {\n  const selectionX1 = getElementAbsoluteX1(selection);\n  const selectionX2 = getElementAbsoluteX2(selection);\n  const selectionY1 = getElementAbsoluteY1(selection);\n  const selectionY2 = getElementAbsoluteY2(selection);\n  elements.forEach(element => {\n    const elementX1 = getElementAbsoluteX1(element);\n    const elementX2 = getElementAbsoluteX2(element);\n    const elementY1 = getElementAbsoluteY1(element);\n    const elementY2 = getElementAbsoluteY2(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nfunction clearSelection() {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction deleteSelectedElements() {\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nfunction save(state: AppState) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n\nfunction restoreFromLocalStorage() {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  return restore(savedElements, savedState);\n}\n\nfunction restore(\n  savedElements: string | ExcalidrawElement[] | null,\n  savedState: string | null\n) {\n  try {\n    if (savedElements) {\n      elements.splice(\n        0,\n        elements.length,\n        ...(typeof savedElements === \"string\"\n          ? JSON.parse(savedElements)\n          : savedElements)\n      );\n      elements.forEach((element: ExcalidrawElement) => generateDraw(element));\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements.splice(0, elements.length);\n    return null;\n  }\n}\n\nenum ColorPicker {\n  CANVAS_BACKGROUND,\n  SHAPE_STROKE,\n  SHAPE_BACKGROUND\n}\n\ntype AppState = {\n  draggingElement: ExcalidrawElement | null;\n  resizingElement: ExcalidrawElement | null;\n  currentColorPicker: ColorPicker | null;\n  elementType: string;\n  exportBackground: boolean;\n  currentItemStrokeColor: string;\n  currentItemBackgroundColor: string;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n  name: string;\n};\n\nconst KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nconst SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\"></path>\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nconst shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nfunction capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction findElementByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nfunction getSelectedIndices() {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nconst someElementIsSelected = () =>\n  elements.some(element => element.isSelected);\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const savedState = restoreFromLocalStorage();\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    currentColorPicker: null,\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (isInputLike(event.target)) return;\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      deleteSelectedElements();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n\n      // Send backward: Cmd-Shift-Alt-B\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyB\"\n    ) {\n      this.moveOneLeft();\n      event.preventDefault();\n\n      // Send to back: Cmd-Shift-B\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyB\") {\n      this.moveAllLeft();\n      event.preventDefault();\n\n      // Bring forward: Cmd-Shift-Alt-F\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyF\"\n    ) {\n      this.moveOneRight();\n      event.preventDefault();\n\n      // Bring to front: Cmd-Shift-F\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyF\") {\n      this.moveAllRight();\n      event.preventDefault();\n\n      // Select all: Cmd-A\n    } else if (event.metaKey && event.code === \"KeyA\") {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findElementByKey(event.key) });\n    } else if (event.metaKey && event.code === \"KeyZ\") {\n      let lastEntry = stateHistory.pop();\n      // If nothing was changed since last, take the previous one\n      if (generateHistoryCurrentEntry() === lastEntry) {\n        lastEntry = stateHistory.pop();\n      }\n      if (lastEntry !== undefined) {\n        restoreHistoryEntry(lastEntry);\n      }\n      this.forceUpdate();\n      event.preventDefault();\n    }\n  };\n\n  private deleteSelectedElements = () => {\n    deleteSelectedElements();\n    this.forceUpdate();\n  };\n\n  private clearCanvas = () => {\n    if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n      elements.splice(0, elements.length);\n      this.setState({\n        viewBackgroundColor: \"#ffffff\",\n        scrollX: 0,\n        scrollY: 0\n      });\n      this.forceUpdate();\n    }\n  };\n\n  private moveAllLeft = () => {\n    moveAllLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneLeft = () => {\n    moveOneLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveAllRight = () => {\n    moveAllRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneRight = () => {\n    moveOneRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private updateProjectName(name: string): void {\n    this.setState({ name });\n  }\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements();\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          let parsedElements;\n          try {\n            parsedElements = JSON.parse(paste);\n          } catch (e) {}\n          if (\n            Array.isArray(parsedElements) &&\n            parsedElements.length > 0 &&\n            parsedElements[0].type // need to implement a better check here...\n          ) {\n            clearSelection();\n            parsedElements.forEach(parsedElement => {\n              parsedElement.x += 10;\n              parsedElement.y += 10;\n              parsedElement.seed = randomSeed();\n              generateDraw(parsedElement);\n              elements.push(parsedElement);\n            });\n            this.forceUpdate();\n          }\n          e.preventDefault();\n        }}\n      >\n        <div className=\"sidePanel\">\n          <h4>Shapes</h4>\n          <div className=\"panelTools\">\n            {SHAPES.map(({ value, icon }) => (\n              <label\n                key={value}\n                className=\"tool\"\n                title={`${capitalize(value)} - ${capitalize(value)[0]}`}\n              >\n                <input\n                  type=\"radio\"\n                  checked={this.state.elementType === value}\n                  onChange={() => {\n                    this.setState({ elementType: value });\n                    clearSelection();\n                    document.documentElement.style.cursor =\n                      value === \"text\" ? \"text\" : \"crosshair\";\n                    this.forceUpdate();\n                  }}\n                />\n                <div className=\"toolIcon\">{icon}</div>\n              </label>\n            ))}\n          </div>\n          {someElementIsSelected() && (\n            <>\n              <h4>Selected Shapes</h4>\n              <div className=\"panelColumn\">\n                <button onClick={this.deleteSelectedElements}>Delete</button>\n                <button onClick={this.moveOneRight}>Bring forward</button>\n                <button onClick={this.moveAllRight}>Bring to front</button>\n                <button onClick={this.moveOneLeft}>Send backward</button>\n                <button onClick={this.moveAllLeft}>Send to back</button>\n              </div>\n            </>\n          )}\n          <h4>Canvas</h4>\n          <div className=\"panelColumn\">\n            <h5>Canvas Background Color</h5>\n            <div>\n              <button\n                className=\"swatch\"\n                style={{\n                  backgroundColor: this.state.viewBackgroundColor\n                }}\n                onClick={() =>\n                  this.setState(s => ({\n                    currentColorPicker:\n                      s.currentColorPicker === ColorPicker.CANVAS_BACKGROUND\n                        ? null\n                        : ColorPicker.CANVAS_BACKGROUND\n                  }))\n                }\n              />\n              {this.state.currentColorPicker ===\n              ColorPicker.CANVAS_BACKGROUND ? (\n                <div className=\"popover\">\n                  <div\n                    className=\"cover\"\n                    onClick={() => this.setState({ currentColorPicker: null })}\n                  />\n                  <SketchPicker\n                    color={this.state.viewBackgroundColor}\n                    onChange={color => {\n                      this.setState({ viewBackgroundColor: color.hex });\n                    }}\n                  />\n                </div>\n              ) : null}\n              <input\n                type=\"text\"\n                className=\"swatch-input\"\n                value={this.state.viewBackgroundColor}\n                onChange={e =>\n                  this.setState({ viewBackgroundColor: e.target.value })\n                }\n              />\n            </div>\n            <h5>Shape Stroke Color</h5>\n            <div>\n              <button\n                className=\"swatch\"\n                style={{\n                  backgroundColor: this.state.currentItemStrokeColor\n                }}\n                onClick={() =>\n                  this.setState(s => ({\n                    currentColorPicker:\n                      s.currentColorPicker === ColorPicker.SHAPE_STROKE\n                        ? null\n                        : ColorPicker.SHAPE_STROKE\n                  }))\n                }\n              />\n              {this.state.currentColorPicker === ColorPicker.SHAPE_STROKE ? (\n                <div className=\"popover\">\n                  <div\n                    className=\"cover\"\n                    onClick={() => this.setState({ currentColorPicker: null })}\n                  />\n                  <SketchPicker\n                    color={this.state.currentItemStrokeColor}\n                    onChange={color => {\n                      this.setState({ currentItemStrokeColor: color.hex });\n                    }}\n                  />\n                </div>\n              ) : null}\n              <input\n                type=\"text\"\n                className=\"swatch-input\"\n                value={this.state.currentItemStrokeColor}\n                onChange={e => {\n                  this.setState({ currentItemStrokeColor: e.target.value });\n                }}\n              />\n            </div>\n            <h5>Shape Background Color</h5>\n            <div>\n              <button\n                className=\"swatch\"\n                style={{\n                  backgroundColor: this.state.currentItemBackgroundColor\n                }}\n                onClick={() =>\n                  this.setState(s => ({\n                    currentColorPicker:\n                      s.currentColorPicker === ColorPicker.SHAPE_BACKGROUND\n                        ? null\n                        : ColorPicker.SHAPE_BACKGROUND\n                  }))\n                }\n              />\n              {this.state.currentColorPicker ===\n              ColorPicker.SHAPE_BACKGROUND ? (\n                <div className=\"popover\">\n                  <div\n                    className=\"cover\"\n                    onClick={() => this.setState({ currentColorPicker: null })}\n                  />\n                  <SketchPicker\n                    color={this.state.currentItemBackgroundColor}\n                    onChange={color => {\n                      this.setState({ currentItemBackgroundColor: color.hex });\n                    }}\n                  />\n                </div>\n              ) : null}\n              <input\n                type=\"text\"\n                className=\"swatch-input\"\n                value={this.state.currentItemStrokeColor}\n                onChange={e => {\n                  this.setState({ currentItemStrokeColor: e.target.value });\n                }}\n              />\n            </div>\n            <button\n              onClick={this.clearCanvas}\n              title=\"Clear the canvas & reset background color\"\n            >\n              Clear canvas\n            </button>\n          </div>\n          <h4>Export</h4>\n          <div className=\"panelColumn\">\n            <h5>Name</h5>\n            {this.state.name && (\n              <EditableText\n                value={this.state.name}\n                onChange={(name: string) => this.updateProjectName(name)}\n              />\n            )}\n            <h5>Image</h5>\n            <button\n              onClick={() => {\n                exportAsPNG(this.state);\n              }}\n            >\n              Export to png\n            </button>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.exportBackground}\n                onChange={e => {\n                  this.setState({ exportBackground: e.target.checked });\n                }}\n              />\n              background\n            </label>\n            <h5>Scene</h5>\n            <button\n              onClick={() => {\n                saveAsJSON(this.state.name);\n              }}\n            >\n              Save as...\n            </button>\n            <button\n              onClick={() => {\n                loadFromJSON().then(() => this.forceUpdate());\n              }}\n            >\n              Load file...\n            </button>\n          </div>\n        </div>\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor\n            );\n            let resizeHandle: string | false = false;\n            let isDraggingElements = false;\n            let isResizingElements = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = elements.find(element => {\n                return resizeTest(element, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              });\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeTest(resizeElement, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                let hitElement = null;\n                // We need to to hit testing from front (end of the array) to back (beginning of the array)\n                for (let i = elements.length - 1; i >= 0; --i) {\n                  if (hitTest(elements[i], x, y)) {\n                    hitElement = elements[i];\n                    break;\n                  }\n                }\n\n                // If we click on something\n                if (hitElement) {\n                  if (hitElement.isSelected) {\n                    // If that element is not already selected, do nothing,\n                    // we're likely going to drag it\n                  } else {\n                    // We unselect every other elements unless shift is pressed\n                    if (!e.shiftKey) {\n                      clearSelection();\n                    }\n                    // No matter what, we select it\n                    hitElement.isSelected = true;\n                  }\n                } else {\n                  // If we don't click on anything, let's remove all the selected elements\n                  clearSelection();\n                }\n\n                isDraggingElements = someElementIsSelected();\n\n                if (isDraggingElements) {\n                  document.documentElement.style.cursor = \"move\";\n                }\n              }\n            }\n\n            if (isTextElement(element)) {\n              resetCursor();\n              const text = prompt(\"What text do you want?\");\n              if (text === null) {\n                return;\n              }\n              const fontSize = 20;\n              element.text = text;\n              element.font = `${fontSize}px Virgil`;\n              const font = context.font;\n              context.font = element.font;\n              const textMeasure = context.measureText(element.text);\n              const width = textMeasure.width;\n              const actualBoundingBoxAscent =\n                textMeasure.actualBoundingBoxAscent || fontSize;\n              const actualBoundingBoxDescent =\n                textMeasure.actualBoundingBoxDescent || 0;\n              element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n              context.font = font;\n              const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n              // Center the text\n              element.x -= width / 2;\n              element.y -= actualBoundingBoxAscent;\n              element.width = width;\n              element.height = height;\n            }\n\n            generateDraw(element);\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.height += element.y - lastY;\n                        element.x = lastX;\n                        element.y = lastY;\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        element.height = lastY - element.y;\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                    generateDraw(el);\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  skipHistory = true;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  skipHistory = true;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey\n                ? Math.abs(width) * Math.sign(height)\n                : height;\n\n              generateDraw(draggingElement);\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(draggingElement);\n              }\n              // We don't want to save history when moving an element\n              skipHistory = true;\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection();\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            skipHistory = true;\n            this.forceUpdate();\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  componentDidUpdate() {\n    renderScene(rc, canvas, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    save(this.state);\n    if (!skipHistory) {\n      pushHistoryEntry(generateHistoryCurrentEntry());\n    }\n    skipHistory = false;\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}