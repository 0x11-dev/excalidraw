{"version":3,"sources":["zindex.ts","random.ts","element/newElement.ts","math.ts","element/bounds.ts","element/handlerRectangles.ts","element/collision.ts","element/resizeTest.ts","element/typeChecks.ts","keys.ts","element/textWysiwyg.tsx","utils.ts","element/textElement.ts","scene/scrollbars.ts","scene/selection.ts","renderer/roundRect.ts","renderer/renderElement.ts","renderer/renderScene.ts","scene/data.ts","scene/comparisons.ts","scene/createScene.ts","shapes.tsx","history.ts","components/Popover.tsx","components/ContextMenu.tsx","components/Panel.tsx","components/panels/PanelTools.tsx","components/panels/PanelSelection.tsx","components/ColorPicker.tsx","components/panels/PanelColor.tsx","components/ButtonSelect.tsx","components/panels/PanelCanvas.tsx","components/EditableText.tsx","components/panels/PanelExport.tsx","components/SidePanel.tsx","index.tsx"],"names":["swap","elements","indexA","indexB","element","moveOneLeft","indicesToMove","sort","a","b","isSorted","forEach","index","i","moveOneRight","reversedIndicesToMove","length","moveAllLeft","leftMostElements","map","reverse","concat","pos","moveAllRight","rightMostElements","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","newElement","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","width","height","id","nanoid","isSelected","duplicateElement","copy","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","rotate","angle","cos","sin","getElementAbsoluteCoords","getDiamondPoints","topX","rightX","rightY","getArrowPoints","distance","minSize","min","xs","ys","PI","x3","y3","handlerRectangles","scrollX","scrollY","elementX1","elementX2","elementY1","elementY2","handlers","marginX","marginY","abs","nw","se","hitTest","px","py","tx","ty","ex","ey","rx","ry","qx","qy","r","q","max","t","topY","bottomX","bottomY","leftX","leftY","x4","y4","console","warn","Error","resizeTest","filter","Object","keys","key","handler","getElementWithResizeHandler","reduce","resizeHandle","isTextElement","KEYS","META_KEY","test","window","navigator","platform","isArrowKey","keyCode","textWysiwyg","initText","font","onSubmit","editable","document","createElement","stopEvent","ev","stopPropagation","handleSubmit","innerText","cleanup","onblur","onkeydown","removeEventListener","body","removeChild","contentEditable","tabIndex","dataset","assign","style","color","position","top","left","transform","textAlign","display","padding","outline","whiteSpace","preventDefault","addEventListener","appendChild","focus","selection","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","capitalizeString","str","charAt","toUpperCase","slice","isInputLike","target","HTMLElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","measureText","text","line","innerHTML","offsetWidth","offsetHeight","span","overflow","baseline","offsetTop","redrawTextBoundingBox","metrics","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","clearSelection","newElements","deleteSelectedElements","el","getSelectedIndices","selectedIndices","push","someElementIsSelected","some","getSelectedAttribute","getAttribute","attributes","Array","from","Set","roundRect","context","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","generator","rough","renderElement","rc","fillRect","shape","rectangle","globalAlpha","translate","draw","polygon","ellipse","options","shapes","fillText","actualBoundingBoxAscent","renderScene","canvas","sceneState","offsetX","offsetY","renderScrollbars","renderSelection","getContext","viewBackgroundColor","clearRect","selectedElements","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","devicePixelRatio","strokeStyle","scrollBar","saveFile","name","data","link","setAttribute","click","remove","restore","savedElements","savedState","undefined","appState","getElementAtPosition","hitElement","SHAPES","icon","viewBox","d","value","shapesShortcutKeys","findShapeByKey","SceneHistory","recording","stateHistory","redoStack","JSON","stringify","newEntry","this","entry","skipRecording","parse","splice","currentEntry","generateCurrentEntry","entryToRestore","pop","restoreEntry","Popover","children","onCloseRequest","className","onClick","onContextMenu","e","contextMenuNode","ContextMenu","option","idx","ContextMenuOption","label","action","getContextMenuNode","div","handleClose","unmountComponentAtNode","params","of","render","Panel","title","defaultCollapsed","hide","useState","collapsed","setCollapsed","PanelTools","activeTool","onToolChange","checked","onChange","PanelSelection","onBringForward","onBringToFront","onSendBackward","onSendToBack","TwitterPicker","lazy","ColorPicker","React","isActive","setActive","Suspense","fallback","colors","changedColor","hex","onPaste","clipboardData","getData","PanelColor","onColorChange","colorValue","ButtonSelect","PanelCanvas","onViewBackgroundColorChange","onClearCanvas","EditableText","props","state","edit","setState","maxLength","handleEdit","onBlur","handleBlur","onKeyDown","autoFocus","Component","ClipboardIcon","probablySupportsClipboard","HTMLCanvasElement","prototype","clipboard","PanelExport","projectName","exportBackground","onProjectNameChange","onExportBackgroundChange","onSaveScene","onLoadScene","onExportCanvas","SidePanel","changeProperty","onUpdateAppState","onUpdateElements","elementType","hasBackground","hasStroke","hasText","split","event","exportPadding","alert","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","toDataURL","toBlob","blob","async","write","ClipboardItem","err","exportCanvas","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","input","reader","FileReader","accept","onchange","files","readAsText","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","then","history","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","getMinutes","secs","getSeconds","getDateTime","copiedStyles","resetCursor","documentElement","cursor","addTextElement","lastCanvasWidth","lastCanvasHeight","lastMouseUp","viewportCoordsToSceneCoords","clientX","clientY","App","draggingElement","resizingElement","currentItemStrokeColor","currentItemBackgroundColor","currentItemFont","cursorX","cursorY","onResize","forceUpdate","getCurrentCursorPosition","activeElement","blur","step","shiftKey","altKey","code","includes","toLowerCase","redoOnce","undoOnce","metaKey","copyStyles","pasteStyles","clearCanvas","confirm","find","pastedElement","removeWheelEventListener","callback","copyToClipboard","writeText","pasteFromClipboard","readText","addElementsFromPaste","handleWheel","deltaX","deltaY","paste","parsedElements","isArray","parsedElement","elementsCenterX","elementsCenterY","duplicate","localStorage","getItem","restoreFromLocalStorage","innerWidth","innerHeight","onCut","setData","onCopy","ref","passive","scale","onMouseDown","button","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","isDraggingElements","isResizingElements","resizeElement","duplicates","textX","textY","snappedToCenterPosition","getTextWysiwygSnappedToCenterPosition","elementCenterX","elementCenterY","wysiwygX","wysiwygY","lastX","lastY","onMouseMove","sign","selectionX1","selectionY1","selectionX2","selectionY2","setSelection","onMouseUp","onDoubleClick","elementAtPosition","Boolean","buttons","elementClickedInside","getElementContainingPosition","setItem","isRecording","pushEntry","clearRedoStack","resumeRecording","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.45645dda.chunk.js","sourcesContent":["function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n\n  return elements;\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n  return elements;\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n\n  return elements;\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n\n  return elements;\n}\n","// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nexport const LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nexport function randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nexport function withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n","import { randomSeed } from \"../random\";\nimport nanoid from \"nanoid\";\n\nexport function newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    id: nanoid(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    isSelected: false,\n    seed: randomSeed()\n  };\n  return element;\n}\n\nexport function duplicateElement(element: ReturnType<typeof newElement>) {\n  const copy = { ...element };\n  copy.id = nanoid();\n  copy.seed = randomSeed();\n  return copy;\n}\n","// https://stackoverflow.com/a/6853926/232122\nexport function distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nexport function rotate(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number\n) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { rotate } from \"../math\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nexport function getElementAbsoluteCoords(element: ExcalidrawElement) {\n  return [\n    element.width >= 0 ? element.x : element.x + element.width, // x1\n    element.height >= 0 ? element.y : element.y + element.height, // y1\n    element.width >= 0 ? element.x + element.width : element.x, // x2\n    element.height >= 0 ? element.y + element.height : element.y // y2\n  ];\n}\n\nexport function getDiamondPoints(element: ExcalidrawElement) {\n  // Here we add +1 to avoid these numbers to be 0\n  // otherwise rough.js will throw an error complaining about it\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nexport function getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { SceneScroll } from \"../scene/types\";\n\ntype Sides = \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\";\n\nexport function handlerRectangles(\n  element: ExcalidrawElement,\n  { scrollX, scrollY }: SceneScroll\n) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers = {} as { [T in Sides]: number[] };\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + scrollX - 4,\n      elementY1 - margin + scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + scrollX - 4,\n      elementY2 - margin + scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + scrollX + marginX,\n    elementY1 - margin + scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + scrollX - marginX,\n    elementY1 - margin + scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + scrollX + marginX,\n    elementY2 - margin + scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + scrollX - marginX,\n    elementY2 - margin + scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    } as typeof handlers;\n  }\n\n  return handlers;\n}\n","import { distanceBetweenPointAndSegment } from \"../math\";\n\nimport { ExcalidrawElement } from \"./types\";\nimport {\n  getArrowPoints,\n  getDiamondPoints,\n  getElementAbsoluteCoords\n} from \"./bounds\";\n\nexport function hitTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number\n): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = Math.abs(element.width) / 2;\n    const b = Math.abs(element.height) / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    const [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { ExcalidrawElement } from \"./types\";\n\nimport { handlerRectangles } from \"./handlerRectangles\";\nimport { SceneScroll } from \"../scene/types\";\n\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\n\nexport function resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  { scrollX, scrollY }: SceneScroll\n): HandlerRectanglesRet | false {\n  if (!element.isSelected || element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, { scrollX, scrollY });\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key as HandlerRectanglesRet]!;\n\n    return (\n      x + scrollX >= handler[0] &&\n      x + scrollX <= handler[0] + handler[2] &&\n      y + scrollY >= handler[1] &&\n      y + scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as HandlerRectanglesRet;\n  }\n\n  return false;\n}\n\nexport function getElementWithResizeHandler(\n  elements: readonly ExcalidrawElement[],\n  { x, y }: { x: number; y: number },\n  { scrollX, scrollY }: SceneScroll\n) {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const resizeHandle = resizeTest(element, x, y, {\n      scrollX,\n      scrollY\n    });\n    return resizeHandle ? { element, resizeHandle } : null;\n  }, null as { element: ExcalidrawElement; resizeHandle: ReturnType<typeof resizeTest> } | null);\n}\n","import { ExcalidrawElement, ExcalidrawTextElement } from \"./types\";\n\nexport function isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n","export const KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ENTER: \"Enter\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nexport const META_KEY = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform)\n  ? \"metaKey\"\n  : \"ctrlKey\";\n\nexport function isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n","import { KEYS } from \"../keys\";\n\ntype TextWysiwygParams = {\n  initText: string;\n  x: number;\n  y: number;\n  strokeColor: string;\n  font: string;\n  onSubmit: (text: string) => void;\n};\n\nexport function textWysiwyg({\n  initText,\n  x,\n  y,\n  strokeColor,\n  font,\n  onSubmit\n}: TextWysiwygParams) {\n  // Using contenteditable here as it has dynamic width.\n  // But this solution has an issue — it allows to paste\n  // multiline text, which is not currently supported\n  const editable = document.createElement(\"div\");\n  editable.contentEditable = \"plaintext-only\";\n  editable.tabIndex = 0;\n  editable.innerText = initText;\n  editable.dataset.type = \"wysiwyg\";\n\n  Object.assign(editable.style, {\n    color: strokeColor,\n    position: \"absolute\",\n    top: y + \"px\",\n    left: x + \"px\",\n    transform: \"translate(-50%, -50%)\",\n    textAlign: \"center\",\n    display: \"inline-block\",\n    font: font,\n    padding: \"4px\",\n    outline: \"transparent\",\n    whiteSpace: \"nowrap\"\n  });\n\n  editable.onkeydown = ev => {\n    if (ev.key === KEYS.ESCAPE) {\n      ev.preventDefault();\n      if (initText) {\n        editable.innerText = initText;\n        handleSubmit();\n        return;\n      }\n      cleanup();\n      return;\n    }\n    if (ev.key === KEYS.ENTER) {\n      ev.preventDefault();\n      handleSubmit();\n    }\n  };\n  editable.onblur = handleSubmit;\n\n  function stopEvent(ev: Event) {\n    ev.stopPropagation();\n  }\n\n  function handleSubmit() {\n    if (editable.innerText) {\n      onSubmit(editable.innerText);\n    }\n    cleanup();\n  }\n\n  function cleanup() {\n    editable.onblur = null;\n    editable.onkeydown = null;\n    window.removeEventListener(\"wheel\", stopEvent, true);\n    document.body.removeChild(editable);\n  }\n\n  window.addEventListener(\"wheel\", stopEvent, true);\n  document.body.appendChild(editable);\n  editable.focus();\n  const selection = window.getSelection();\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(editable);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export function getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\nexport function capitalizeString(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\n// https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\nexport function measureText(text: string, font: string) {\n  const line = document.createElement(\"div\");\n  const body = document.body;\n  line.style.position = \"absolute\";\n  line.style.whiteSpace = \"nowrap\";\n  line.style.font = font;\n  body.appendChild(line);\n  // Now we can measure width and height of the letter\n  line.innerHTML = text;\n  const width = line.offsetWidth;\n  const height = line.offsetHeight;\n  // Now creating 1px sized item that will be aligned to baseline\n  // to calculate baseline shift\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  span.style.overflow = \"hidden\";\n  span.style.width = \"1px\";\n  span.style.height = \"1px\";\n  line.appendChild(span);\n  // Baseline is important for positioning text on canvas\n  const baseline = span.offsetTop + span.offsetHeight;\n  document.body.removeChild(line);\n\n  return { width, height, baseline };\n}\n","import { measureText } from \"../utils\";\nimport { ExcalidrawTextElement } from \"./types\";\n\nexport const redrawTextBoundingBox = (element: ExcalidrawTextElement) => {\n  const metrics = measureText(element.text, element.font);\n  element.width = metrics.width;\n  element.height = metrics.height;\n  element.baseline = metrics.baseline;\n};\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport function getScrollBars(\n  elements: readonly ExcalidrawElement[],\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nexport function isOverScrollBars(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(\n    elements,\n    canvasWidth,\n    canvasHeight,\n    scrollX,\n    scrollY\n  );\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport function setSelection(\n  elements: readonly ExcalidrawElement[],\n  selection: ExcalidrawElement\n) {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2\n  ] = getElementAbsoluteCoords(selection);\n  elements.forEach(element => {\n    const [\n      elementX1,\n      elementY1,\n      elementX2,\n      elementY2\n    ] = getElementAbsoluteCoords(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n\n  return elements;\n}\n\nexport function clearSelection(elements: readonly ExcalidrawElement[]) {\n  const newElements = [...elements];\n\n  newElements.forEach(element => {\n    element.isSelected = false;\n  });\n\n  return newElements;\n}\n\nexport function deleteSelectedElements(elements: readonly ExcalidrawElement[]) {\n  return elements.filter(el => !el.isSelected);\n}\n\nexport function getSelectedIndices(elements: readonly ExcalidrawElement[]) {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nexport const someElementIsSelected = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected);\n\nexport function getSelectedAttribute<T>(\n  elements: readonly ExcalidrawElement[],\n  getAttribute: (element: ExcalidrawElement) => T\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => getAttribute(element))\n    )\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import rough from \"roughjs/bin/wrappers/rough\";\n\nimport { withCustomMathRandom } from \"../random\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { isTextElement } from \"../element/typeChecks\";\nimport { getDiamondPoints, getArrowPoints } from \"../element/bounds\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { SceneState } from \"../scene/types\";\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nexport function renderElement(\n  element: ExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  { scrollX, scrollY }: SceneState\n) {\n  if (element.type === \"selection\") {\n    const fillStyle = context.fillStyle;\n    context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n    context.fillRect(\n      element.x + scrollX,\n      element.y + scrollY,\n      element.width,\n      element.height\n    );\n    context.fillStyle = fillStyle;\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor,\n        fillStyle: element.fillStyle,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness\n      });\n    });\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"diamond\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      const [\n        topX,\n        topY,\n        rightX,\n        rightY,\n        bottomX,\n        bottomY,\n        leftX,\n        leftY\n      ] = getDiamondPoints(element);\n      return generator.polygon(\n        [\n          [topX, topY],\n          [rightX, rightY],\n          [bottomX, bottomY],\n          [leftX, leftY]\n        ],\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      );\n    });\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      )\n    );\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const options = {\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      roughness: element.roughness\n    };\n\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, options),\n      // -----\n      generator.line(x1, y1, x2, y2, options),\n      //    /\n      generator.line(x4, y4, x2, y2, options)\n    ]);\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    shapes.forEach(shape => rc.draw(shape));\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n    return;\n  } else if (isTextElement(element)) {\n    context.globalAlpha = element.opacity / 100;\n    const font = context.font;\n    context.font = element.font;\n    const fillStyle = context.fillStyle;\n    context.fillStyle = element.strokeColor;\n    context.fillText(\n      element.text,\n      element.x + scrollX,\n      element.y +\n        scrollY +\n        (element.baseline || element.actualBoundingBoxAscent || 0)\n    );\n    context.fillStyle = fillStyle;\n    context.font = font;\n    context.globalAlpha = 1;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords, handlerRectangles } from \"../element\";\n\nimport { roundRect } from \"./roundRect\";\nimport { SceneState } from \"../scene/types\";\nimport {\n  getScrollBars,\n  SCROLLBAR_COLOR,\n  SCROLLBAR_WIDTH\n} from \"../scene/scrollbars\";\n\nimport { renderElement } from \"./renderElement\";\n\nexport function renderScene(\n  elements: readonly ExcalidrawElement[],\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    renderElement(element, rc, context, sceneState);\n  });\n\n  if (renderSelection) {\n    const selectedElements = elements.filter(el => el.isSelected);\n\n    selectedElements.forEach(element => {\n      const margin = 4;\n\n      const [\n        elementX1,\n        elementY1,\n        elementX2,\n        elementY2\n      ] = getElementAbsoluteCoords(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n    });\n\n    if (selectedElements.length === 1 && selectedElements[0].type !== \"text\") {\n      const handlers = handlerRectangles(selectedElements[0], sceneState);\n      Object.values(handlers).forEach(handler => {\n        context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n      });\n    }\n  }\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      elements,\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n","import rough from \"roughjs/bin/wrappers/rough\";\n\nimport { ExcalidrawElement } from \"../element/types\";\n\nimport { getElementAbsoluteCoords } from \"../element\";\n\nimport { renderScene } from \"../renderer\";\nimport { AppState } from \"../types\";\nimport { ExportType } from \"./types\";\nimport nanoid from \"nanoid\";\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\ninterface DataState {\n  elements: readonly ExcalidrawElement[];\n  appState: any;\n}\n\nexport function saveAsJSON(\n  elements: readonly ExcalidrawElement[],\n  name: string\n) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nexport function loadFromJSON() {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise<DataState>(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        let elements = [];\n        try {\n          const data = JSON.parse(reader.result as string);\n          elements = data.elements || [];\n        } catch (e) {\n          // Do nothing because elements array is already empty\n        }\n        resolve(restore(elements, null));\n      }\n    };\n  });\n}\n\nexport function exportCanvas(\n  type: ExportType,\n  elements: readonly ExcalidrawElement[],\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    scrollX: number;\n    scrollY: number;\n    name: string;\n  }\n) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    subCanvasX1 = Math.min(subCanvasX1, x1);\n    subCanvasY1 = Math.min(subCanvasY1, y1);\n    subCanvasX2 = Math.max(subCanvasX2, x2);\n    subCanvasY2 = Math.max(subCanvasY2, y2);\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    elements,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  if (type === \"png\") {\n    saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n  } else if (type === \"clipboard\") {\n    try {\n      tempCanvas.toBlob(async function(blob) {\n        try {\n          await navigator.clipboard.write([\n            new window.ClipboardItem({ \"image/png\": blob })\n          ]);\n        } catch (err) {\n          window.alert(\"Couldn't copy to clipboard. Try using Chrome browser.\");\n        }\n      });\n    } catch (err) {\n      window.alert(\"Couldn't copy to clipboard. Try using Chrome browser.\");\n    }\n  }\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction restore(\n  savedElements: readonly ExcalidrawElement[],\n  savedState: any\n): DataState {\n  return {\n    elements: savedElements.map(element => ({\n      ...element,\n      id: element.id || nanoid(),\n      fillStyle: element.fillStyle || \"hachure\",\n      strokeWidth: element.strokeWidth || 1,\n      roughness: element.roughness || 1,\n      opacity:\n        element.opacity === null || element.opacity === undefined\n          ? 100\n          : element.opacity\n    })),\n    appState: savedState\n  };\n}\n\nexport function restoreFromLocalStorage() {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  let elements = [];\n  if (savedElements) {\n    try {\n      elements = JSON.parse(savedElements);\n    } catch (e) {\n      // Do nothing because elements array is already empty\n    }\n  }\n\n  let appState = null;\n  if (savedState) {\n    try {\n      appState = JSON.parse(savedState);\n    } catch (e) {\n      // Do nothing because appState is already null\n    }\n  }\n\n  return restore(elements, appState);\n}\n\nexport function saveToLocalStorage(\n  elements: readonly ExcalidrawElement[],\n  state: AppState\n) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { hitTest } from \"../element/collision\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport const hasBackground = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\")\n  );\n\nexport const hasStroke = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\" ||\n        element.type === \"arrow\")\n  );\n\nexport const hasText = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected && element.type === \"text\");\n\nexport function getElementAtPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], x, y)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n\nexport function getElementContainingPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(elements[i]);\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n  return hitElement;\n}\n","import { ExcalidrawElement } from \"../element/types\";\n\nexport const createScene = () => {\n  const elements: readonly ExcalidrawElement[] = [];\n  return { elements };\n};\n","import React from \"react\";\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nexport const SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nexport const shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nexport function findShapeByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n","import { ExcalidrawElement } from \"./element/types\";\n\nclass SceneHistory {\n  private recording: boolean = true;\n  private stateHistory: string[] = [];\n  private redoStack: string[] = [];\n\n  generateCurrentEntry(elements: readonly ExcalidrawElement[]) {\n    return JSON.stringify(\n      elements.map(element => ({ ...element, isSelected: false }))\n    );\n  }\n\n  pushEntry(newEntry: string) {\n    if (\n      this.stateHistory.length > 0 &&\n      this.stateHistory[this.stateHistory.length - 1] === newEntry\n    ) {\n      // If the last entry is the same as this one, ignore it\n      return;\n    }\n    this.stateHistory.push(newEntry);\n  }\n\n  restoreEntry(entry: string) {\n    // When restoring, we shouldn't add an history entry otherwise we'll be stuck with it and can't go back\n    this.skipRecording();\n\n    try {\n      return JSON.parse(entry);\n    } catch {\n      return null;\n    }\n  }\n\n  clearRedoStack() {\n    this.redoStack.splice(0, this.redoStack.length);\n  }\n\n  redoOnce(elements: readonly ExcalidrawElement[]) {\n    const currentEntry = this.generateCurrentEntry(elements);\n    const entryToRestore = this.redoStack.pop();\n    if (entryToRestore !== undefined) {\n      this.stateHistory.push(currentEntry);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  undoOnce(elements: readonly ExcalidrawElement[]) {\n    const currentEntry = this.generateCurrentEntry(elements);\n    let entryToRestore = this.stateHistory.pop();\n\n    // If nothing was changed since last, take the previous one\n    if (currentEntry === entryToRestore) {\n      entryToRestore = this.stateHistory.pop();\n    }\n    if (entryToRestore !== undefined) {\n      this.redoStack.push(currentEntry);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  isRecording() {\n    return this.recording;\n  }\n\n  skipRecording() {\n    this.recording = false;\n  }\n\n  resumeRecording() {\n    this.recording = true;\n  }\n}\n\nexport const createHistory: () => { history: SceneHistory } = () => {\n  const history = new SceneHistory();\n  return { history };\n};\n","import React from \"react\";\n\ntype Props = {\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n  onCloseRequest?(): void;\n};\n\nexport function Popover({ children, left, onCloseRequest, top }: Props) {\n  return (\n    <div className=\"popover\" style={{ top: top, left: left }}>\n      <div\n        className=\"cover\"\n        onClick={onCloseRequest}\n        onContextMenu={e => {\n          e.preventDefault();\n          if (onCloseRequest) onCloseRequest();\n        }}\n      />\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\n\nimport \"./ContextMenu.css\";\n\ntype ContextMenuOption = {\n  label: string;\n  action(): void;\n};\n\ntype Props = {\n  options: ContextMenuOption[];\n  onCloseRequest?(): void;\n  top: number;\n  left: number;\n};\n\nfunction ContextMenu({ options, onCloseRequest, top, left }: Props) {\n  return (\n    <Popover onCloseRequest={onCloseRequest} top={top} left={left}>\n      <ul className=\"context-menu\" onContextMenu={e => e.preventDefault()}>\n        {options.map((option, idx) => (\n          <li\n            key={idx}\n            className=\"context-menu__option\"\n            onClick={onCloseRequest}\n          >\n            <ContextMenuOption {...option} />\n          </li>\n        ))}\n      </ul>\n    </Popover>\n  );\n}\n\nfunction ContextMenuOption({ label, action }: ContextMenuOption) {\n  return (\n    <button className=\"context-menu-option\" onClick={action}>\n      {label}\n    </button>\n  );\n}\n\nlet contextMenuNode: HTMLDivElement;\nfunction getContextMenuNode(): HTMLDivElement {\n  if (contextMenuNode) {\n    return contextMenuNode;\n  }\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  return (contextMenuNode = div);\n}\n\ntype ContextMenuParams = {\n  options: (ContextMenuOption | false | null | undefined)[];\n  top: number;\n  left: number;\n};\n\nfunction handleClose() {\n  unmountComponentAtNode(getContextMenuNode());\n}\n\nexport default {\n  push(params: ContextMenuParams) {\n    const options = Array.of<ContextMenuOption>();\n    params.options.forEach(option => {\n      if (option) {\n        options.push(option);\n      }\n    });\n    if (options.length) {\n      render(\n        <ContextMenu\n          top={params.top}\n          left={params.left}\n          options={options}\n          onCloseRequest={handleClose}\n        />,\n        getContextMenuNode()\n      );\n    }\n  }\n};\n","import React, { useState } from \"react\";\n\ninterface PanelProps {\n  title: string;\n  defaultCollapsed?: boolean;\n  hide?: boolean;\n}\n\nexport const Panel: React.FC<PanelProps> = ({\n  title,\n  children,\n  defaultCollapsed = false,\n  hide = false\n}) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n\n  if (hide) return null;\n\n  return (\n    <div className=\"panel\">\n      <h4>{title}</h4>\n      <button\n        className=\"btn-panel-collapse\"\n        type=\"button\"\n        onClick={e => {\n          e.preventDefault();\n          setCollapsed(collapsed => !collapsed);\n        }}\n      >\n        {\n          <span\n            className={`btn-panel-collapse-icon ${\n              collapsed ? \"btn-panel-collapse-icon-closed\" : \"\"\n            }`}\n          >\n            ▼\n          </span>\n        }\n      </button>\n      {!collapsed && <div className=\"panelColumn\">{children}</div>}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { SHAPES } from \"../../shapes\";\nimport { capitalizeString } from \"../../utils\";\nimport { Panel } from \"../Panel\";\n\ninterface PanelToolsProps {\n  activeTool: string;\n  onToolChange: (value: string) => void;\n}\n\nexport const PanelTools: React.FC<PanelToolsProps> = ({\n  activeTool,\n  onToolChange\n}) => {\n  return (\n    <Panel title=\"Shapes\">\n      <div className=\"panelTools\">\n        {SHAPES.map(({ value, icon }) => (\n          <label\n            key={value}\n            className=\"tool\"\n            title={`${capitalizeString(value)} - ${capitalizeString(value)[0]}`}\n          >\n            <input\n              type=\"radio\"\n              checked={activeTool === value}\n              onChange={() => {\n                onToolChange(value);\n              }}\n            />\n            <div className=\"toolIcon\">{icon}</div>\n          </label>\n        ))}\n      </div>\n    </Panel>\n  );\n};\n","import React from \"react\";\n\ninterface PanelSelectionProps {\n  onBringForward: React.MouseEventHandler;\n  onBringToFront: React.MouseEventHandler;\n  onSendBackward: React.MouseEventHandler;\n  onSendToBack: React.MouseEventHandler;\n}\n\nexport const PanelSelection: React.FC<PanelSelectionProps> = ({\n  onBringForward,\n  onBringToFront,\n  onSendBackward,\n  onSendToBack\n}) => {\n  return (\n    <div>\n      <div className=\"buttonList\">\n        <button type=\"button\" onClick={onBringForward}>\n          Bring forward\n        </button>\n        <button type=\"button\" onClick={onBringToFront}>\n          Bring to front\n        </button>\n        <button type=\"button\" onClick={onSendBackward}>\n          Send backward\n        </button>\n        <button type=\"button\" onClick={onSendToBack}>\n          Send to back\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { lazy } from \"react\";\nimport { Popover } from \"./Popover\";\n\nconst TwitterPicker = lazy(() =>\n  import(\n    /* webpackPrefetch: true */ \"react-color/lib/components/twitter/Twitter\"\n  )\n);\n\nexport function ColorPicker({\n  color,\n  onChange\n}: {\n  color: string | null;\n  onChange: (color: string) => void;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  return (\n    <div>\n      <button\n        className=\"swatch\"\n        style={color ? { backgroundColor: color } : undefined}\n        onClick={() => setActive(!isActive)}\n      />\n      <React.Suspense fallback=\"\">\n        {isActive ? (\n          <Popover onCloseRequest={() => setActive(false)}>\n            <TwitterPicker\n              colors={[\n                \"#000000\",\n                \"#ABB8C3\",\n                \"#FFFFFF\",\n                \"#FF6900\",\n                \"#FCB900\",\n                \"#00D084\",\n                \"#8ED1FC\",\n                \"#0693E3\",\n                \"#EB144C\",\n                \"#F78DA7\",\n                \"#9900EF\"\n              ]}\n              width=\"205px\"\n              color={color || undefined}\n              onChange={changedColor => {\n                onChange(changedColor.hex);\n              }}\n            />\n          </Popover>\n        ) : null}\n      </React.Suspense>\n      <input\n        type=\"text\"\n        className=\"swatch-input\"\n        value={color || \"\"}\n        onPaste={e => onChange(e.clipboardData.getData(\"text\"))}\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ColorPicker } from \"../ColorPicker\";\n\ninterface PanelColorProps {\n  title: string;\n  colorValue: string | null;\n  onColorChange: (value: string) => void;\n}\n\nexport const PanelColor: React.FC<PanelColorProps> = ({\n  title,\n  onColorChange,\n  colorValue\n}) => {\n  return (\n    <>\n      <h5>{title}</h5>\n      <ColorPicker\n        color={colorValue}\n        onChange={color => onColorChange(color)}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n\nexport function ButtonSelect<T>({\n  options,\n  value,\n  onChange\n}: {\n  options: { value: T; text: string }[];\n  value: T | null;\n  onChange: (value: T) => void;\n}) {\n  return (\n    <div className=\"buttonList\">\n      {options.map(option => (\n        <button\n          key={option.text}\n          onClick={() => onChange(option.value)}\n          className={value === option.value ? \"active\" : \"\"}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { ColorPicker } from \"../ColorPicker\";\nimport { Panel } from \"../Panel\";\n\ninterface PanelCanvasProps {\n  viewBackgroundColor: string;\n  onViewBackgroundColorChange: (val: string) => void;\n  onClearCanvas: React.MouseEventHandler;\n}\n\nexport const PanelCanvas: React.FC<PanelCanvasProps> = ({\n  viewBackgroundColor,\n  onViewBackgroundColorChange,\n  onClearCanvas\n}) => {\n  return (\n    <Panel title=\"Canvas\">\n      <h5>Canvas Background Color</h5>\n      <ColorPicker\n        color={viewBackgroundColor}\n        onChange={color => onViewBackgroundColorChange(color)}\n      />\n      <button\n        type=\"button\"\n        onClick={onClearCanvas}\n        title=\"Clear the canvas & reset background color\"\n      >\n        Clear canvas\n      </button>\n    </Panel>\n  );\n};\n","import React, { Fragment, Component } from \"react\";\n\ntype InputState = {\n  value: string;\n  edit: boolean;\n};\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport class EditableText extends Component<Props, InputState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      edit: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props: Props) {\n    this.setState({ value: props.value });\n  }\n\n  private handleEdit(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  private handleBlur() {\n    const { value } = this.state;\n\n    if (!value) {\n      this.setState({ value: this.props.value, edit: false });\n      return;\n    }\n    this.props.onChange(value);\n    this.setState({ edit: false });\n  }\n\n  public render() {\n    const { value, edit } = this.state;\n\n    return (\n      <Fragment>\n        {edit ? (\n          <input\n            className=\"project-name-input\"\n            name=\"name\"\n            maxLength={25}\n            value={value}\n            onChange={e => this.handleEdit(e)}\n            onBlur={() => this.handleBlur()}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                this.handleBlur();\n              }\n            }}\n            autoFocus\n          />\n        ) : (\n          <span\n            onClick={() => this.setState({ edit: true })}\n            className=\"project-name\"\n          >\n            {value}\n          </span>\n        )}\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { EditableText } from \"../EditableText\";\nimport { Panel } from \"../Panel\";\nimport { ExportType } from \"../../scene/types\";\n\nimport \"./panelExport.scss\";\n\ninterface PanelExportProps {\n  projectName: string;\n  onProjectNameChange: (name: string) => void;\n  onExportCanvas: (type: ExportType) => void;\n  exportBackground: boolean;\n  onExportBackgroundChange: (val: boolean) => void;\n  onSaveScene: React.MouseEventHandler;\n  onLoadScene: React.MouseEventHandler;\n}\n\n// fa-clipboard\nconst ClipboardIcon = () => (\n  <svg viewBox=\"0 0 384 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\"\n    ></path>\n  </svg>\n);\n\nconst probablySupportsClipboard =\n  \"toBlob\" in HTMLCanvasElement.prototype &&\n  \"clipboard\" in navigator &&\n  \"write\" in navigator.clipboard &&\n  \"ClipboardItem\" in window;\n\nexport const PanelExport: React.FC<PanelExportProps> = ({\n  projectName,\n  exportBackground,\n  onProjectNameChange,\n  onExportBackgroundChange,\n  onSaveScene,\n  onLoadScene,\n  onExportCanvas\n}) => {\n  return (\n    <Panel title=\"Export\">\n      <div className=\"panelColumn\">\n        <h5>Name</h5>\n        {projectName && (\n          <EditableText\n            value={projectName}\n            onChange={(name: string) => onProjectNameChange(name)}\n          />\n        )}\n        <h5>Image</h5>\n        <div className=\"panelExport-imageButtons\">\n          <button\n            className=\"panelExport-exportToPngButton\"\n            onClick={() => onExportCanvas(\"png\")}\n          >\n            Export to PNG\n          </button>\n          {probablySupportsClipboard && (\n            <button\n              className=\"panelExport-exportToClipboardButton\"\n              onClick={() => onExportCanvas(\"clipboard\")}\n              title=\"Copy to clipboard (experimental)\"\n            >\n              <ClipboardIcon />\n            </button>\n          )}\n        </div>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={exportBackground}\n            onChange={e => {\n              onExportBackgroundChange(e.target.checked);\n            }}\n          />\n          background\n        </label>\n        <h5>Scene</h5>\n        <button onClick={onSaveScene}>Save as...</button>\n        <button onClick={onLoadScene}>Load file...</button>\n      </div>\n    </Panel>\n  );\n};\n","import React from \"react\";\nimport { PanelTools } from \"./panels/PanelTools\";\nimport { Panel } from \"./Panel\";\nimport { PanelSelection } from \"./panels/PanelSelection\";\nimport { PanelColor } from \"./panels/PanelColor\";\nimport {\n  hasBackground,\n  someElementIsSelected,\n  getSelectedAttribute,\n  hasStroke,\n  hasText,\n  loadFromJSON,\n  saveAsJSON,\n  exportCanvas,\n  deleteSelectedElements\n} from \"../scene\";\nimport { ButtonSelect } from \"./ButtonSelect\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { redrawTextBoundingBox, isTextElement } from \"../element\";\nimport { PanelCanvas } from \"./panels/PanelCanvas\";\nimport { PanelExport } from \"./panels/PanelExport\";\nimport { ExportType } from \"../scene/types\";\nimport { AppState } from \"../types\";\n\ninterface SidePanelProps {\n  elements: readonly ExcalidrawElement[];\n  onToolChange: (elementType: string) => void;\n  changeProperty: (\n    callback: (element: ExcalidrawElement) => ExcalidrawElement\n  ) => void;\n  moveAllLeft: () => void;\n  moveOneLeft: () => void;\n  moveAllRight: () => void;\n  moveOneRight: () => void;\n  onClearCanvas: React.MouseEventHandler;\n  onUpdateAppState: (name: string, value: any) => void;\n  appState: AppState;\n  onUpdateElements: (elements: readonly ExcalidrawElement[]) => void;\n  canvas: HTMLCanvasElement;\n}\n\nexport const SidePanel: React.FC<SidePanelProps> = ({\n  elements,\n  onToolChange,\n  changeProperty,\n  moveAllLeft,\n  moveOneLeft,\n  moveAllRight,\n  moveOneRight,\n  onClearCanvas,\n  onUpdateAppState,\n  appState,\n  onUpdateElements,\n  canvas\n}) => {\n  return (\n    <div className=\"sidePanel\">\n      <PanelTools\n        activeTool={appState.elementType}\n        onToolChange={value => {\n          onToolChange(value);\n        }}\n      />\n      <Panel title=\"Selection\" hide={!someElementIsSelected(elements)}>\n        <PanelSelection\n          onBringForward={moveOneRight}\n          onBringToFront={moveAllRight}\n          onSendBackward={moveOneLeft}\n          onSendToBack={moveAllLeft}\n        />\n\n        <PanelColor\n          title=\"Stroke Color\"\n          onColorChange={(color: string) => {\n            changeProperty(element => ({\n              ...element,\n              strokeColor: color\n            }));\n            onUpdateAppState(\"currentItemStrokeColor\", color);\n          }}\n          colorValue={getSelectedAttribute(\n            elements,\n            element => element.strokeColor\n          )}\n        />\n\n        {hasBackground(elements) && (\n          <>\n            <PanelColor\n              title=\"Background Color\"\n              onColorChange={(color: string) => {\n                changeProperty(element => ({\n                  ...element,\n                  backgroundColor: color\n                }));\n                onUpdateAppState(\"currentItemBackgroundColor\", color);\n              }}\n              colorValue={getSelectedAttribute(\n                elements,\n                element => element.backgroundColor\n              )}\n            />\n\n            <h5>Fill</h5>\n            <ButtonSelect\n              options={[\n                { value: \"solid\", text: \"Solid\" },\n                { value: \"hachure\", text: \"Hachure\" },\n                { value: \"cross-hatch\", text: \"Cross-hatch\" }\n              ]}\n              value={getSelectedAttribute(\n                elements,\n                element => element.fillStyle\n              )}\n              onChange={value => {\n                changeProperty(element => ({\n                  ...element,\n                  fillStyle: value\n                }));\n              }}\n            />\n          </>\n        )}\n\n        {hasStroke(elements) && (\n          <>\n            <h5>Stroke Width</h5>\n            <ButtonSelect\n              options={[\n                { value: 1, text: \"Thin\" },\n                { value: 2, text: \"Bold\" },\n                { value: 4, text: \"Extra Bold\" }\n              ]}\n              value={getSelectedAttribute(\n                elements,\n                element => element.strokeWidth\n              )}\n              onChange={value => {\n                changeProperty(element => ({\n                  ...element,\n                  strokeWidth: value\n                }));\n              }}\n            />\n\n            <h5>Sloppiness</h5>\n            <ButtonSelect\n              options={[\n                { value: 0, text: \"Draftsman\" },\n                { value: 1, text: \"Artist\" },\n                { value: 3, text: \"Cartoonist\" }\n              ]}\n              value={getSelectedAttribute(\n                elements,\n                element => element.roughness\n              )}\n              onChange={value =>\n                changeProperty(element => ({\n                  ...element,\n                  roughness: value\n                }))\n              }\n            />\n          </>\n        )}\n\n        {hasText(elements) && (\n          <>\n            <h5>Font size</h5>\n            <ButtonSelect\n              options={[\n                { value: 16, text: \"Small\" },\n                { value: 20, text: \"Medium\" },\n                { value: 28, text: \"Large\" },\n                { value: 36, text: \"Very Large\" }\n              ]}\n              value={getSelectedAttribute(\n                elements,\n                element =>\n                  isTextElement(element) && +element.font.split(\"px \")[0]\n              )}\n              onChange={value =>\n                changeProperty(element => {\n                  if (isTextElement(element)) {\n                    element.font = `${value}px ${element.font.split(\"px \")[1]}`;\n                    redrawTextBoundingBox(element);\n                  }\n\n                  return element;\n                })\n              }\n            />\n            <h5>Font familly</h5>\n            <ButtonSelect\n              options={[\n                { value: \"Virgil\", text: \"Virgil\" },\n                { value: \"Helvetica\", text: \"Helvetica\" },\n                { value: \"Courier\", text: \"Courier\" }\n              ]}\n              value={getSelectedAttribute(\n                elements,\n                element =>\n                  isTextElement(element) && element.font.split(\"px \")[1]\n              )}\n              onChange={value =>\n                changeProperty(element => {\n                  if (isTextElement(element)) {\n                    element.font = `${element.font.split(\"px \")[0]}px ${value}`;\n                    redrawTextBoundingBox(element);\n                  }\n\n                  return element;\n                })\n              }\n            />\n          </>\n        )}\n\n        <h5>Opacity</h5>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          onChange={event => {\n            changeProperty(element => ({\n              ...element,\n              opacity: +event.target.value\n            }));\n          }}\n          value={\n            getSelectedAttribute(elements, element => element.opacity) ||\n            0 /* Put the opacity at 0 if there are two conflicting ones */\n          }\n        />\n\n        <button\n          onClick={() => {\n            onUpdateElements(deleteSelectedElements(elements));\n          }}\n        >\n          Delete selected\n        </button>\n      </Panel>\n      <PanelCanvas\n        onClearCanvas={onClearCanvas}\n        onViewBackgroundColorChange={value => {\n          onUpdateAppState(\"viewBackgroundColor\", value);\n        }}\n        viewBackgroundColor={appState.viewBackgroundColor}\n      />\n      <PanelExport\n        projectName={appState.name}\n        onProjectNameChange={name => {\n          onUpdateAppState(\"name\", name);\n        }}\n        onExportCanvas={(type: ExportType) =>\n          exportCanvas(type, elements, canvas, appState)\n        }\n        exportBackground={appState.exportBackground}\n        onExportBackgroundChange={value => {\n          onUpdateAppState(\"exportBackground\", value);\n        }}\n        onSaveScene={() => saveAsJSON(elements, appState.name)}\n        onLoadScene={() =>\n          loadFromJSON().then(({ elements }) => {\n            onUpdateElements(elements);\n          })\n        }\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { moveOneLeft, moveAllLeft, moveOneRight, moveAllRight } from \"./zindex\";\nimport {\n  newElement,\n  duplicateElement,\n  resizeTest,\n  isTextElement,\n  textWysiwyg,\n  getElementAbsoluteCoords,\n  redrawTextBoundingBox\n} from \"./element\";\nimport {\n  clearSelection,\n  getSelectedIndices,\n  deleteSelectedElements,\n  setSelection,\n  isOverScrollBars,\n  someElementIsSelected,\n  restoreFromLocalStorage,\n  saveToLocalStorage,\n  getElementAtPosition,\n  createScene,\n  getElementContainingPosition\n} from \"./scene\";\n\nimport { renderScene } from \"./renderer\";\nimport { AppState } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"./element/types\";\n\nimport { getDateTime, isInputLike, measureText } from \"./utils\";\nimport { KEYS, META_KEY, isArrowKey } from \"./keys\";\n\nimport { findShapeByKey, shapesShortcutKeys } from \"./shapes\";\nimport { createHistory } from \"./history\";\n\nimport ContextMenu from \"./components/ContextMenu\";\n\nimport \"./styles.scss\";\nimport { getElementWithResizeHandler } from \"./element/resizeTest\";\nimport { SidePanel } from \"./components/SidePanel\";\n\nlet { elements } = createScene();\nconst { history } = createHistory();\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nlet copiedStyles: string = \"{}\";\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction addTextElement(\n  element: ExcalidrawTextElement,\n  text: string,\n  font: string\n) {\n  resetCursor();\n  if (text === null || text === \"\") {\n    return false;\n  }\n\n  const metrics = measureText(text, font);\n  element.text = text;\n  element.font = font;\n  // Center the text\n  element.x -= metrics.width / 2;\n  element.y -= metrics.height / 2;\n  element.width = metrics.width;\n  element.height = metrics.height;\n  element.baseline = metrics.baseline;\n\n  return true;\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\nconst TEXT_TO_CENTER_SNAP_THRESHOLD = 30;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nexport function viewportCoordsToSceneCoords(\n  { clientX, clientY }: { clientX: number; clientY: number },\n  { scrollX, scrollY }: { scrollX: number; scrollY: number }\n) {\n  const x = clientX - CANVAS_WINDOW_OFFSET_LEFT - scrollX;\n  const y = clientY - CANVAS_WINDOW_OFFSET_TOP - scrollY;\n  return { x, y };\n}\n\nexport class App extends React.Component<{}, AppState> {\n  canvas: HTMLCanvasElement | null = null;\n  rc: RoughCanvas | null = null;\n\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    document.addEventListener(\"mousemove\", this.getCurrentCursorPosition);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const { elements: newElements, appState } = restoreFromLocalStorage();\n\n    if (newElements) {\n      elements = newElements;\n    }\n\n    if (appState) {\n      this.setState(appState);\n    } else {\n      this.forceUpdate();\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    document.removeEventListener(\n      \"mousemove\",\n      this.getCurrentCursorPosition,\n      false\n    );\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    currentItemFont: \"20px Virgil\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    cursorX: 0,\n    cursorY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private getCurrentCursorPosition = (e: MouseEvent) => {\n    this.setState({ cursorX: e.x, cursorY: e.y });\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (event.key === KEYS.ESCAPE) {\n      elements = clearSelection(elements);\n      this.forceUpdate();\n      this.setState({ elementType: \"selection\" });\n      if (window.document.activeElement instanceof HTMLElement) {\n        window.document.activeElement.blur();\n      }\n      event.preventDefault();\n      return;\n    }\n    if (isInputLike(event.target)) return;\n\n    if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      this.deleteSelectedElements();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements = elements.map(el => {\n        if (el.isSelected) {\n          const element = { ...el };\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n          return element;\n        }\n        return el;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n\n      // Send backward: Cmd-Shift-Alt-B\n    } else if (\n      event[META_KEY] &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyB\"\n    ) {\n      this.moveOneLeft();\n      event.preventDefault();\n\n      // Send to back: Cmd-Shift-B\n    } else if (event[META_KEY] && event.shiftKey && event.code === \"KeyB\") {\n      this.moveAllLeft();\n      event.preventDefault();\n\n      // Bring forward: Cmd-Shift-Alt-F\n    } else if (\n      event[META_KEY] &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyF\"\n    ) {\n      this.moveOneRight();\n      event.preventDefault();\n\n      // Bring to front: Cmd-Shift-F\n    } else if (event[META_KEY] && event.shiftKey && event.code === \"KeyF\") {\n      this.moveAllRight();\n      event.preventDefault();\n      // Select all: Cmd-A\n    } else if (event[META_KEY] && event.code === \"KeyA\") {\n      let newElements = [...elements];\n      newElements.forEach(element => {\n        element.isSelected = true;\n      });\n\n      elements = newElements;\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findShapeByKey(event.key) });\n    } else if (event[META_KEY] && event.code === \"KeyZ\") {\n      if (event.shiftKey) {\n        // Redo action\n        const data = history.redoOnce(elements);\n        if (data !== null) {\n          elements = data;\n        }\n      } else {\n        // undo action\n        const data = history.undoOnce(elements);\n        if (data !== null) {\n          elements = data;\n        }\n      }\n      this.forceUpdate();\n      event.preventDefault();\n      // Copy Styles: Cmd-Shift-C\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyC\") {\n      this.copyStyles();\n      // Paste Styles: Cmd-Shift-V\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyV\") {\n      this.pasteStyles();\n      event.preventDefault();\n    }\n  };\n\n  private deleteSelectedElements = () => {\n    elements = deleteSelectedElements(elements);\n    this.forceUpdate();\n  };\n\n  private clearCanvas = () => {\n    if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n      elements = [];\n      this.setState({\n        viewBackgroundColor: \"#ffffff\",\n        scrollX: 0,\n        scrollY: 0\n      });\n      this.forceUpdate();\n    }\n  };\n\n  private copyStyles = () => {\n    const element = elements.find(el => el.isSelected);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n  };\n\n  private pasteStyles = () => {\n    const pastedElement = JSON.parse(copiedStyles);\n    elements = elements.map(element => {\n      if (element.isSelected) {\n        const newElement = {\n          ...element,\n          backgroundColor: pastedElement?.backgroundColor,\n          strokeWidth: pastedElement?.strokeWidth,\n          strokeColor: pastedElement?.strokeColor,\n          fillStyle: pastedElement?.fillStyle,\n          opacity: pastedElement?.opacity,\n          roughness: pastedElement?.roughness\n        };\n        if (isTextElement(newElement)) {\n          newElement.font = pastedElement?.font;\n          redrawTextBoundingBox(newElement);\n        }\n        return newElement;\n      }\n      return element;\n    });\n    this.forceUpdate();\n  };\n\n  private moveAllLeft = () => {\n    elements = moveAllLeft([...elements], getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveOneLeft = () => {\n    elements = moveOneLeft([...elements], getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveAllRight = () => {\n    elements = moveAllRight([...elements], getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveOneRight = () => {\n    elements = moveOneRight([...elements], getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private changeProperty = (\n    callback: (element: ExcalidrawElement) => ExcalidrawElement\n  ) => {\n    elements = elements.map(element => {\n      if (element.isSelected) {\n        return callback(element);\n      }\n      return element;\n    });\n\n    this.forceUpdate();\n  };\n\n  private copyToClipboard = () => {\n    if (navigator.clipboard) {\n      const text = JSON.stringify(\n        elements.filter(element => element.isSelected)\n      );\n      navigator.clipboard.writeText(text);\n    }\n  };\n\n  private pasteFromClipboard = () => {\n    if (navigator.clipboard) {\n      navigator.clipboard\n        .readText()\n        .then(text => this.addElementsFromPaste(text));\n    }\n  };\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          elements = deleteSelectedElements(elements);\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          this.addElementsFromPaste(paste);\n          e.preventDefault();\n        }}\n      >\n        <SidePanel\n          elements={elements}\n          onToolChange={value => {\n            this.setState({ elementType: value });\n            elements = clearSelection(elements);\n            document.documentElement.style.cursor =\n              value === \"text\" ? \"text\" : \"crosshair\";\n            this.forceUpdate();\n          }}\n          moveAllLeft={this.moveAllLeft}\n          moveAllRight={this.moveAllRight}\n          moveOneLeft={this.moveOneLeft}\n          moveOneRight={this.moveOneRight}\n          onClearCanvas={this.clearCanvas}\n          changeProperty={this.changeProperty}\n          onUpdateAppState={(name, value) => {\n            this.setState({ [name]: value } as any);\n          }}\n          onUpdateElements={newElements => {\n            elements = newElements;\n            this.forceUpdate();\n          }}\n          appState={{ ...this.state }}\n          canvas={this.canvas!}\n        />\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.canvas === null) {\n              this.canvas = canvas;\n              this.rc = rough.canvas(this.canvas!);\n            }\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onContextMenu={e => {\n            e.preventDefault();\n\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const element = getElementAtPosition(elements, x, y);\n            if (!element) {\n              ContextMenu.push({\n                options: [\n                  navigator.clipboard && {\n                    label: \"Paste\",\n                    action: () => this.pasteFromClipboard()\n                  }\n                ],\n                top: e.clientY,\n                left: e.clientX\n              });\n              return;\n            }\n\n            if (!element.isSelected) {\n              elements = clearSelection(elements);\n              element.isSelected = true;\n              this.forceUpdate();\n            }\n\n            ContextMenu.push({\n              options: [\n                navigator.clipboard && {\n                  label: \"Copy\",\n                  action: this.copyToClipboard\n                },\n                navigator.clipboard && {\n                  label: \"Paste\",\n                  action: () => this.pasteFromClipboard()\n                },\n                { label: \"Copy Styles\", action: this.copyStyles },\n                { label: \"Paste Styles\", action: this.pasteStyles },\n                { label: \"Delete\", action: this.deleteSelectedElements },\n                { label: \"Move Forward\", action: this.moveOneRight },\n                { label: \"Send to Front\", action: this.moveAllRight },\n                { label: \"Move Backwards\", action: this.moveOneLeft },\n                { label: \"Send to Back\", action: this.moveAllLeft }\n              ],\n              top: e.clientY,\n              left: e.clientX\n            });\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              elements,\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n            type ResizeTestType = ReturnType<typeof resizeTest>;\n            let resizeHandle: ResizeTestType = false;\n            let isDraggingElements = false;\n            let isResizingElements = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = getElementWithResizeHandler(\n                elements,\n                { x, y },\n                this.state\n              );\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement.element : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeElement.resizeHandle;\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                const selected = getElementAtPosition(\n                  elements.filter(el => el.isSelected),\n                  x,\n                  y\n                );\n                // clear selection if shift is not clicked\n                if (!selected && !e.shiftKey) {\n                  elements = clearSelection(elements);\n                }\n                const hitElement = getElementAtPosition(elements, x, y);\n\n                // If we click on something\n                if (hitElement) {\n                  // deselect if item is selected\n                  // if shift is not clicked, this will always return true\n                  // otherwise, it will trigger selection based on current\n                  // state of the box\n                  hitElement.isSelected = true;\n\n                  // No matter what, we select it\n                  // We duplicate the selected element if alt is pressed on Mouse down\n                  if (e.altKey) {\n                    elements = [\n                      ...elements,\n                      ...elements.reduce((duplicates, element) => {\n                        if (element.isSelected) {\n                          duplicates = duplicates.concat(\n                            duplicateElement(element)\n                          );\n                          element.isSelected = false;\n                        }\n                        return duplicates;\n                      }, [] as typeof elements)\n                    ];\n                  }\n                }\n\n                isDraggingElements = someElementIsSelected(elements);\n\n                if (isDraggingElements) {\n                  document.documentElement.style.cursor = \"move\";\n                }\n              }\n            }\n\n            if (isTextElement(element)) {\n              let textX = e.clientX;\n              let textY = e.clientY;\n              if (!e.altKey) {\n                const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n                  x,\n                  y\n                );\n                if (snappedToCenterPosition) {\n                  element.x = snappedToCenterPosition.elementCenterX;\n                  element.y = snappedToCenterPosition.elementCenterY;\n                  textX = snappedToCenterPosition.wysiwygX;\n                  textY = snappedToCenterPosition.wysiwygY;\n                }\n              }\n\n              textWysiwyg({\n                initText: \"\",\n                x: textX,\n                y: textY,\n                strokeColor: this.state.currentItemStrokeColor,\n                font: this.state.currentItemFont,\n                onSubmit: text => {\n                  addTextElement(element, text, this.state.currentItemFont);\n                  elements = [...elements, { ...element, isSelected: true }];\n                  this.setState({\n                    draggingElement: null,\n                    elementType: \"selection\"\n                  });\n                }\n              });\n              return;\n            }\n\n            if (this.state.elementType === \"text\") {\n              elements = [...elements, { ...element, isSelected: true }];\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n            } else {\n              elements = [...elements, element];\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          element.height += element.y - lastY;\n                          element.y = lastY;\n                        }\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          element.height += element.y - lastY;\n                          element.y = lastY;\n                        }\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height = lastY - element.y;\n                        }\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey\n                ? Math.abs(width) * Math.sign(height)\n                : height;\n\n              if (this.state.elementType === \"selection\") {\n                elements = setSelection(elements, draggingElement);\n              }\n              // We don't want to save history when moving an element\n              history.skipRecording();\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                elements = clearSelection(elements);\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements = elements.slice(0, -1);\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            history.skipRecording();\n            this.forceUpdate();\n          }}\n          onDoubleClick={e => {\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const elementAtPosition = getElementAtPosition(elements, x, y);\n\n            const element = newElement(\n              \"text\",\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            ) as ExcalidrawTextElement;\n\n            let initText = \"\";\n            let textX = e.clientX;\n            let textY = e.clientY;\n\n            if (elementAtPosition && isTextElement(elementAtPosition)) {\n              elements = elements.filter(\n                element => element.id !== elementAtPosition.id\n              );\n              this.forceUpdate();\n\n              Object.assign(element, elementAtPosition);\n              // x and y will change after calling addTextElement function\n              element.x = elementAtPosition.x + elementAtPosition.width / 2;\n              element.y = elementAtPosition.y + elementAtPosition.height / 2;\n              initText = elementAtPosition.text;\n              textX =\n                this.state.scrollX +\n                elementAtPosition.x +\n                CANVAS_WINDOW_OFFSET_LEFT +\n                elementAtPosition.width / 2;\n              textY =\n                this.state.scrollY +\n                elementAtPosition.y +\n                CANVAS_WINDOW_OFFSET_TOP +\n                elementAtPosition.height / 2;\n            } else if (!e.altKey) {\n              const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n                x,\n                y\n              );\n\n              if (snappedToCenterPosition) {\n                element.x = snappedToCenterPosition.elementCenterX;\n                element.y = snappedToCenterPosition.elementCenterY;\n                textX = snappedToCenterPosition.wysiwygX;\n                textY = snappedToCenterPosition.wysiwygY;\n              }\n            }\n\n            textWysiwyg({\n              initText,\n              x: textX,\n              y: textY,\n              strokeColor: element.strokeColor,\n              font: element.font || this.state.currentItemFont,\n              onSubmit: text => {\n                addTextElement(\n                  element,\n                  text,\n                  element.font || this.state.currentItemFont\n                );\n                elements = [...elements, { ...element, isSelected: true }];\n                this.setState({\n                  draggingElement: null,\n                  elementType: \"selection\"\n                });\n              }\n            });\n          }}\n          onMouseMove={e => {\n            const hasDeselectedButton = Boolean(e.buttons);\n            if (hasDeselectedButton || this.state.elementType !== \"selection\") {\n              return;\n            }\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n            const resizeElement = getElementWithResizeHandler(\n              elements,\n              { x, y },\n              this.state\n            );\n            if (resizeElement && resizeElement.resizeHandle) {\n              document.documentElement.style.cursor = `${resizeElement.resizeHandle}-resize`;\n              return;\n            }\n            const hitElement = getElementAtPosition(elements, x, y);\n            if (hitElement) {\n              const resizeHandle = resizeTest(hitElement, x, y, {\n                scrollX: this.state.scrollX,\n                scrollY: this.state.scrollY\n              });\n              document.documentElement.style.cursor = resizeHandle\n                ? `${resizeHandle}-resize`\n                : `move`;\n            } else {\n              document.documentElement.style.cursor = ``;\n            }\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  private addElementsFromPaste = (paste: string) => {\n    let parsedElements;\n    try {\n      parsedElements = JSON.parse(paste);\n    } catch (e) {}\n    if (\n      Array.isArray(parsedElements) &&\n      parsedElements.length > 0 &&\n      parsedElements[0].type // need to implement a better check here...\n    ) {\n      elements = clearSelection(elements);\n\n      let subCanvasX1 = Infinity;\n      let subCanvasX2 = 0;\n      let subCanvasY1 = Infinity;\n      let subCanvasY2 = 0;\n\n      const minX = Math.min(...parsedElements.map(element => element.x));\n      const minY = Math.min(...parsedElements.map(element => element.y));\n\n      const distance = (x: number, y: number) => {\n        return Math.abs(x > y ? x - y : y - x);\n      };\n\n      parsedElements.forEach(parsedElement => {\n        const [x1, y1, x2, y2] = getElementAbsoluteCoords(parsedElement);\n        subCanvasX1 = Math.min(subCanvasX1, x1);\n        subCanvasY1 = Math.min(subCanvasY1, y1);\n        subCanvasX2 = Math.max(subCanvasX2, x2);\n        subCanvasY2 = Math.max(subCanvasY2, y2);\n      });\n\n      const elementsCenterX = distance(subCanvasX1, subCanvasX2) / 2;\n      const elementsCenterY = distance(subCanvasY1, subCanvasY2) / 2;\n\n      const dx =\n        this.state.cursorX -\n        this.state.scrollX -\n        CANVAS_WINDOW_OFFSET_LEFT -\n        elementsCenterX;\n      const dy =\n        this.state.cursorY -\n        this.state.scrollY -\n        CANVAS_WINDOW_OFFSET_TOP -\n        elementsCenterY;\n\n      elements = [\n        ...elements,\n        ...parsedElements.map(parsedElement => {\n          const duplicate = duplicateElement(parsedElement);\n          duplicate.x += dx - minX;\n          duplicate.y += dy - minY;\n          return duplicate;\n        })\n      ];\n      this.forceUpdate();\n    }\n  };\n\n  private getTextWysiwygSnappedToCenterPosition(x: number, y: number) {\n    const elementClickedInside = getElementContainingPosition(elements, x, y);\n    if (elementClickedInside) {\n      const elementCenterX =\n        elementClickedInside.x + elementClickedInside.width / 2;\n      const elementCenterY =\n        elementClickedInside.y + elementClickedInside.height / 2;\n      const distanceToCenter = Math.hypot(\n        x - elementCenterX,\n        y - elementCenterY\n      );\n      const isSnappedToCenter =\n        distanceToCenter < TEXT_TO_CENTER_SNAP_THRESHOLD;\n      if (isSnappedToCenter) {\n        const wysiwygX =\n          this.state.scrollX +\n          elementClickedInside.x +\n          CANVAS_WINDOW_OFFSET_LEFT +\n          elementClickedInside.width / 2;\n        const wysiwygY =\n          this.state.scrollY +\n          elementClickedInside.y +\n          CANVAS_WINDOW_OFFSET_TOP +\n          elementClickedInside.height / 2;\n        return { wysiwygX, wysiwygY, elementCenterX, elementCenterY };\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    renderScene(elements, this.rc!, this.canvas!, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    saveToLocalStorage(elements, this.state);\n    if (history.isRecording()) {\n      history.pushEntry(history.generateCurrentEntry(elements));\n      history.clearRedoStack();\n    }\n    history.resumeRecording();\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}