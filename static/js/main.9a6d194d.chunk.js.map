{"version":3,"sources":["element/newElement.ts","math.ts","element/bounds.ts","element/handlerRectangles.ts","element/collision.ts","element/resizeTest.ts","element/typeChecks.ts","keys.ts","utils.ts","element/textWysiwyg.tsx","element/textElement.ts","scene/scrollbars.ts","scene/selection.ts","renderer/roundRect.ts","renderer/renderElement.ts","renderer/renderScene.ts","scene/data.ts","scene/comparisons.ts","scene/createScene.ts","shapes.tsx","history.ts","components/Popover.tsx","components/ContextMenu.tsx","actions/manager.tsx","actions/actionDeleteSelected.tsx","zindex.ts","actions/actionZindex.tsx","actions/actionSelectAll.ts","components/ButtonSelect.tsx","components/ColorPicker.tsx","actions/actionProperties.tsx","appState.ts","components/icons.tsx","components/ToolIcon.tsx","actions/actionCanvas.tsx","components/EditableText.tsx","actions/actionExport.tsx","actions/actionStyles.ts","components/Island.tsx","components/Stack.tsx","components/FixedSideContainer.tsx","components/Modal.tsx","components/ExportDialog.tsx","index.tsx"],"names":["newElement","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","width","height","element","id","nanoid","isSelected","seed","randomSeed","shape","duplicateElement","copy","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","Math","hypot","rotate","angle","cos","sin","getElementAbsoluteCoords","getDiamondPoints","topX","floor","rightX","rightY","getArrowPoints","distance","minSize","min","xs","ys","PI","x3","y3","handlerRectangles","scrollX","scrollY","elementX1","elementX2","elementY1","elementY2","handlers","marginX","marginY","abs","nw","se","hitTest","px","py","tx","ty","a","b","forEach","ex","ey","rx","ry","qx","qy","r","q","max","t","topY","bottomX","bottomY","leftX","leftY","x4","y4","console","warn","Error","getElementWithResizeHandler","elements","reduce","result","resizeHandle","filter","Object","keys","key","handler","length","resizeTest","isTextElement","KEYS","META_KEY","test","window","navigator","platform","capitalizeString","str","charAt","toUpperCase","slice","isInputLike","target","HTMLElement","dataset","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","measureText","text","font","line","document","createElement","body","style","position","whiteSpace","appendChild","innerText","offsetWidth","offsetHeight","span","display","overflow","baseline","offsetTop","removeChild","selectNode","node","selection","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","removeSelection","textWysiwyg","initText","onSubmit","editable","stopEvent","ev","stopPropagation","handleSubmit","cleanup","onblur","onkeydown","onpaste","removeEventListener","contentEditable","tabIndex","assign","color","top","left","transform","textAlign","padding","outline","minHeight","preventDefault","clipboardData","getData","replace","textContent","addEventListener","focus","redrawTextBoundingBox","metrics","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","clearSelection","newElements","deleteSelectedElements","el","getSelectedIndices","selectedIndices","index","push","getSelectedAttribute","getAttribute","attributes","Array","from","Set","map","roundRect","context","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","renderElement","rc","generator","fillRect","rectangle","undefined","globalAlpha","draw","polygon","ellipse","options","fillText","actualBoundingBoxAscent","renderScene","canvas","sceneState","offsetX","offsetY","renderScrollbars","renderSelection","getContext","viewBackgroundColor","clearRect","translate","selectedElements","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","devicePixelRatio","strokeStyle","scrollBar","saveFile","name","data","link","setAttribute","click","remove","exportCanvas","exportBackground","exportPadding","alert","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","rough","toDataURL","toBlob","blob","async","clipboard","write","ClipboardItem","err","restore","savedElements","savedState","appState","getElementAtPosition","hitElement","i","SHAPES","icon","viewBox","d","value","shapesShortcutKeys","SceneHistory","recording","stateHistory","redoStack","JSON","stringify","newEntry","this","clearRedoStack","entry","parse","splice","entryToRestore","pop","restoreEntry","currentEntry","Popover","children","onCloseRequest","fitInViewport","popoverRef","useRef","useLayoutEffect","current","getBoundingClientRect","viewportWidth","innerWidth","viewportHeight","innerHeight","className","ref","onClick","onContextMenu","e","contextMenuNode","ContextMenu","option","idx","ContextMenuOption","label","action","getContextMenuNode","div","handleClose","unmountComponentAtNode","params","of","render","ActionManager","actions","updater","event","sort","keyPriority","keyTest","perform","actionFilter","contextMenuOrder","contextItemLabel","PanelComponent","updateData","formState","actionDeleteSelected","swap","indexA","indexB","moveOneLeft","indicesToMove","isSorted","moveOneRight","reversedIndicesToMove","moveAllLeft","leftMostElements","reverse","concat","pos","moveAllRight","rightMostElements","actionSendBackward","shiftKey","altKey","code","actionBringForward","actionSendToBack","actionBringToFront","actionSelectAll","elem","ButtonSelect","onChange","Picker","colors","React","useState","innerValue","setInnerValue","useEffect","title","spellCheck","match","clear","ColorPicker","isActive","setActive","Suspense","fallback","changedColor","onPaste","canvasBackground","elementBackground","elementStroke","changeProperty","callback","actionChangeStrokeColor","currentItemStrokeColor","actionChangeBackgroundColor","currentItemBackgroundColor","actionChangeFillStyle","actionChangeStrokeWidth","actionChangeSloppiness","actionChangeOpacity","actionChangeFontSize","split","actionChangeFontFamily","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","getMinutes","secs","getSeconds","getDateTime","getDefaultAppState","draggingElement","resizingElement","elementType","currentItemFont","cursorX","cursorY","save","aria-hidden","focusable","role","load","trash","exportFile","downloadFile","ToolIcon","props","aria-label","checked","actionChangeViewBackgroundColor","actionClearCanvas","confirm","EditableText","handleFocus","currentTarget","handleBlur","trim","handleKeyDown","blur","suppressContentEditableWarning","data-type","onBlur","onKeyDown","onFocus","Component","actionChangeProjectName","actionChangeExportBackground","actionSaveScene","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","actionLoadScene","loadedElements","input","reader","FileReader","accept","onchange","files","readAsText","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","then","copiedStyles","actionCopyStyles","find","actionPasteStyles","pastedElement","Island","gap","align","alignItems","justifyItems","FixedSideContainer","side","Modal","modalRoot","useBodyRoot","createPortal","maxWidth","probablySupportsClipboard","HTMLCanvasElement","prototype","ExportDialog","actionManager","syncActionResult","onExportToPng","onExportToClipboard","someElementIsSelected","some","modalIsShown","setModalIsShown","exportSelected","setExportSelected","previeRef","exportedElements","previewNode","getExportCanvasPreview","renderAction","history","resetCursor","documentElement","cursor","addTextElement","lastCanvasWidth","lastCanvasHeight","lastMouseUp","viewportCoordsToSceneCoords","clientX","clientY","App","canvasOnlyActions","res","forceUpdate","setState","onCut","setData","onCopy","paste","addElementsFromPaste","state","onResize","getCurrentCursorPosition","activeElement","keyCode","step","includes","toLowerCase","ctrlKey","metaKey","redoOnce","undoOnce","removeWheelEventListener","copyToClipboard","writeText","pasteFromClipboard","readText","handleWheel","deltaX","deltaY","parsedElements","isArray","parsedElement","elementsCenterX","elementsCenterY","duplicate","saveDebounced","fn","timeout","handle","args","clearTimeout","setTimeout","debounce","localStorage","setItem","registerAction","getItem","restoreFromLocalStorage","hasBackground","hasStroke","hasText","renderCanvasActions","renderSelectedShapeActions","renderShapesSwitcher","passive","scale","getContextMenuItems","onMouseDown","button","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","isResizingElements","draggingOccured","elementIsAddedToSelection","resizeElement","textX","textY","snappedToCenterPosition","getTextWysiwygSnappedToCenterPosition","elementCenterX","elementCenterY","wysiwygX","wysiwygY","lastX","lastY","onMouseMove","skipRecording","sign","selectionX1","selectionY1","selectionX2","selectionY2","getElementsWithinSelection","onMouseUp","resumeRecording","onDoubleClick","elementAtPosition","Boolean","buttons","elementClickedInside","getElementContainingPosition","isRecording","pushEntry","generateCurrentEntry","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.9a6d194d.chunk.js","sourcesContent":["import { randomSeed } from \"roughjs/bin/math\";\nimport nanoid from \"nanoid\";\nimport { Drawable } from \"roughjs/bin/core\";\n\nexport function newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    id: nanoid(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    isSelected: false,\n    seed: randomSeed(),\n    shape: null as Drawable | Drawable[] | null\n  };\n  return element;\n}\n\nexport function duplicateElement(element: ReturnType<typeof newElement>) {\n  const copy = { ...element };\n  delete copy.shape;\n  copy.id = nanoid();\n  copy.seed = randomSeed();\n  return copy;\n}\n","// https://stackoverflow.com/a/6853926/232122\nexport function distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nexport function rotate(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number\n) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { rotate } from \"../math\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nexport function getElementAbsoluteCoords(element: ExcalidrawElement) {\n  return [\n    element.width >= 0 ? element.x : element.x + element.width, // x1\n    element.height >= 0 ? element.y : element.y + element.height, // y1\n    element.width >= 0 ? element.x + element.width : element.x, // x2\n    element.height >= 0 ? element.y + element.height : element.y // y2\n  ];\n}\n\nexport function getDiamondPoints(element: ExcalidrawElement) {\n  // Here we add +1 to avoid these numbers to be 0\n  // otherwise rough.js will throw an error complaining about it\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nexport function getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { SceneScroll } from \"../scene/types\";\n\ntype Sides = \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\";\n\nexport function handlerRectangles(\n  element: ExcalidrawElement,\n  { scrollX, scrollY }: SceneScroll\n) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers = {} as { [T in Sides]: number[] };\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + scrollX - 4,\n      elementY1 - margin + scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + scrollX - 4,\n      elementY2 - margin + scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + scrollX + marginX,\n    elementY1 - margin + scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + scrollX - marginX,\n    elementY1 - margin + scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + scrollX + marginX,\n    elementY2 - margin + scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + scrollX - marginX,\n    elementY2 - margin + scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    } as typeof handlers;\n  }\n\n  return handlers;\n}\n","import { distanceBetweenPointAndSegment } from \"../math\";\n\nimport { ExcalidrawElement } from \"./types\";\nimport {\n  getArrowPoints,\n  getDiamondPoints,\n  getElementAbsoluteCoords\n} from \"./bounds\";\n\nexport function hitTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number\n): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = Math.abs(element.width) / 2;\n    const b = Math.abs(element.height) / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    if (element.backgroundColor !== \"transparent\") {\n      return (\n        a * tx - (px - lineThreshold) >= 0 && b * ty - (py - lineThreshold) >= 0\n      );\n    } else {\n      return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n    }\n  } else if (element.type === \"rectangle\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    if (element.backgroundColor !== \"transparent\") {\n      return (\n        x > x1 - lineThreshold &&\n        x < x2 + lineThreshold &&\n        y > y1 - lineThreshold &&\n        y < y2 + lineThreshold\n      );\n    }\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    let [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    if (element.backgroundColor !== \"transparent\") {\n      // TODO: remove this when we normalize coordinates globally\n      if (topY > bottomY) [bottomY, topY] = [topY, bottomY];\n      if (rightX < leftX) [leftX, rightX] = [rightX, leftX];\n\n      topY -= lineThreshold;\n      bottomY += lineThreshold;\n      leftX -= lineThreshold;\n      rightX += lineThreshold;\n\n      // all deltas should be < 0. Delta > 0 indicates it's on the outside side\n      //  of the line.\n      //\n      //          (topX, topY)\n      //     D  /             \\ A\n      //      /               \\\n      //  (leftX, leftY)  (rightX, rightY)\n      //    C \\               / B\n      //      \\              /\n      //      (bottomX, bottomY)\n      //\n      // https://stackoverflow.com/a/2752753/927631\n      return (\n        // delta from line D\n        (leftX - topX) * (y - leftY) - (leftX - x) * (topY - leftY) <= 0 &&\n        // delta from line A\n        (topX - rightX) * (y - rightY) - (x - rightX) * (topY - rightY) <= 0 &&\n        // delta from line B\n        (rightX - bottomX) * (y - bottomY) -\n          (x - bottomX) * (rightY - bottomY) <=\n          0 &&\n        // delta from line C\n        (bottomX - leftX) * (y - leftY) - (x - leftX) * (bottomY - leftY) <= 0\n      );\n    }\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { ExcalidrawElement } from \"./types\";\n\nimport { handlerRectangles } from \"./handlerRectangles\";\nimport { SceneScroll } from \"../scene/types\";\n\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\n\nexport function resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  { scrollX, scrollY }: SceneScroll\n): HandlerRectanglesRet | false {\n  if (!element.isSelected || element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, { scrollX, scrollY });\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key as HandlerRectanglesRet]!;\n\n    return (\n      x + scrollX >= handler[0] &&\n      x + scrollX <= handler[0] + handler[2] &&\n      y + scrollY >= handler[1] &&\n      y + scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as HandlerRectanglesRet;\n  }\n\n  return false;\n}\n\nexport function getElementWithResizeHandler(\n  elements: readonly ExcalidrawElement[],\n  { x, y }: { x: number; y: number },\n  { scrollX, scrollY }: SceneScroll\n) {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const resizeHandle = resizeTest(element, x, y, {\n      scrollX,\n      scrollY\n    });\n    return resizeHandle ? { element, resizeHandle } : null;\n  }, null as { element: ExcalidrawElement; resizeHandle: ReturnType<typeof resizeTest> } | null);\n}\n","import { ExcalidrawElement, ExcalidrawTextElement } from \"./types\";\n\nexport function isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n","export const KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ENTER: \"Enter\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nexport const META_KEY = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform)\n  ? \"metaKey\"\n  : \"ctrlKey\";\n\nexport function isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n","export function getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\nexport function capitalizeString(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\n// https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\nexport function measureText(text: string, font: string) {\n  const line = document.createElement(\"div\");\n  const body = document.body;\n  line.style.position = \"absolute\";\n  line.style.whiteSpace = \"nowrap\";\n  line.style.font = font;\n  body.appendChild(line);\n  // Now we can measure width and height of the letter\n  line.innerText = text;\n  const width = line.offsetWidth;\n  const height = line.offsetHeight;\n  // Now creating 1px sized item that will be aligned to baseline\n  // to calculate baseline shift\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  span.style.overflow = \"hidden\";\n  span.style.width = \"1px\";\n  span.style.height = \"1px\";\n  line.appendChild(span);\n  // Baseline is important for positioning text on canvas\n  const baseline = span.offsetTop + span.offsetHeight;\n  document.body.removeChild(line);\n\n  return { width, height, baseline };\n}\n\nexport function debounce<T extends any[]>(\n  fn: (...args: T) => void,\n  timeout: number\n) {\n  let handle = 0;\n  return (...args: T) => {\n    clearTimeout(handle);\n    handle = window.setTimeout(() => fn(...args), timeout);\n  };\n}\n\nexport function selectNode(node: Element) {\n  const selection = window.getSelection();\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(node);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n\nexport function removeSelection() {\n  const selection = window.getSelection();\n  if (selection) {\n    selection.removeAllRanges();\n  }\n}\n","import { KEYS } from \"../keys\";\nimport { selectNode } from \"../utils\";\n\ntype TextWysiwygParams = {\n  initText: string;\n  x: number;\n  y: number;\n  strokeColor: string;\n  font: string;\n  onSubmit: (text: string) => void;\n};\n\nexport function textWysiwyg({\n  initText,\n  x,\n  y,\n  strokeColor,\n  font,\n  onSubmit\n}: TextWysiwygParams) {\n  // Using contenteditable here as it has dynamic width.\n  // But this solution has an issue — it allows to paste\n  // multiline text, which is not currently supported\n  const editable = document.createElement(\"div\");\n  editable.contentEditable = \"true\";\n  editable.tabIndex = 0;\n  editable.innerText = initText;\n  editable.dataset.type = \"wysiwyg\";\n\n  Object.assign(editable.style, {\n    color: strokeColor,\n    position: \"absolute\",\n    top: y + \"px\",\n    left: x + \"px\",\n    transform: \"translate(-50%, -50%)\",\n    textAlign: \"center\",\n    display: \"inline-block\",\n    font: font,\n    padding: \"4px\",\n    outline: \"transparent\",\n    whiteSpace: \"nowrap\",\n    minHeight: \"1em\"\n  });\n\n  editable.onkeydown = ev => {\n    if (ev.key === KEYS.ESCAPE) {\n      ev.preventDefault();\n      if (initText) {\n        editable.innerText = initText;\n        handleSubmit();\n        return;\n      }\n      cleanup();\n      return;\n    }\n    if (ev.key === KEYS.ENTER) {\n      ev.preventDefault();\n      handleSubmit();\n    }\n  };\n  editable.onblur = handleSubmit;\n  // override paste to disallow non-textual data, and replace newlines\n  editable.onpaste = ev => {\n    ev.preventDefault();\n    try {\n      const text = ev.clipboardData!.getData(\"text\").replace(/\\n+/g, \" \");\n      editable.textContent = text;\n    } catch {}\n  };\n\n  function stopEvent(ev: Event) {\n    ev.stopPropagation();\n  }\n\n  function handleSubmit() {\n    if (editable.innerText) {\n      onSubmit(editable.innerText);\n    }\n    cleanup();\n  }\n\n  function cleanup() {\n    editable.onblur = null;\n    editable.onkeydown = null;\n    editable.onpaste = null;\n    window.removeEventListener(\"wheel\", stopEvent, true);\n    document.body.removeChild(editable);\n  }\n\n  window.addEventListener(\"wheel\", stopEvent, true);\n  document.body.appendChild(editable);\n  editable.focus();\n  selectNode(editable);\n}\n","import { measureText } from \"../utils\";\nimport { ExcalidrawTextElement } from \"./types\";\n\nexport const redrawTextBoundingBox = (element: ExcalidrawTextElement) => {\n  const metrics = measureText(element.text, element.font);\n  element.width = metrics.width;\n  element.height = metrics.height;\n  element.baseline = metrics.baseline;\n};\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport function getScrollBars(\n  elements: readonly ExcalidrawElement[],\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nexport function isOverScrollBars(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(\n    elements,\n    canvasWidth,\n    canvasHeight,\n    scrollX,\n    scrollY\n  );\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport function getElementsWithinSelection(\n  elements: readonly ExcalidrawElement[],\n  selection: ExcalidrawElement\n) {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2\n  ] = getElementAbsoluteCoords(selection);\n  return elements.filter(element => {\n    const [\n      elementX1,\n      elementY1,\n      elementX2,\n      elementY2\n    ] = getElementAbsoluteCoords(element);\n\n    return (\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2\n    );\n  });\n}\n\nexport function clearSelection(elements: readonly ExcalidrawElement[]) {\n  const newElements = [...elements];\n\n  newElements.forEach(element => {\n    element.isSelected = false;\n  });\n\n  return newElements;\n}\n\nexport function deleteSelectedElements(elements: readonly ExcalidrawElement[]) {\n  return elements.filter(el => !el.isSelected);\n}\n\nexport function getSelectedIndices(elements: readonly ExcalidrawElement[]) {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nexport const someElementIsSelected = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected);\n\nexport function getSelectedAttribute<T>(\n  elements: readonly ExcalidrawElement[],\n  getAttribute: (element: ExcalidrawElement) => T\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => getAttribute(element))\n    )\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { isTextElement } from \"../element/typeChecks\";\nimport { getDiamondPoints, getArrowPoints } from \"../element/bounds\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { Drawable } from \"roughjs/bin/core\";\n\nexport function renderElement(\n  element: ExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D\n) {\n  const generator = rc.generator;\n  if (element.type === \"selection\") {\n    const fillStyle = context.fillStyle;\n    context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n    context.fillRect(0, 0, element.width, element.height);\n    context.fillStyle = fillStyle;\n  } else if (element.type === \"rectangle\") {\n    if (!element.shape) {\n      element.shape = generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill:\n          element.backgroundColor === \"transparent\"\n            ? undefined\n            : element.backgroundColor,\n        fillStyle: element.fillStyle,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness,\n        seed: element.seed\n      });\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"diamond\") {\n    if (!element.shape) {\n      const [\n        topX,\n        topY,\n        rightX,\n        rightY,\n        bottomX,\n        bottomY,\n        leftX,\n        leftY\n      ] = getDiamondPoints(element);\n      element.shape = generator.polygon(\n        [\n          [topX, topY],\n          [rightX, rightY],\n          [bottomX, bottomY],\n          [leftX, leftY]\n        ],\n        {\n          stroke: element.strokeColor,\n          fill:\n            element.backgroundColor === \"transparent\"\n              ? undefined\n              : element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness,\n          seed: element.seed\n        }\n      );\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"ellipse\") {\n    if (!element.shape) {\n      element.shape = generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        {\n          stroke: element.strokeColor,\n          fill:\n            element.backgroundColor === \"transparent\"\n              ? undefined\n              : element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness,\n          seed: element.seed\n        }\n      );\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const options = {\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      roughness: element.roughness,\n      seed: element.seed\n    };\n\n    if (!element.shape) {\n      element.shape = [\n        //    \\\n        generator.line(x3, y3, x2, y2, options),\n        // -----\n        generator.line(x1, y1, x2, y2, options),\n        //    /\n        generator.line(x4, y4, x2, y2, options)\n      ];\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    (element.shape as Drawable[]).forEach(shape => rc.draw(shape));\n    context.globalAlpha = 1;\n    return;\n  } else if (isTextElement(element)) {\n    context.globalAlpha = element.opacity / 100;\n    const font = context.font;\n    context.font = element.font;\n    const fillStyle = context.fillStyle;\n    context.fillStyle = element.strokeColor;\n    context.fillText(\n      element.text,\n      0,\n      element.baseline || element.actualBoundingBoxAscent || 0\n    );\n    context.fillStyle = fillStyle;\n    context.font = font;\n    context.globalAlpha = 1;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords, handlerRectangles } from \"../element\";\n\nimport { roundRect } from \"./roundRect\";\nimport { SceneState } from \"../scene/types\";\nimport {\n  getScrollBars,\n  SCROLLBAR_COLOR,\n  SCROLLBAR_WIDTH\n} from \"../scene/scrollbars\";\n\nimport { renderElement } from \"./renderElement\";\n\nexport function renderScene(\n  elements: readonly ExcalidrawElement[],\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    context.translate(\n      element.x + sceneState.scrollX,\n      element.y + sceneState.scrollY\n    );\n    renderElement(element, rc, context);\n    context.translate(\n      -element.x - sceneState.scrollX,\n      -element.y - sceneState.scrollY\n    );\n  });\n\n  if (renderSelection) {\n    const selectedElements = elements.filter(el => el.isSelected);\n\n    selectedElements.forEach(element => {\n      const margin = 4;\n\n      const [\n        elementX1,\n        elementY1,\n        elementX2,\n        elementY2\n      ] = getElementAbsoluteCoords(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n    });\n\n    if (selectedElements.length === 1 && selectedElements[0].type !== \"text\") {\n      const handlers = handlerRectangles(selectedElements[0], sceneState);\n      Object.values(handlers).forEach(handler => {\n        context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n      });\n    }\n  }\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      elements,\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n","import rough from \"roughjs/bin/rough\";\n\nimport { ExcalidrawElement } from \"../element/types\";\n\nimport { getElementAbsoluteCoords } from \"../element\";\n\nimport { renderScene } from \"../renderer\";\nimport { AppState } from \"../types\";\nimport { ExportType } from \"./types\";\nimport nanoid from \"nanoid\";\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\ninterface DataState {\n  elements: readonly ExcalidrawElement[];\n  appState: any;\n}\n\nexport function saveAsJSON(\n  elements: readonly ExcalidrawElement[],\n  name: string\n) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements: elements.map(({ shape, ...el }) => el)\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nexport function loadFromJSON() {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise<DataState>(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        let elements = [];\n        try {\n          const data = JSON.parse(reader.result as string);\n          elements = data.elements || [];\n        } catch (e) {\n          // Do nothing because elements array is already empty\n        }\n        resolve(restore(elements, null));\n      }\n    };\n  });\n}\n\nexport function getExportCanvasPreview(\n  elements: readonly ExcalidrawElement[],\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n  }\n) {\n  // calculate smallest area to fit the contents in\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    subCanvasX1 = Math.min(subCanvasX1, x1);\n    subCanvasY1 = Math.min(subCanvasY1, y1);\n    subCanvasX2 = Math.max(subCanvasX2, x2);\n    subCanvasY2 = Math.max(subCanvasY2, y2);\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    elements,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n  return tempCanvas;\n}\n\nexport function exportCanvas(\n  type: ExportType,\n  elements: readonly ExcalidrawElement[],\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    scrollX: number;\n    scrollY: number;\n    name: string;\n  }\n) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    subCanvasX1 = Math.min(subCanvasX1, x1);\n    subCanvasY1 = Math.min(subCanvasY1, y1);\n    subCanvasX2 = Math.max(subCanvasX2, x2);\n    subCanvasY2 = Math.max(subCanvasY2, y2);\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    elements,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  if (type === \"png\") {\n    saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n  } else if (type === \"clipboard\") {\n    try {\n      tempCanvas.toBlob(async function(blob) {\n        try {\n          await navigator.clipboard.write([\n            new window.ClipboardItem({ \"image/png\": blob })\n          ]);\n        } catch (err) {\n          window.alert(\"Couldn't copy to clipboard. Try using Chrome browser.\");\n        }\n      });\n    } catch (err) {\n      window.alert(\"Couldn't copy to clipboard. Try using Chrome browser.\");\n    }\n  }\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction restore(\n  savedElements: readonly ExcalidrawElement[],\n  savedState: any\n): DataState {\n  return {\n    elements: savedElements.map(element => ({\n      ...element,\n      id: element.id || nanoid(),\n      fillStyle: element.fillStyle || \"hachure\",\n      strokeWidth: element.strokeWidth || 1,\n      roughness: element.roughness || 1,\n      opacity:\n        element.opacity === null || element.opacity === undefined\n          ? 100\n          : element.opacity\n    })),\n    appState: savedState\n  };\n}\n\nexport function restoreFromLocalStorage() {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  let elements = [];\n  if (savedElements) {\n    try {\n      elements = JSON.parse(savedElements).map(\n        ({ shape, ...element }: ExcalidrawElement) => element\n      );\n    } catch (e) {\n      // Do nothing because elements array is already empty\n    }\n  }\n\n  let appState = null;\n  if (savedState) {\n    try {\n      appState = JSON.parse(savedState);\n    } catch (e) {\n      // Do nothing because appState is already null\n    }\n  }\n\n  return restore(elements, appState);\n}\n\nexport function saveToLocalStorage(\n  elements: readonly ExcalidrawElement[],\n  state: AppState\n) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { hitTest } from \"../element/collision\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport const hasBackground = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\")\n  );\n\nexport const hasStroke = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\" ||\n        element.type === \"arrow\")\n  );\n\nexport const hasText = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected && element.type === \"text\");\n\nexport function getElementAtPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], x, y)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n\nexport function getElementContainingPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(elements[i]);\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n  return hitElement;\n}\n","import { ExcalidrawElement } from \"../element/types\";\n\nexport const createScene = () => {\n  const elements: readonly ExcalidrawElement[] = [];\n  return { elements };\n};\n","import React from \"react\";\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nexport const SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nexport const shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nexport function findShapeByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n","import { ExcalidrawElement } from \"./element/types\";\n\nclass SceneHistory {\n  private recording: boolean = true;\n  private stateHistory: string[] = [];\n  private redoStack: string[] = [];\n\n  generateCurrentEntry(elements: readonly ExcalidrawElement[]) {\n    return JSON.stringify(\n      elements.map(({ shape, ...element }) => ({\n        ...element,\n        isSelected: false\n      }))\n    );\n  }\n\n  pushEntry(newEntry: string) {\n    if (\n      this.stateHistory.length > 0 &&\n      this.stateHistory[this.stateHistory.length - 1] === newEntry\n    ) {\n      // If the last entry is the same as this one, ignore it\n      return;\n    }\n\n    this.stateHistory.push(newEntry);\n\n    // As a new entry was pushed, we invalidate the redo stack\n    this.clearRedoStack();\n  }\n\n  restoreEntry(entry: string) {\n    try {\n      return JSON.parse(entry);\n    } catch {\n      return null;\n    }\n  }\n\n  clearRedoStack() {\n    this.redoStack.splice(0, this.redoStack.length);\n  }\n\n  redoOnce() {\n    if (this.redoStack.length === 0) {\n      return null;\n    }\n\n    const entryToRestore = this.redoStack.pop();\n\n    if (entryToRestore !== undefined) {\n      this.stateHistory.push(entryToRestore);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  undoOnce() {\n    if (this.stateHistory.length === 0) {\n      return null;\n    }\n\n    const currentEntry = this.stateHistory.pop();\n    const entryToRestore = this.stateHistory[this.stateHistory.length - 1];\n\n    if (currentEntry !== undefined) {\n      this.redoStack.push(currentEntry);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  isRecording() {\n    return this.recording;\n  }\n\n  skipRecording() {\n    this.recording = false;\n  }\n\n  resumeRecording() {\n    this.recording = true;\n  }\n}\n\nexport const createHistory: () => { history: SceneHistory } = () => {\n  const history = new SceneHistory();\n  return { history };\n};\n","import React, { useLayoutEffect, useRef } from \"react\";\nimport \"./Popover.css\";\n\ntype Props = {\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n  onCloseRequest?(): void;\n  fitInViewport?: boolean;\n};\n\nexport function Popover({\n  children,\n  left,\n  top,\n  onCloseRequest,\n  fitInViewport = false\n}: Props) {\n  const popoverRef = useRef<HTMLDivElement>(null);\n\n  // ensure the popover doesn't overflow the viewport\n  useLayoutEffect(() => {\n    if (fitInViewport && popoverRef.current) {\n      const element = popoverRef.current;\n      const { x, y, width, height } = element.getBoundingClientRect();\n\n      const viewportWidth = window.innerWidth;\n      if (x + width > viewportWidth) {\n        element.style.left = viewportWidth - width + \"px\";\n      }\n      const viewportHeight = window.innerHeight;\n      if (y + height > viewportHeight) {\n        element.style.top = viewportHeight - height + \"px\";\n      }\n    }\n  }, [fitInViewport]);\n\n  return (\n    <div className=\"popover\" style={{ top: top, left: left }} ref={popoverRef}>\n      <div\n        className=\"cover\"\n        onClick={onCloseRequest}\n        onContextMenu={e => {\n          e.preventDefault();\n          if (onCloseRequest) onCloseRequest();\n        }}\n      />\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\n\nimport \"./ContextMenu.css\";\n\ntype ContextMenuOption = {\n  label: string;\n  action(): void;\n};\n\ntype Props = {\n  options: ContextMenuOption[];\n  onCloseRequest?(): void;\n  top: number;\n  left: number;\n};\n\nfunction ContextMenu({ options, onCloseRequest, top, left }: Props) {\n  return (\n    <Popover\n      onCloseRequest={onCloseRequest}\n      top={top}\n      left={left}\n      fitInViewport={true}\n    >\n      <ul className=\"context-menu\" onContextMenu={e => e.preventDefault()}>\n        {options.map((option, idx) => (\n          <li\n            key={idx}\n            className=\"context-menu__option\"\n            onClick={onCloseRequest}\n          >\n            <ContextMenuOption {...option} />\n          </li>\n        ))}\n      </ul>\n    </Popover>\n  );\n}\n\nfunction ContextMenuOption({ label, action }: ContextMenuOption) {\n  return (\n    <button className=\"context-menu-option\" onClick={action}>\n      {label}\n    </button>\n  );\n}\n\nlet contextMenuNode: HTMLDivElement;\nfunction getContextMenuNode(): HTMLDivElement {\n  if (contextMenuNode) {\n    return contextMenuNode;\n  }\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  return (contextMenuNode = div);\n}\n\ntype ContextMenuParams = {\n  options: (ContextMenuOption | false | null | undefined)[];\n  top: number;\n  left: number;\n};\n\nfunction handleClose() {\n  unmountComponentAtNode(getContextMenuNode());\n}\n\nexport default {\n  push(params: ContextMenuParams) {\n    const options = Array.of<ContextMenuOption>();\n    params.options.forEach(option => {\n      if (option) {\n        options.push(option);\n      }\n    });\n    if (options.length) {\n      render(\n        <ContextMenu\n          top={params.top}\n          left={params.left}\n          options={options}\n          onCloseRequest={handleClose}\n        />,\n        getContextMenuNode()\n      );\n    }\n  }\n};\n","import React from \"react\";\nimport {\n  Action,\n  ActionsManagerInterface,\n  UpdaterFn,\n  ActionFilterFn\n} from \"./types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\n\nexport class ActionManager implements ActionsManagerInterface {\n  actions: { [keyProp: string]: Action } = {};\n\n  updater:\n    | ((elements: ExcalidrawElement[], appState: AppState) => void)\n    | null = null;\n\n  setUpdater(\n    updater: (elements: ExcalidrawElement[], appState: AppState) => void\n  ) {\n    this.updater = updater;\n  }\n\n  registerAction(action: Action) {\n    this.actions[action.name] = action;\n  }\n\n  handleKeyDown(\n    event: KeyboardEvent,\n    elements: readonly ExcalidrawElement[],\n    appState: AppState\n  ) {\n    const data = Object.values(this.actions)\n      .sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0))\n      .filter(\n        action => action.keyTest && action.keyTest(event, elements, appState)\n      );\n\n    if (data.length === 0) return {};\n\n    event.preventDefault();\n    return data[0].perform(elements, appState, null);\n  }\n\n  getContextMenuItems(\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n    updater: UpdaterFn,\n    actionFilter: ActionFilterFn = action => action\n  ) {\n    return Object.values(this.actions)\n      .filter(actionFilter)\n      .filter(action => \"contextItemLabel\" in action)\n      .sort(\n        (a, b) =>\n          (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) -\n          (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999)\n      )\n      .map(action => ({\n        label: action.contextItemLabel!,\n        action: () => {\n          updater(action.perform(elements, appState, null));\n        }\n      }));\n  }\n\n  renderAction(\n    name: string,\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n    updater: UpdaterFn\n  ) {\n    if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\n      const action = this.actions[name];\n      const PanelComponent = action.PanelComponent!;\n      const updateData = (formState: any) => {\n        updater(action.perform(elements, appState, formState));\n      };\n\n      return (\n        <PanelComponent\n          elements={elements}\n          appState={appState}\n          updateData={updateData}\n        />\n      );\n    }\n\n    return null;\n  }\n}\n","import { Action } from \"./types\";\nimport { deleteSelectedElements } from \"../scene\";\nimport { KEYS } from \"../keys\";\n\nexport const actionDeleteSelected: Action = {\n  name: \"deleteSelectedElements\",\n  perform: elements => {\n    return {\n      elements: deleteSelectedElements(elements)\n    };\n  },\n  contextItemLabel: \"Delete\",\n  contextMenuOrder: 3,\n  keyTest: event => event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE\n};\n","function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n\n  return elements;\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n  return elements;\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n\n  return elements;\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n\n  return elements;\n}\n","import { Action } from \"./types\";\nimport {\n  moveOneLeft,\n  moveOneRight,\n  moveAllLeft,\n  moveAllRight\n} from \"../zindex\";\nimport { getSelectedIndices } from \"../scene\";\nimport { META_KEY } from \"../keys\";\n\nexport const actionSendBackward: Action = {\n  name: \"sendBackward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneLeft([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Send Backward\",\n  keyPriority: 40,\n  keyTest: event =>\n    event[META_KEY] && event.shiftKey && event.altKey && event.code === \"KeyB\"\n};\n\nexport const actionBringForward: Action = {\n  name: \"bringForward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneRight([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Bring Forward\",\n  keyPriority: 40,\n  keyTest: event =>\n    event[META_KEY] && event.shiftKey && event.altKey && event.code === \"KeyF\"\n};\n\nexport const actionSendToBack: Action = {\n  name: \"sendToBack\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllLeft([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Send to Back\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyB\"\n};\n\nexport const actionBringToFront: Action = {\n  name: \"bringToFront\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllRight([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Bring to Front\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyF\"\n};\n","import { Action } from \"./types\";\nimport { META_KEY } from \"../keys\";\n\nexport const actionSelectAll: Action = {\n  name: \"selectAll\",\n  perform: elements => {\n    return {\n      elements: elements.map(elem => ({ ...elem, isSelected: true }))\n    };\n  },\n  contextItemLabel: \"Select All\",\n  keyTest: event => event[META_KEY] && event.code === \"KeyA\"\n};\n","import React from \"react\";\n\nexport function ButtonSelect<T>({\n  options,\n  value,\n  onChange\n}: {\n  options: { value: T; text: string }[];\n  value: T | null;\n  onChange: (value: T) => void;\n}) {\n  return (\n    <div className=\"buttonList\">\n      {options.map(option => (\n        <button\n          key={option.text}\n          onClick={() => onChange(option.value)}\n          className={value === option.value ? \"active\" : \"\"}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\n\nimport \"./ColorPicker.css\";\n\n// This is a narrow reimplementation of the awesome react-color Twitter component\n// https://github.com/casesandberg/react-color/blob/master/src/components/twitter/Twitter.js\n\nconst Picker = function({\n  colors,\n  color,\n  onChange\n}: {\n  colors: string[];\n  color: string | undefined;\n  onChange: (color: string) => void;\n}) {\n  const [innerValue, setInnerValue] = React.useState(color);\n  React.useEffect(() => {\n    setInnerValue(color);\n  }, [color]);\n  return (\n    <div className=\"color-picker\">\n      <div className=\"color-picker-triangle-shadow\"></div>\n      <div className=\"color-picker-triangle\"></div>\n      <div className=\"color-picker-content\">\n        {colors.map(color => (\n          <div\n            className=\"color-picker-swatch\"\n            onClick={() => {\n              onChange(color);\n            }}\n            title={color}\n            tabIndex={0}\n            style={{ backgroundColor: color }}\n          >\n            {color === \"transparent\" ? (\n              <div className=\"color-picker-transparent\"></div>\n            ) : (\n              undefined\n            )}\n          </div>\n        ))}\n        <div className=\"color-picker-hash\">#</div>\n        <div style={{ position: \"relative\" }}>\n          <input\n            spellCheck={false}\n            className=\"color-picker-input\"\n            onChange={e => {\n              const value = e.target.value;\n              if (value.match(/^([0-9a-f]{3}|[0-9a-f]{6}|transparent)$/)) {\n                onChange(value === \"transparent\" ? \"transparent\" : \"#\" + value);\n              }\n              setInnerValue(value);\n            }}\n            value={(innerValue || \"\").replace(/^#/, \"\")}\n          />\n        </div>\n        <div style={{ clear: \"both\" }}></div>\n      </div>\n    </div>\n  );\n};\n\nexport function ColorPicker({\n  type,\n  color,\n  onChange\n}: {\n  type: \"canvasBackground\" | \"elementBackground\" | \"elementStroke\";\n  color: string | null;\n  onChange: (color: string) => void;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  return (\n    <div>\n      <button\n        className=\"color-picker-label-swatch\"\n        style={color ? { backgroundColor: color } : undefined}\n        onClick={() => setActive(!isActive)}\n      />\n      <React.Suspense fallback=\"\">\n        {isActive ? (\n          <Popover onCloseRequest={() => setActive(false)}>\n            <Picker\n              colors={colors[type]}\n              color={color || undefined}\n              onChange={changedColor => {\n                onChange(changedColor);\n              }}\n            />\n          </Popover>\n        ) : null}\n      </React.Suspense>\n      <input\n        type=\"text\"\n        className=\"color-picker-swatch-input\"\n        value={color || \"\"}\n        onPaste={e => onChange(e.clipboardData.getData(\"text\"))}\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n}\n\nconst colors = {\n  canvasBackground: [\n    \"#DEE6EF\",\n    \"#FCEAD8\",\n    \"#F9E0E0\",\n    \"#E6F1F1\",\n    \"#E0EDDF\",\n    \"#FBF5DD\",\n    \"#F0E6ED\",\n    \"#FFEDEF\",\n    \"#EDE5E1\",\n    \"#F2F0EF\",\n    \"#FFFFFF\"\n  ],\n  elementBackground: [\n    \"#4E79A7\",\n    \"#F28E2C\",\n    \"#E15759\",\n    \"#76B7B2\",\n    \"#59A14F\",\n    \"#EDC949\",\n    \"#AF7AA1\",\n    \"#FF9DA7\",\n    \"#9C755F\",\n    \"#BAB0AB\",\n    \"transparent\"\n  ],\n  elementStroke: [\n    \"#324E6B\",\n    \"#9B5B1D\",\n    \"#903839\",\n    \"#4C7572\",\n    \"#396733\",\n    \"#AD9336\",\n    \"#805976\",\n    \"#BA737A\",\n    \"#725646\",\n    \"#88817D\",\n    \"#000000\"\n  ]\n};\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"../element/types\";\nimport { getSelectedAttribute } from \"../scene\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\nimport { ColorPicker } from \"../components/ColorPicker\";\n\nconst changeProperty = (\n  elements: readonly ExcalidrawElement[],\n  callback: (element: ExcalidrawElement) => ExcalidrawElement\n) => {\n  return elements.map(element => {\n    if (element.isSelected) {\n      return callback(element);\n    }\n    return element;\n  });\n};\n\nexport const actionChangeStrokeColor: Action = {\n  name: \"changeStrokeColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        strokeColor: value\n      })),\n      appState: { ...appState, currentItemStrokeColor: value }\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h5>Stroke</h5>\n      <ColorPicker\n        type=\"elementStroke\"\n        color={getSelectedAttribute(elements, element => element.strokeColor)}\n        onChange={updateData}\n      />\n    </>\n  )\n};\n\nexport const actionChangeBackgroundColor: Action = {\n  name: \"changeBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        backgroundColor: value\n      })),\n      appState: { ...appState, currentItemBackgroundColor: value }\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Background</h5>\n      <ColorPicker\n        type=\"elementBackground\"\n        color={getSelectedAttribute(\n          elements,\n          element => element.backgroundColor\n        )}\n        onChange={updateData}\n      />\n    </>\n  )\n};\n\nexport const actionChangeFillStyle: Action = {\n  name: \"changeFillStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        fillStyle: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Fill</h5>\n      <ButtonSelect\n        options={[\n          { value: \"solid\", text: \"Solid\" },\n          { value: \"hachure\", text: \"Hachure\" },\n          { value: \"cross-hatch\", text: \"Cross-hatch\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.fillStyle)}\n        onChange={value => {\n          updateData(value);\n        }}\n      />\n    </>\n  )\n};\n\nexport const actionChangeStrokeWidth: Action = {\n  name: \"changeStrokeWidth\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        strokeWidth: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h5>Stroke Width</h5>\n      <ButtonSelect\n        options={[\n          { value: 1, text: \"Thin\" },\n          { value: 2, text: \"Bold\" },\n          { value: 4, text: \"Extra Bold\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.strokeWidth)}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeSloppiness: Action = {\n  name: \"changeSloppiness\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        roughness: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h5>Sloppiness</h5>\n      <ButtonSelect\n        options={[\n          { value: 0, text: \"Draftsman\" },\n          { value: 1, text: \"Artist\" },\n          { value: 3, text: \"Cartoonist\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.roughness)}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeOpacity: Action = {\n  name: \"changeOpacity\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        opacity: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Opacity</h5>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        onChange={e => updateData(+e.target.value)}\n        value={\n          getSelectedAttribute(elements, element => element.opacity) ||\n          0 /* Put the opacity at 0 if there are two conflicting ones */\n        }\n      />\n    </>\n  )\n};\n\nexport const actionChangeFontSize: Action = {\n  name: \"changeFontSize\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = {\n            ...el,\n            shape: null,\n            font: `${value}px ${el.font.split(\"px \")[1]}`\n          };\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      })\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Font size</h5>\n      <ButtonSelect\n        options={[\n          { value: 16, text: \"Small\" },\n          { value: 20, text: \"Medium\" },\n          { value: 28, text: \"Large\" },\n          { value: 36, text: \"Very Large\" }\n        ]}\n        value={getSelectedAttribute(\n          elements,\n          element => isTextElement(element) && +element.font.split(\"px \")[0]\n        )}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeFontFamily: Action = {\n  name: \"changeFontFamily\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = {\n            ...el,\n            shape: null,\n            font: `${el.font.split(\"px \")[0]}px ${value}`\n          };\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      })\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Font family</h5>\n      <ButtonSelect\n        options={[\n          { value: \"Virgil\", text: \"Virgil\" },\n          { value: \"Helvetica\", text: \"Helvetica\" },\n          { value: \"Courier\", text: \"Courier\" }\n        ]}\n        value={getSelectedAttribute(\n          elements,\n          element => isTextElement(element) && element.font.split(\"px \")[1]\n        )}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n","import { AppState } from \"./types\";\nimport { getDateTime } from \"./utils\";\n\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nexport function getDefaultAppState(): AppState {\n  return {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"transparent\",\n    currentItemFont: \"20px Virgil\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    cursorX: 0,\n    cursorY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n}\n","//\n// All icons are imported from https://fontawesome.com/icons?d=gallery\n// Icons are under the license https://fontawesome.com/license\n//\n\nimport React from \"react\";\n\nexport const save = (\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 448 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z\"\n    />\n  </svg>\n);\n\nexport const load = (\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 576 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z\"\n    />\n  </svg>\n);\n\nexport const image = (\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 384 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M384 121.941V128H256V0h6.059a24 24 0 0 1 16.97 7.029l97.941 97.941a24.002 24.002 0 0 1 7.03 16.971zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zm-135.455 16c26.51 0 48 21.49 48 48s-21.49 48-48 48-48-21.49-48-48 21.491-48 48-48zm208 240h-256l.485-48.485L104.545 328c4.686-4.686 11.799-4.201 16.485.485L160.545 368 264.06 264.485c4.686-4.686 12.284-4.686 16.971 0L320.545 304v112z\"\n    />\n  </svg>\n);\n\nexport const clipboard = (\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 384 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\"\n    />\n  </svg>\n);\n\nexport const trash = (\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 448 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z\"\n    />\n  </svg>\n);\n\nexport const palete = (\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 512 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\"\n    />\n  </svg>\n);\n\nexport const exportFile = (\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 576 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M384 121.9c0-6.3-2.5-12.4-7-16.9L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128zM571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-379 28v-32c0-8.8 7.2-16 16-16h176V160H248c-13.2 0-24-10.8-24-24V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V352H208c-8.8 0-16-7.2-16-16z\"\n    />\n  </svg>\n);\n\nexport const downloadFile = (\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 384 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm76.45 211.36l-96.42 95.7c-6.65 6.61-17.39 6.61-24.04 0l-96.42-95.7C73.42 337.29 80.54 320 94.82 320H160v-80c0-8.84 7.16-16 16-16h32c8.84 0 16 7.16 16 16v80h65.18c14.28 0 21.4 17.29 11.27 27.36zM377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z\"\n    />\n  </svg>\n);\n","import \"./ToolIcon.scss\";\n\nimport React from \"react\";\n\ntype ToolIconProps =\n  | {\n      type: \"button\";\n      icon: React.ReactNode;\n      \"aria-label\": string;\n      title?: string;\n      name?: string;\n      id?: string;\n      onClick?(): void;\n    }\n  | {\n      type: \"radio\";\n      icon: React.ReactNode;\n      title?: string;\n      name?: string;\n      id?: string;\n      checked: boolean;\n      onChange?(): void;\n    };\n\nexport function ToolIcon(props: ToolIconProps) {\n  if (props.type === \"button\")\n    return (\n      <label className=\"ToolIcon\" title={props.title}>\n        <button\n          className=\"ToolIcon_type_button\"\n          aria-label={props[\"aria-label\"]}\n          type=\"button\"\n          onClick={props.onClick}\n        >\n          <div className=\"ToolIcon__icon\">{props.icon}</div>\n        </button>\n      </label>\n    );\n\n  return (\n    <label className=\"ToolIcon\" title={props.title}>\n      <input\n        className=\"ToolIcon_type_radio\"\n        type=\"radio\"\n        name={props.name}\n        id={props.id}\n        onChange={props.onChange}\n        checked={props.checked}\n      />\n      <div className=\"ToolIcon__icon\">{props.icon}</div>\n    </label>\n  );\n}\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { getDefaultAppState } from \"../appState\";\nimport { trash } from \"../components/icons\";\nimport { ToolIcon } from \"../components/ToolIcon\";\n\nexport const actionChangeViewBackgroundColor: Action = {\n  name: \"changeViewBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, viewBackgroundColor: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => {\n    return (\n      <div style={{ position: \"relative\" }}>\n        <ColorPicker\n          type=\"canvasBackground\"\n          color={appState.viewBackgroundColor}\n          onChange={color => updateData(color)}\n        />\n      </div>\n    );\n  }\n};\n\nexport const actionClearCanvas: Action = {\n  name: \"clearCanvas\",\n  perform: () => {\n    return {\n      elements: [],\n      appState: getDefaultAppState()\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolIcon\n      type=\"button\"\n      icon={trash}\n      title=\"Clear the canvas & reset background color\"\n      aria-label=\"Clear the canvas & reset background color\"\n      onClick={() => {\n        if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n          updateData(null);\n        }\n      }}\n    />\n  )\n};\n","import \"./EditableText.css\";\n\nimport React, { Component } from \"react\";\nimport { selectNode, removeSelection } from \"../utils\";\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport class EditableText extends Component<Props> {\n  private handleFocus = (e: React.FocusEvent<HTMLElement>) => {\n    selectNode(e.currentTarget);\n  };\n\n  private handleBlur = (e: React.FocusEvent<HTMLElement>) => {\n    const value = e.currentTarget.innerText.trim();\n    if (value !== this.props.value) this.props.onChange(value);\n    removeSelection();\n  };\n\n  private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      e.currentTarget.blur();\n    }\n  };\n\n  public render() {\n    return (\n      <span\n        suppressContentEditableWarning\n        contentEditable=\"true\"\n        data-type=\"wysiwyg\"\n        className=\"project-name\"\n        onBlur={this.handleBlur}\n        onKeyDown={this.handleKeyDown}\n        onFocus={this.handleFocus}\n      >\n        {this.props.value}\n      </span>\n    );\n  }\n}\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { EditableText } from \"../components/EditableText\";\nimport { saveAsJSON, loadFromJSON } from \"../scene\";\nimport { load, save } from \"../components/icons\";\nimport { ToolIcon } from \"../components/ToolIcon\";\n\nexport const actionChangeProjectName: Action = {\n  name: \"changeProjectName\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, name: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <EditableText\n      value={appState.name || \"Unnamed\"}\n      onChange={(name: string) => updateData(name)}\n    />\n  )\n};\n\nexport const actionChangeExportBackground: Action = {\n  name: \"changeExportBackground\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, exportBackground: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={appState.exportBackground}\n        onChange={e => {\n          updateData(e.target.checked);\n        }}\n      />{\" \"}\n      With background\n    </label>\n  )\n};\n\nexport const actionSaveScene: Action = {\n  name: \"saveScene\",\n  perform: (elements, appState, value) => {\n    saveAsJSON(elements, appState.name);\n    return {};\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolIcon\n      type=\"button\"\n      icon={save}\n      title=\"Save\"\n      aria-label=\"Save\"\n      onClick={() => updateData(null)}\n    />\n  )\n};\n\nexport const actionLoadScene: Action = {\n  name: \"loadScene\",\n  perform: (elements, appState, loadedElements) => {\n    return { elements: loadedElements };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolIcon\n      type=\"button\"\n      icon={load}\n      title=\"Load\"\n      aria-label=\"Load\"\n      onClick={() => {\n        loadFromJSON().then(({ elements }) => {\n          updateData(elements);\n        });\n      }}\n    />\n  )\n};\n","import { Action } from \"./types\";\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\nimport { META_KEY } from \"../keys\";\n\nlet copiedStyles: string = \"{}\";\n\nexport const actionCopyStyles: Action = {\n  name: \"copyStyles\",\n  perform: elements => {\n    const element = elements.find(el => el.isSelected);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n    return {};\n  },\n  contextItemLabel: \"Copy Styles\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyC\",\n  contextMenuOrder: 0\n};\n\nexport const actionPasteStyles: Action = {\n  name: \"pasteStyles\",\n  perform: elements => {\n    const pastedElement = JSON.parse(copiedStyles);\n    return {\n      elements: elements.map(element => {\n        if (element.isSelected) {\n          const newElement = {\n            ...element,\n            shape: null,\n            backgroundColor: pastedElement?.backgroundColor,\n            strokeWidth: pastedElement?.strokeWidth,\n            strokeColor: pastedElement?.strokeColor,\n            fillStyle: pastedElement?.fillStyle,\n            opacity: pastedElement?.opacity,\n            roughness: pastedElement?.roughness\n          };\n          if (isTextElement(newElement)) {\n            newElement.font = pastedElement?.font;\n            redrawTextBoundingBox(newElement);\n          }\n          return newElement;\n        }\n        return element;\n      })\n    };\n  },\n  contextItemLabel: \"Paste Styles\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyV\",\n  contextMenuOrder: 1\n};\n","import \"./Island.css\";\n\nimport React from \"react\";\n\ntype IslandProps = { children: React.ReactNode; padding?: number };\n\nexport function Island({ children, padding }: IslandProps) {\n  return (\n    <div\n      className=\"Island\"\n      style={{ \"--padding\": padding } as React.CSSProperties}\n    >\n      {children}\n    </div>\n  );\n}\n","import \"./Stack.css\";\n\nimport React from \"react\";\n\ntype StackProps = {\n  children: React.ReactNode;\n  gap?: number;\n  align?: \"start\" | \"center\" | \"end\";\n};\n\nfunction RowStack({ children, gap, align }: StackProps) {\n  return (\n    <div\n      className=\"Stack Stack_horizontal\"\n      style={{ \"--gap\": gap, alignItems: align } as React.CSSProperties}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction ColStack({ children, gap, align }: StackProps) {\n  return (\n    <div\n      className=\"Stack Stack_vertical\"\n      style={{ \"--gap\": gap, justifyItems: align } as React.CSSProperties}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default {\n  Row: RowStack,\n  Col: ColStack\n};\n","import \"./FixedSideContainer.css\";\n\nimport React from \"react\";\n\ntype FixedSideContainerProps = {\n  children: React.ReactNode;\n  side: \"top\" | \"left\" | \"right\";\n};\n\nexport function FixedSideContainer({\n  children,\n  side\n}: FixedSideContainerProps) {\n  return (\n    <div className={\"FixedSideContainer FixedSideContainer_side_\" + side}>\n      {children}\n    </div>\n  );\n}\n","import \"./Modal.css\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nexport function Modal(props: {\n  children: React.ReactNode;\n  maxWidth?: number;\n  onCloseRequest(): void;\n}) {\n  const modalRoot = useBodyRoot();\n  return createPortal(\n    <div className=\"Modal\">\n      <div className=\"Modal__background\" onClick={props.onCloseRequest}></div>\n      <div className=\"Modal__content\" style={{ maxWidth: props.maxWidth }}>\n        {props.children}\n      </div>\n    </div>,\n    modalRoot\n  );\n}\n\nfunction useBodyRoot() {\n  function createDiv() {\n    const div = document.createElement(\"div\");\n    document.body.appendChild(div);\n    return div;\n  }\n  const [div] = useState(createDiv);\n  useEffect(() => {\n    return () => {\n      document.body.removeChild(div);\n    };\n  }, [div]);\n  return div;\n}\n","import \"./ExportDialog.css\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\n\nimport { Modal } from \"./Modal\";\nimport { ToolIcon } from \"./ToolIcon\";\nimport { clipboard, exportFile, downloadFile } from \"./icons\";\nimport { Island } from \"./Island\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { getExportCanvasPreview } from \"../scene/data\";\nimport { ActionsManagerInterface, UpdaterFn } from \"../actions/types\";\nimport Stack from \"./Stack\";\n\nconst probablySupportsClipboard =\n  \"toBlob\" in HTMLCanvasElement.prototype &&\n  \"clipboard\" in navigator &&\n  \"write\" in navigator.clipboard &&\n  \"ClipboardItem\" in window;\n\nexport function ExportDialog({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  syncActionResult,\n  onExportToPng,\n  onExportToClipboard\n}: {\n  appState: AppState;\n  elements: readonly ExcalidrawElement[];\n  exportPadding?: number;\n  actionManager: ActionsManagerInterface;\n  syncActionResult: UpdaterFn;\n  onExportToPng(elements: readonly ExcalidrawElement[]): void;\n  onExportToClipboard(elements: readonly ExcalidrawElement[]): void;\n}) {\n  const someElementIsSelected = elements.some(element => element.isSelected);\n  const [modalIsShown, setModalIsShown] = useState(false);\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\n  const previeRef = useRef<HTMLDivElement>(null);\n  const { exportBackground, viewBackgroundColor } = appState;\n\n  const exportedElements = exportSelected\n    ? elements.filter(element => element.isSelected)\n    : elements;\n\n  useEffect(() => {\n    setExportSelected(someElementIsSelected);\n  }, [someElementIsSelected]);\n\n  useEffect(() => {\n    const previewNode = previeRef.current;\n    const canvas = getExportCanvasPreview(exportedElements, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding\n    });\n    previewNode?.appendChild(canvas);\n    return () => {\n      previewNode?.removeChild(canvas);\n    };\n  }, [\n    modalIsShown,\n    exportedElements,\n    exportBackground,\n    exportPadding,\n    viewBackgroundColor\n  ]);\n\n  function handleClose() {\n    setModalIsShown(false);\n    setExportSelected(someElementIsSelected);\n  }\n\n  return (\n    <>\n      <ToolIcon\n        onClick={() => setModalIsShown(true)}\n        icon={exportFile}\n        type=\"button\"\n        aria-label=\"Show export dialog\"\n      />\n      {modalIsShown && (\n        <Modal maxWidth={640} onCloseRequest={handleClose}>\n          <div className=\"ExportDialog__dialog\">\n            <Island padding={4}>\n              <button className=\"ExportDialog__close\" onClick={handleClose}>\n                ╳\n              </button>\n              <h2>Export</h2>\n              <div className=\"ExportDialog__preview\" ref={previeRef}></div>\n              <div className=\"ExportDialog__actions\">\n                <Stack.Row gap={2}>\n                  <ToolIcon\n                    type=\"button\"\n                    icon={downloadFile}\n                    title=\"Export to PNG\"\n                    aria-label=\"Export to PNG\"\n                    onClick={() => onExportToPng(exportedElements)}\n                  />\n\n                  {probablySupportsClipboard && (\n                    <ToolIcon\n                      type=\"button\"\n                      icon={clipboard}\n                      title=\"Copy to clipboard\"\n                      aria-label=\"Copy to clipboard\"\n                      onClick={() => onExportToClipboard(exportedElements)}\n                    />\n                  )}\n                </Stack.Row>\n\n                {actionManager.renderAction(\n                  \"changeProjectName\",\n                  elements,\n                  appState,\n                  syncActionResult\n                )}\n                <Stack.Col gap={1}>\n                  {actionManager.renderAction(\n                    \"changeExportBackground\",\n                    elements,\n                    appState,\n                    syncActionResult\n                  )}\n                  {someElementIsSelected && (\n                    <div>\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={exportSelected}\n                          onChange={e =>\n                            setExportSelected(e.currentTarget.checked)\n                          }\n                        />{\" \"}\n                        Only selected\n                      </label>\n                    </div>\n                  )}\n                </Stack.Col>\n              </div>\n            </Island>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport rough from \"roughjs/bin/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport {\n  newElement,\n  duplicateElement,\n  resizeTest,\n  isTextElement,\n  textWysiwyg,\n  getElementAbsoluteCoords\n} from \"./element\";\nimport {\n  clearSelection,\n  deleteSelectedElements,\n  getElementsWithinSelection,\n  isOverScrollBars,\n  restoreFromLocalStorage,\n  saveToLocalStorage,\n  getElementAtPosition,\n  createScene,\n  getElementContainingPosition,\n  hasBackground,\n  hasStroke,\n  hasText,\n  exportCanvas\n} from \"./scene\";\n\nimport { renderScene } from \"./renderer\";\nimport { AppState } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"./element/types\";\n\nimport { isInputLike, measureText, debounce, capitalizeString } from \"./utils\";\nimport { KEYS, META_KEY, isArrowKey } from \"./keys\";\n\nimport { findShapeByKey, shapesShortcutKeys, SHAPES } from \"./shapes\";\nimport { createHistory } from \"./history\";\n\nimport ContextMenu from \"./components/ContextMenu\";\n\nimport \"./styles.scss\";\nimport { getElementWithResizeHandler } from \"./element/resizeTest\";\nimport {\n  ActionManager,\n  actionDeleteSelected,\n  actionSendBackward,\n  actionBringForward,\n  actionSendToBack,\n  actionBringToFront,\n  actionSelectAll,\n  actionChangeStrokeColor,\n  actionChangeBackgroundColor,\n  actionChangeOpacity,\n  actionChangeStrokeWidth,\n  actionChangeFillStyle,\n  actionChangeSloppiness,\n  actionChangeFontSize,\n  actionChangeFontFamily,\n  actionChangeViewBackgroundColor,\n  actionClearCanvas,\n  actionChangeProjectName,\n  actionChangeExportBackground,\n  actionLoadScene,\n  actionSaveScene,\n  actionCopyStyles,\n  actionPasteStyles\n} from \"./actions\";\nimport { Action, ActionResult } from \"./actions/types\";\nimport { getDefaultAppState } from \"./appState\";\nimport { Island } from \"./components/Island\";\nimport Stack from \"./components/Stack\";\nimport { FixedSideContainer } from \"./components/FixedSideContainer\";\nimport { ToolIcon } from \"./components/ToolIcon\";\nimport { ExportDialog } from \"./components/ExportDialog\";\n\nlet { elements } = createScene();\nconst { history } = createHistory();\n\nconst CANVAS_WINDOW_OFFSET_LEFT = 0;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction addTextElement(\n  element: ExcalidrawTextElement,\n  text: string,\n  font: string\n) {\n  resetCursor();\n  if (text === null || text === \"\") {\n    return false;\n  }\n\n  const metrics = measureText(text, font);\n  element.text = text;\n  element.font = font;\n  // Center the text\n  element.x -= metrics.width / 2;\n  element.y -= metrics.height / 2;\n  element.width = metrics.width;\n  element.height = metrics.height;\n  element.baseline = metrics.baseline;\n\n  return true;\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\nconst TEXT_TO_CENTER_SNAP_THRESHOLD = 30;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nexport function viewportCoordsToSceneCoords(\n  { clientX, clientY }: { clientX: number; clientY: number },\n  { scrollX, scrollY }: { scrollX: number; scrollY: number }\n) {\n  const x = clientX - CANVAS_WINDOW_OFFSET_LEFT - scrollX;\n  const y = clientY - CANVAS_WINDOW_OFFSET_TOP - scrollY;\n  return { x, y };\n}\n\nexport class App extends React.Component<{}, AppState> {\n  canvas: HTMLCanvasElement | null = null;\n  rc: RoughCanvas | null = null;\n\n  actionManager: ActionManager = new ActionManager();\n  canvasOnlyActions: Array<Action>;\n  constructor(props: any) {\n    super(props);\n    this.actionManager.registerAction(actionDeleteSelected);\n    this.actionManager.registerAction(actionSendToBack);\n    this.actionManager.registerAction(actionBringToFront);\n    this.actionManager.registerAction(actionSendBackward);\n    this.actionManager.registerAction(actionBringForward);\n    this.actionManager.registerAction(actionSelectAll);\n\n    this.actionManager.registerAction(actionChangeStrokeColor);\n    this.actionManager.registerAction(actionChangeBackgroundColor);\n    this.actionManager.registerAction(actionChangeFillStyle);\n    this.actionManager.registerAction(actionChangeStrokeWidth);\n    this.actionManager.registerAction(actionChangeOpacity);\n    this.actionManager.registerAction(actionChangeSloppiness);\n    this.actionManager.registerAction(actionChangeFontSize);\n    this.actionManager.registerAction(actionChangeFontFamily);\n\n    this.actionManager.registerAction(actionChangeViewBackgroundColor);\n    this.actionManager.registerAction(actionClearCanvas);\n\n    this.actionManager.registerAction(actionChangeProjectName);\n    this.actionManager.registerAction(actionChangeExportBackground);\n    this.actionManager.registerAction(actionSaveScene);\n    this.actionManager.registerAction(actionLoadScene);\n\n    this.actionManager.registerAction(actionCopyStyles);\n    this.actionManager.registerAction(actionPasteStyles);\n\n    this.canvasOnlyActions = [actionSelectAll];\n  }\n\n  private syncActionResult = (res: ActionResult) => {\n    if (res.elements !== undefined) {\n      elements = res.elements;\n      this.forceUpdate();\n    }\n\n    if (res.appState !== undefined) {\n      this.setState({ ...res.appState });\n    }\n  };\n\n  private onCut = (e: ClipboardEvent) => {\n    if (isInputLike(e.target)) return;\n    e.clipboardData?.setData(\n      \"text/plain\",\n      JSON.stringify(\n        elements\n          .filter(element => element.isSelected)\n          .map(({ shape, ...el }) => el)\n      )\n    );\n    elements = deleteSelectedElements(elements);\n    this.forceUpdate();\n    e.preventDefault();\n  };\n  private onCopy = (e: ClipboardEvent) => {\n    if (isInputLike(e.target)) return;\n    e.clipboardData?.setData(\n      \"text/plain\",\n      JSON.stringify(\n        elements\n          .filter(element => element.isSelected)\n          .map(({ shape, ...el }) => el)\n      )\n    );\n    e.preventDefault();\n  };\n  private onPaste = (e: ClipboardEvent) => {\n    if (isInputLike(e.target)) return;\n    const paste = e.clipboardData?.getData(\"text\") || \"\";\n    this.addElementsFromPaste(paste);\n    e.preventDefault();\n  };\n\n  public componentDidMount() {\n    document.addEventListener(\"copy\", this.onCopy);\n    document.addEventListener(\"paste\", this.onPaste);\n    document.addEventListener(\"cut\", this.onCut);\n\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    document.addEventListener(\"mousemove\", this.getCurrentCursorPosition);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const { elements: newElements, appState } = restoreFromLocalStorage();\n\n    if (newElements) {\n      elements = newElements;\n    }\n\n    if (appState) {\n      this.setState(appState);\n    } else {\n      this.forceUpdate();\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"copy\", this.onCopy);\n    document.removeEventListener(\"paste\", this.onPaste);\n    document.removeEventListener(\"cut\", this.onCut);\n\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    document.removeEventListener(\n      \"mousemove\",\n      this.getCurrentCursorPosition,\n      false\n    );\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = getDefaultAppState();\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private getCurrentCursorPosition = (e: MouseEvent) => {\n    this.setState({ cursorX: e.x, cursorY: e.y });\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (event.key === KEYS.ESCAPE) {\n      elements = clearSelection(elements);\n      this.forceUpdate();\n      this.setState({ elementType: \"selection\" });\n      if (window.document.activeElement instanceof HTMLElement) {\n        window.document.activeElement.blur();\n      }\n      event.preventDefault();\n      return;\n    }\n    if (isInputLike(event.target)) return;\n\n    const data = this.actionManager.handleKeyDown(event, elements, this.state);\n    this.syncActionResult(data);\n\n    if (data.elements !== undefined || data.appState !== undefined) {\n      return;\n    }\n\n    if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements = elements.map(el => {\n        if (el.isSelected) {\n          const element = { ...el };\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n          return element;\n        }\n        return el;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (\n      shapesShortcutKeys.includes(event.key.toLowerCase()) &&\n      !event.ctrlKey &&\n      !event.shiftKey &&\n      !event.altKey &&\n      !event.metaKey\n    ) {\n      this.setState({ elementType: findShapeByKey(event.key) });\n    } else if (event[META_KEY] && event.code === \"KeyZ\") {\n      if (event.shiftKey) {\n        // Redo action\n        const data = history.redoOnce();\n        if (data !== null) {\n          elements = data;\n        }\n      } else {\n        // undo action\n        const data = history.undoOnce();\n        if (data !== null) {\n          elements = data;\n        }\n      }\n      this.forceUpdate();\n      event.preventDefault();\n    }\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private copyToClipboard = () => {\n    if (navigator.clipboard) {\n      const text = JSON.stringify(\n        elements\n          .filter(element => element.isSelected)\n          .map(({ shape, ...el }) => el)\n      );\n      navigator.clipboard.writeText(text);\n    }\n  };\n\n  private pasteFromClipboard = () => {\n    if (navigator.clipboard) {\n      navigator.clipboard\n        .readText()\n        .then(text => this.addElementsFromPaste(text));\n    }\n  };\n\n  private renderSelectedShapeActions(elements: readonly ExcalidrawElement[]) {\n    const selectedElements = elements.filter(el => el.isSelected);\n    if (selectedElements.length === 0) {\n      return null;\n    }\n\n    return (\n      <Island padding={4}>\n        <div className=\"panelColumn\">\n          {this.actionManager.renderAction(\n            \"changeStrokeColor\",\n            elements,\n            this.state,\n            this.syncActionResult\n          )}\n\n          {hasBackground(elements) && (\n            <>\n              {this.actionManager.renderAction(\n                \"changeBackgroundColor\",\n                elements,\n                this.state,\n                this.syncActionResult\n              )}\n\n              {this.actionManager.renderAction(\n                \"changeFillStyle\",\n                elements,\n                this.state,\n                this.syncActionResult\n              )}\n              <hr />\n            </>\n          )}\n\n          {hasStroke(elements) && (\n            <>\n              {this.actionManager.renderAction(\n                \"changeStrokeWidth\",\n                elements,\n                this.state,\n                this.syncActionResult\n              )}\n\n              {this.actionManager.renderAction(\n                \"changeSloppiness\",\n                elements,\n                this.state,\n                this.syncActionResult\n              )}\n              <hr />\n            </>\n          )}\n\n          {hasText(elements) && (\n            <>\n              {this.actionManager.renderAction(\n                \"changeFontSize\",\n                elements,\n                this.state,\n                this.syncActionResult\n              )}\n\n              {this.actionManager.renderAction(\n                \"changeFontFamily\",\n                elements,\n                this.state,\n                this.syncActionResult\n              )}\n              <hr />\n            </>\n          )}\n\n          {this.actionManager.renderAction(\n            \"changeOpacity\",\n            elements,\n            this.state,\n            this.syncActionResult\n          )}\n\n          {this.actionManager.renderAction(\n            \"deleteSelectedElements\",\n            elements,\n            this.state,\n            this.syncActionResult\n          )}\n        </div>\n      </Island>\n    );\n  }\n\n  private renderShapesSwitcher() {\n    return (\n      <>\n        {SHAPES.map(({ value, icon }) => (\n          <ToolIcon\n            key={value}\n            type=\"radio\"\n            icon={icon}\n            checked={this.state.elementType === value}\n            name=\"editor-current-shape\"\n            title={`${capitalizeString(value)} — ${capitalizeString(value)[0]}`}\n            onChange={() => {\n              this.setState({ elementType: value });\n              elements = clearSelection(elements);\n              document.documentElement.style.cursor =\n                value === \"text\" ? \"text\" : \"crosshair\";\n              this.forceUpdate();\n            }}\n          ></ToolIcon>\n        ))}\n      </>\n    );\n  }\n\n  private renderCanvasActions() {\n    return (\n      <Stack.Col gap={4}>\n        <Stack.Row gap={1}>\n          {this.actionManager.renderAction(\n            \"loadScene\",\n            elements,\n            this.state,\n            this.syncActionResult\n          )}\n          {this.actionManager.renderAction(\n            \"saveScene\",\n            elements,\n            this.state,\n            this.syncActionResult\n          )}\n          <ExportDialog\n            elements={elements}\n            appState={this.state}\n            actionManager={this.actionManager}\n            syncActionResult={this.syncActionResult}\n            onExportToPng={exportedElements => {\n              if (this.canvas)\n                exportCanvas(\"png\", exportedElements, this.canvas, this.state);\n            }}\n            onExportToClipboard={exportedElements => {\n              if (this.canvas)\n                exportCanvas(\n                  \"clipboard\",\n                  exportedElements,\n                  this.canvas,\n                  this.state\n                );\n            }}\n          />\n          {this.actionManager.renderAction(\n            \"clearCanvas\",\n            elements,\n            this.state,\n            this.syncActionResult\n          )}\n        </Stack.Row>\n        {this.actionManager.renderAction(\n          \"changeViewBackgroundColor\",\n          elements,\n          this.state,\n          this.syncActionResult\n        )}\n      </Stack.Col>\n    );\n  }\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div className=\"container\">\n        <FixedSideContainer side=\"top\">\n          <div className=\"App-menu App-menu_top\">\n            <Stack.Col gap={4} align=\"end\">\n              <div className=\"App-right-menu\">\n                <Island padding={4}>{this.renderCanvasActions()}</Island>\n              </div>\n              <div className=\"App-right-menu\">\n                {this.renderSelectedShapeActions(elements)}\n              </div>\n            </Stack.Col>\n            <Stack.Col gap={4} align=\"start\">\n              <Island padding={1}>\n                <Stack.Row gap={1}>{this.renderShapesSwitcher()}</Stack.Row>\n              </Island>\n            </Stack.Col>\n            <div />\n          </div>\n        </FixedSideContainer>\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.canvas === null) {\n              this.canvas = canvas;\n              this.rc = rough.canvas(this.canvas!);\n            }\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onContextMenu={e => {\n            e.preventDefault();\n\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const element = getElementAtPosition(elements, x, y);\n            if (!element) {\n              ContextMenu.push({\n                options: [\n                  navigator.clipboard && {\n                    label: \"Paste\",\n                    action: () => this.pasteFromClipboard()\n                  },\n                  ...this.actionManager.getContextMenuItems(\n                    elements,\n                    this.state,\n                    this.syncActionResult,\n                    action => this.canvasOnlyActions.includes(action)\n                  )\n                ],\n                top: e.clientY,\n                left: e.clientX\n              });\n              return;\n            }\n\n            if (!element.isSelected) {\n              elements = clearSelection(elements);\n              element.isSelected = true;\n              this.forceUpdate();\n            }\n\n            ContextMenu.push({\n              options: [\n                navigator.clipboard && {\n                  label: \"Copy\",\n                  action: this.copyToClipboard\n                },\n                navigator.clipboard && {\n                  label: \"Paste\",\n                  action: () => this.pasteFromClipboard()\n                },\n                ...this.actionManager.getContextMenuItems(\n                  elements,\n                  this.state,\n                  this.syncActionResult,\n                  action => !this.canvasOnlyActions.includes(action)\n                )\n              ],\n              top: e.clientY,\n              left: e.clientX\n            });\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              elements,\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n\n            type ResizeTestType = ReturnType<typeof resizeTest>;\n            let resizeHandle: ResizeTestType = false;\n            let isResizingElements = false;\n            let draggingOccured = false;\n            let hitElement: ExcalidrawElement | null = null;\n            let elementIsAddedToSelection = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = getElementWithResizeHandler(\n                elements,\n                { x, y },\n                this.state\n              );\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement.element : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeElement.resizeHandle;\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                hitElement = getElementAtPosition(elements, x, y);\n                // clear selection if shift is not clicked\n                if (!hitElement?.isSelected && !e.shiftKey) {\n                  elements = clearSelection(elements);\n                }\n\n                // If we click on something\n                if (hitElement) {\n                  // deselect if item is selected\n                  // if shift is not clicked, this will always return true\n                  // otherwise, it will trigger selection based on current\n                  // state of the box\n                  if (!hitElement.isSelected) {\n                    hitElement.isSelected = true;\n                    elementIsAddedToSelection = true;\n                  }\n\n                  // We duplicate the selected element if alt is pressed on Mouse down\n                  if (e.altKey) {\n                    elements = [\n                      ...elements.map(element => ({\n                        ...element,\n                        isSelected: false\n                      })),\n                      ...elements\n                        .filter(element => element.isSelected)\n                        .map(element => {\n                          const newElement = duplicateElement(element);\n                          newElement.isSelected = true;\n                          return newElement;\n                        })\n                    ];\n                  }\n                }\n              }\n            } else {\n              elements = clearSelection(elements);\n            }\n\n            if (isTextElement(element)) {\n              let textX = e.clientX;\n              let textY = e.clientY;\n              if (!e.altKey) {\n                const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n                  x,\n                  y\n                );\n                if (snappedToCenterPosition) {\n                  element.x = snappedToCenterPosition.elementCenterX;\n                  element.y = snappedToCenterPosition.elementCenterY;\n                  textX = snappedToCenterPosition.wysiwygX;\n                  textY = snappedToCenterPosition.wysiwygY;\n                }\n              }\n\n              textWysiwyg({\n                initText: \"\",\n                x: textX,\n                y: textY,\n                strokeColor: this.state.currentItemStrokeColor,\n                font: this.state.currentItemFont,\n                onSubmit: text => {\n                  addTextElement(element, text, this.state.currentItemFont);\n                  elements = [...elements, { ...element, isSelected: true }];\n                  this.setState({\n                    draggingElement: null,\n                    elementType: \"selection\"\n                  });\n                }\n              });\n              this.setState({ elementType: \"selection\" });\n              return;\n            }\n\n            if (this.state.elementType === \"text\") {\n              elements = [...elements, { ...element, isSelected: true }];\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n            } else {\n              elements = [...elements, element];\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n                  let deltaX = 0;\n                  let deltaY = 0;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        deltaX = lastX - x;\n                        element.width += deltaX;\n                        element.x -= deltaX;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          const deltaY = lastY - y;\n                          element.height += deltaY;\n                          element.y -= deltaY;\n                        }\n                        break;\n                      case \"ne\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          deltaY = lastY - y;\n                          element.height += deltaY;\n                          element.y -= deltaY;\n                        }\n                        break;\n                      case \"sw\":\n                        deltaX = lastX - x;\n                        element.width += deltaX;\n                        element.x -= deltaX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        deltaY = lastY - y;\n                        element.height += deltaY;\n                        element.y -= deltaY;\n                        break;\n                      case \"w\":\n                        deltaX = lastX - x;\n                        element.width += deltaX;\n                        element.x -= deltaX;\n                        break;\n                      case \"s\":\n                        element.height += y - lastY;\n                        break;\n                      case \"e\":\n                        element.width += x - lastX;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                    el.shape = null;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (hitElement?.isSelected) {\n                // Marking that click was used for dragging to check\n                // if elements should be deselected on mouseup\n                draggingOccured = true;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height =\n                e.shiftKey && this.state.elementType !== \"selection\"\n                  ? Math.abs(width) * Math.sign(height)\n                  : height;\n              draggingElement.shape = null;\n\n              if (this.state.elementType === \"selection\") {\n                if (!e.shiftKey) {\n                  elements = clearSelection(elements);\n                }\n                const elementsWithinSelection = getElementsWithinSelection(\n                  elements,\n                  draggingElement\n                );\n                elementsWithinSelection.forEach(element => {\n                  element.isSelected = true;\n                });\n              }\n              // We don't want to save history when moving an element\n              history.skipRecording();\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // If click occured on already selected element\n              // it is needed to remove selection from other elements\n              // or if SHIFT or META key pressed remove selection\n              // from hitted element\n              //\n              // If click occured and elements were dragged or some element\n              // was added to selection (on mousedown phase) we need to keep\n              // selection unchanged\n              if (\n                hitElement &&\n                !draggingOccured &&\n                !elementIsAddedToSelection\n              ) {\n                if (e.shiftKey) {\n                  hitElement.isSelected = false;\n                } else {\n                  elements = clearSelection(elements);\n                  hitElement.isSelected = true;\n                }\n              }\n\n              if (draggingElement === null) {\n                // if no element is clicked, clear the selection and redraw\n                elements = clearSelection(elements);\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                elements = elements.slice(0, -1);\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n\n              history.resumeRecording();\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            history.skipRecording();\n            this.forceUpdate();\n          }}\n          onDoubleClick={e => {\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const elementAtPosition = getElementAtPosition(elements, x, y);\n\n            const element = newElement(\n              \"text\",\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            ) as ExcalidrawTextElement;\n\n            let initText = \"\";\n            let textX = e.clientX;\n            let textY = e.clientY;\n\n            if (elementAtPosition && isTextElement(elementAtPosition)) {\n              elements = elements.filter(\n                element => element.id !== elementAtPosition.id\n              );\n              this.forceUpdate();\n\n              Object.assign(element, elementAtPosition);\n              // x and y will change after calling addTextElement function\n              element.x = elementAtPosition.x + elementAtPosition.width / 2;\n              element.y = elementAtPosition.y + elementAtPosition.height / 2;\n              initText = elementAtPosition.text;\n              textX =\n                this.state.scrollX +\n                elementAtPosition.x +\n                CANVAS_WINDOW_OFFSET_LEFT +\n                elementAtPosition.width / 2;\n              textY =\n                this.state.scrollY +\n                elementAtPosition.y +\n                CANVAS_WINDOW_OFFSET_TOP +\n                elementAtPosition.height / 2;\n            } else if (!e.altKey) {\n              const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n                x,\n                y\n              );\n\n              if (snappedToCenterPosition) {\n                element.x = snappedToCenterPosition.elementCenterX;\n                element.y = snappedToCenterPosition.elementCenterY;\n                textX = snappedToCenterPosition.wysiwygX;\n                textY = snappedToCenterPosition.wysiwygY;\n              }\n            }\n\n            textWysiwyg({\n              initText,\n              x: textX,\n              y: textY,\n              strokeColor: element.strokeColor,\n              font: element.font || this.state.currentItemFont,\n              onSubmit: text => {\n                addTextElement(\n                  element,\n                  text,\n                  element.font || this.state.currentItemFont\n                );\n                elements = [...elements, { ...element, isSelected: true }];\n                this.setState({\n                  draggingElement: null,\n                  elementType: \"selection\"\n                });\n              }\n            });\n          }}\n          onMouseMove={e => {\n            const hasDeselectedButton = Boolean(e.buttons);\n            if (hasDeselectedButton || this.state.elementType !== \"selection\") {\n              return;\n            }\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n            const selectedElements = elements.filter(e => e.isSelected).length;\n            if (selectedElements === 1) {\n              const resizeElement = getElementWithResizeHandler(\n                elements,\n                { x, y },\n                this.state\n              );\n              if (resizeElement && resizeElement.resizeHandle) {\n                document.documentElement.style.cursor = `${resizeElement.resizeHandle}-resize`;\n                return;\n              }\n            }\n            const hitElement = getElementAtPosition(elements, x, y);\n            document.documentElement.style.cursor = hitElement ? \"move\" : \"\";\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  private addElementsFromPaste = (paste: string) => {\n    let parsedElements;\n    try {\n      parsedElements = JSON.parse(paste);\n    } catch (e) {}\n    if (\n      Array.isArray(parsedElements) &&\n      parsedElements.length > 0 &&\n      parsedElements[0].type // need to implement a better check here...\n    ) {\n      elements = clearSelection(elements);\n\n      let subCanvasX1 = Infinity;\n      let subCanvasX2 = 0;\n      let subCanvasY1 = Infinity;\n      let subCanvasY2 = 0;\n\n      const minX = Math.min(...parsedElements.map(element => element.x));\n      const minY = Math.min(...parsedElements.map(element => element.y));\n\n      const distance = (x: number, y: number) => {\n        return Math.abs(x > y ? x - y : y - x);\n      };\n\n      parsedElements.forEach(parsedElement => {\n        const [x1, y1, x2, y2] = getElementAbsoluteCoords(parsedElement);\n        subCanvasX1 = Math.min(subCanvasX1, x1);\n        subCanvasY1 = Math.min(subCanvasY1, y1);\n        subCanvasX2 = Math.max(subCanvasX2, x2);\n        subCanvasY2 = Math.max(subCanvasY2, y2);\n      });\n\n      const elementsCenterX = distance(subCanvasX1, subCanvasX2) / 2;\n      const elementsCenterY = distance(subCanvasY1, subCanvasY2) / 2;\n\n      const dx =\n        this.state.cursorX -\n        this.state.scrollX -\n        CANVAS_WINDOW_OFFSET_LEFT -\n        elementsCenterX;\n      const dy =\n        this.state.cursorY -\n        this.state.scrollY -\n        CANVAS_WINDOW_OFFSET_TOP -\n        elementsCenterY;\n\n      elements = [\n        ...elements,\n        ...parsedElements.map(parsedElement => {\n          const duplicate = duplicateElement(parsedElement);\n          duplicate.x += dx - minX;\n          duplicate.y += dy - minY;\n          return duplicate;\n        })\n      ];\n      this.forceUpdate();\n    }\n  };\n\n  private getTextWysiwygSnappedToCenterPosition(x: number, y: number) {\n    const elementClickedInside = getElementContainingPosition(elements, x, y);\n    if (elementClickedInside) {\n      const elementCenterX =\n        elementClickedInside.x + elementClickedInside.width / 2;\n      const elementCenterY =\n        elementClickedInside.y + elementClickedInside.height / 2;\n      const distanceToCenter = Math.hypot(\n        x - elementCenterX,\n        y - elementCenterY\n      );\n      const isSnappedToCenter =\n        distanceToCenter < TEXT_TO_CENTER_SNAP_THRESHOLD;\n      if (isSnappedToCenter) {\n        const wysiwygX =\n          this.state.scrollX +\n          elementClickedInside.x +\n          CANVAS_WINDOW_OFFSET_LEFT +\n          elementClickedInside.width / 2;\n        const wysiwygY =\n          this.state.scrollY +\n          elementClickedInside.y +\n          CANVAS_WINDOW_OFFSET_TOP +\n          elementClickedInside.height / 2;\n        return { wysiwygX, wysiwygY, elementCenterX, elementCenterY };\n      }\n    }\n  }\n\n  private saveDebounced = debounce(() => {\n    saveToLocalStorage(elements, this.state);\n  }, 300);\n\n  componentDidUpdate() {\n    renderScene(elements, this.rc!, this.canvas!, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    this.saveDebounced();\n    if (history.isRecording()) {\n      history.pushEntry(history.generateCurrentEntry(elements));\n    }\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}