{"version":3,"sources":["random.ts","element/newElement.ts","math.ts","element/bounds.ts","element/handlerRectangles.ts","element/collision.ts","element/resizeTest.ts","element/typeChecks.ts","keys.ts","element/textWysiwyg.tsx","utils.ts","element/textElement.ts","scene/scrollbars.ts","scene/selection.ts","renderer/roundRect.ts","renderer/renderElement.ts","renderer/renderScene.ts","scene/data.ts","scene/comparisons.ts","scene/createScene.ts","shapes.tsx","history.ts","components/Popover.tsx","components/ContextMenu.tsx","actions/manager.tsx","actions/actionDeleteSelected.tsx","zindex.ts","actions/actionZindex.tsx","actions/actionSelectAll.ts","components/ButtonSelect.tsx","components/ColorPicker.tsx","components/panels/PanelColor.tsx","actions/actionProperties.tsx","appState.ts","actions/actionCanvas.tsx","components/EditableText.tsx","actions/actionExport.tsx","actions/actionStyles.ts","components/Panel.tsx","components/panels/PanelTools.tsx","components/panels/PanelSelection.tsx","components/panels/PanelCanvas.tsx","components/panels/PanelExport.tsx","components/SidePanel.tsx","index.tsx"],"names":["randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","newElement","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","width","height","element","id","nanoid","isSelected","shape","duplicateElement","copy","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","rotate","angle","cos","sin","getElementAbsoluteCoords","getDiamondPoints","topX","rightX","rightY","getArrowPoints","distance","minSize","min","xs","ys","PI","x3","y3","handlerRectangles","scrollX","scrollY","elementX1","elementX2","elementY1","elementY2","handlers","marginX","marginY","abs","nw","se","hitTest","px","py","tx","ty","a","b","forEach","ex","ey","rx","ry","qx","qy","r","q","max","t","topY","bottomX","bottomY","leftX","leftY","x4","y4","console","warn","Error","resizeTest","filter","Object","keys","key","handler","length","getElementWithResizeHandler","elements","reduce","resizeHandle","isTextElement","KEYS","META_KEY","test","window","navigator","platform","textWysiwyg","initText","font","onSubmit","editable","document","createElement","stopEvent","ev","stopPropagation","handleSubmit","innerText","cleanup","onblur","onkeydown","onpaste","removeEventListener","body","removeChild","contentEditable","tabIndex","dataset","assign","style","color","position","top","left","transform","textAlign","display","padding","outline","whiteSpace","minHeight","preventDefault","text","clipboardData","getData","replace","textContent","addEventListener","appendChild","focus","selection","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","capitalizeString","str","charAt","toUpperCase","slice","isInputLike","target","HTMLElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","measureText","line","offsetWidth","offsetHeight","span","overflow","baseline","offsetTop","redrawTextBoundingBox","metrics","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","clearSelection","newElements","deleteSelectedElements","el","getSelectedIndices","selectedIndices","index","push","someElementIsSelected","some","getSelectedAttribute","getAttribute","attributes","Array","from","Set","map","roundRect","context","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","renderElement","rc","generator","fillRect","rectangle","undefined","globalAlpha","draw","polygon","ellipse","options","fillText","actualBoundingBoxAscent","renderScene","canvas","sceneState","offsetX","offsetY","renderScrollbars","renderSelection","getContext","viewBackgroundColor","clearRect","translate","selectedElements","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","devicePixelRatio","strokeStyle","scrollBar","saveFile","name","data","link","setAttribute","click","remove","restore","savedElements","savedState","appState","getElementAtPosition","hitElement","i","SHAPES","icon","viewBox","d","value","shapesShortcutKeys","SceneHistory","recording","stateHistory","redoStack","JSON","stringify","newEntry","this","entry","skipRecording","parse","splice","currentEntry","generateCurrentEntry","entryToRestore","pop","restoreEntry","Popover","children","onCloseRequest","className","onClick","onContextMenu","e","contextMenuNode","ContextMenu","option","idx","ContextMenuOption","label","action","getContextMenuNode","div","handleClose","unmountComponentAtNode","params","of","render","ActionManager","actions","updater","event","sort","keyPriority","keyTest","perform","contextMenuOrder","contextItemLabel","PanelComponent","updateData","formState","actionDeleteSelected","swap","indexA","indexB","moveOneLeft","indicesToMove","isSorted","moveOneRight","reversedIndicesToMove","moveAllLeft","leftMostElements","reverse","concat","pos","moveAllRight","rightMostElements","actionSendBackward","shiftKey","altKey","code","actionBringForward","actionSendToBack","actionBringToFront","actionSelectAll","elem","ButtonSelect","onChange","Picker","colors","React","useState","innerValue","setInnerValue","useEffect","title","spellCheck","match","clear","ColorPicker","isActive","setActive","Suspense","fallback","changedColor","onPaste","canvasBackground","elementBackground","elementStroke","PanelColor","colorType","onColorChange","colorValue","changeProperty","callback","actionChangeStrokeColor","currentItemStrokeColor","actionChangeBackgroundColor","currentItemBackgroundColor","actionChangeFillStyle","actionChangeStrokeWidth","actionChangeSloppiness","actionChangeOpacity","actionChangeFontSize","split","actionChangeFontFamily","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","getMinutes","secs","getSeconds","getDateTime","getDefaultAppState","draggingElement","resizingElement","elementType","exportBackground","currentItemFont","cursorX","cursorY","actionChangeViewBackgroundColor","actionClearCanvas","confirm","EditableText","props","state","edit","setState","maxLength","handleEdit","onBlur","handleBlur","onKeyDown","autoFocus","Component","actionChangeProjectName","actionChangeExportBackground","checked","actionSaveScene","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","actionLoadScene","loadedElements","input","reader","FileReader","accept","onchange","files","readAsText","alert","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","then","copiedStyles","actionCopyStyles","find","actionPasteStyles","pastedElement","Panel","defaultCollapsed","hide","collapsed","setCollapsed","PanelTools","activeTool","onToolChange","PanelSelection","actionManager","syncActionResult","renderAction","PanelCanvas","ClipboardIcon","probablySupportsClipboard","HTMLCanvasElement","prototype","clipboard","PanelExport","onExportCanvas","SidePanel","hasBackground","hasStroke","hasText","exportPadding","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","rough","toDataURL","toBlob","blob","async","write","ClipboardItem","err","exportCanvas","history","resetCursor","documentElement","cursor","addTextElement","lastCanvasWidth","lastCanvasHeight","lastMouseUp","viewportCoordsToSceneCoords","clientX","clientY","App","res","forceUpdate","onResize","getCurrentCursorPosition","activeElement","blur","keyCode","handleKeyDown","step","includes","toLowerCase","ctrlKey","metaKey","redoOnce","undoOnce","removeWheelEventListener","copyToClipboard","writeText","pasteFromClipboard","readText","addElementsFromPaste","handleWheel","deltaX","deltaY","paste","parsedElements","isArray","parsedElement","elementsCenterX","elementsCenterY","duplicate","saveDebounced","fn","timeout","handle","args","clearTimeout","setTimeout","debounce","localStorage","setItem","registerAction","getItem","restoreFromLocalStorage","innerWidth","innerHeight","onCut","setData","onCopy","ref","passive","scale","getContextMenuItems","onMouseDown","button","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","isResizingElements","draggingOccured","elementIsAddedToSelection","resizeElement","textX","textY","snappedToCenterPosition","getTextWysiwygSnappedToCenterPosition","elementCenterX","elementCenterY","wysiwygX","wysiwygY","lastX","lastY","onMouseMove","sign","selectionX1","selectionY1","selectionX2","selectionY2","setSelection","onMouseUp","resumeRecording","onDoubleClick","elementAtPosition","Boolean","buttons","elementClickedInside","getElementContainingPosition","isRecording","pushEntry","clearRedoStack","rootElement","getElementById","ReactDOM"],"mappings":"0UAIO,SAASA,IACd,OAAOC,KAAKC,MAAMD,KAAKE,SAALF,KAAA,IAAgB,EAAK,KAMlC,SAASG,EAAwBC,EAAcC,GACpD,IAAMH,EAASF,KAAKE,OACpBF,KAAKE,OAZY,SAACE,GAAD,OAAkB,kBACjC,WAAK,IAAK,GAAMA,EAAOJ,KAAKM,KAAK,MAAOF,KAA1C,SAAoD,EAAK,KAW3CG,CAAIH,GAClB,IAAMI,EAASH,IAEf,OADAL,KAAKE,OAASA,EACPM,E,qBCZF,SAASC,EACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGC,IAFDC,EAEA,uDAFQ,EACRC,EACA,0DADS,EAEHC,EAAU,CACdC,GAAIC,MACJb,OACAC,IACAC,IACAO,QACAC,SACAP,cACAC,kBACAC,YACAC,cACAC,YACAC,UACAM,YAAY,EACZpB,KAAML,IACN0B,MAAO,MAET,OAAOJ,EAGF,SAASK,EAAiBL,GAC/B,IAAMM,EAAI,eAAQN,GAIlB,cAHOM,EAAKF,MACZE,EAAKL,GAAKC,MACVI,EAAKvB,KAAOL,IACL4B,ECzCF,SAASC,EACdjB,EACAC,EACAiB,EACAC,EACAC,EACAC,GAEA,IAaIC,EAAIC,EAXFC,EAAIJ,EAAKF,EACTO,EAAIJ,EAAKF,EAGTO,EAAYF,EAAIA,EAAIC,EAAIA,EAC1BE,GAAS,EACK,IAAdD,IAEFC,IAVQ3B,EAAIkB,GAKEM,GAJNvB,EAAIkB,GAIUM,GAKRC,GAIZC,EAAQ,GACVL,EAAKJ,EACLK,EAAKJ,GACIQ,EAAQ,GACjBL,EAAKF,EACLG,EAAKF,IAELC,EAAKJ,EAAKS,EAAQH,EAClBD,EAAKJ,EAAKQ,EAAQF,GAGpB,IAAMG,EAAK5B,EAAIsB,EACTO,EAAK5B,EAAIsB,EACf,OAAOlC,KAAKyC,MAAMF,EAAIC,GAGjB,SAASE,EACdb,EACAC,EACAC,EACAC,EACAW,GAKA,MAAO,EACJd,EAAKE,GAAM/B,KAAK4C,IAAID,IAAUb,EAAKE,GAAMhC,KAAK6C,IAAIF,GAASZ,GAC3DF,EAAKE,GAAM/B,KAAK6C,IAAIF,IAAUb,EAAKE,GAAMhC,KAAK4C,IAAID,GAASX,GC5CzD,SAASc,EAAyBzB,GACvC,MAAO,CACLA,EAAQF,OAAS,EAAIE,EAAQV,EAAIU,EAAQV,EAAIU,EAAQF,MACrDE,EAAQD,QAAU,EAAIC,EAAQT,EAAIS,EAAQT,EAAIS,EAAQD,OACtDC,EAAQF,OAAS,EAAIE,EAAQV,EAAIU,EAAQF,MAAQE,EAAQV,EACzDU,EAAQD,QAAU,EAAIC,EAAQT,EAAIS,EAAQD,OAASC,EAAQT,GAIxD,SAASmC,EAAiB1B,GAG/B,IAAM2B,EAAOhD,KAAKC,MAAMoB,EAAQF,MAAQ,GAAK,EAEvC8B,EAAS5B,EAAQF,MACjB+B,EAASlD,KAAKC,MAAMoB,EAAQD,OAAS,GAAK,EAMhD,MAAO,CAAC4B,EARK,EAQOC,EAAQC,EALZF,EACA3B,EAAQD,OAJX,EAMC8B,GAKT,SAASC,EAAe9B,GAC7B,IAEMU,EAAKV,EAAQF,MACba,EAAKX,EAAQD,OAGbgC,EAAWpD,KAAKyC,MAAMV,EANjB,EAM0BC,EAL1B,GAOLqB,EAAUrD,KAAKsD,IAHR,GAGkBF,EAAW,GACpCG,EAAKxB,GAAOA,EATP,GASkBqB,EAAYC,EACnCG,EAAKxB,GAAOA,EATP,GASkBoB,EAAYC,EAXgB,EAcxCX,EAAOa,EAAIC,EAAIzB,EAAIC,GADtB,GACoChC,KAAKyD,GAAM,KAdJ,mBAclDC,EAdkD,KAc9CC,EAd8C,OAexCjB,EAAOa,EAAIC,EAAIzB,EAAIC,EAFtB,GAEmChC,KAAKyD,GAAM,KAfH,mBAiBzD,MAAO,CAhBI,EACA,EAeK1B,EAAIC,EAAI0B,EAAIC,EAjB6B,WC1BpD,SAASC,EACdvC,EADK,GAGJ,IADCwC,EACF,EADEA,QAASC,EACX,EADWA,QAELC,EAAY1C,EAAQV,EACpBqD,EAAY3C,EAAQV,EAAIU,EAAQF,MAChC8C,EAAY5C,EAAQT,EACpBsD,EAAY7C,EAAQT,EAAIS,EAAQD,OAIhC+C,EAAW,GAEXC,EAAU/C,EAAQF,MAAQ,EAAI,GAAK,EACnCkD,EAAUhD,EAAQD,OAAS,EAAI,GAAK,EA2D1C,OAzDIpB,KAAKsE,IAAIN,EAAYD,GANL,KAOlBI,EAAQ,EAAQ,CACdJ,GAAaC,EAAYD,GAAa,EAAIF,EAAU,EACpDI,EAVW,EAUUH,EAAUO,EAC/B,EACA,GAGFF,EAAQ,EAAQ,CACdJ,GAAaC,EAAYD,GAAa,EAAIF,EAAU,EACpDK,EAjBW,EAiBUJ,EAAUO,EAC/B,EACA,IAIArE,KAAKsE,IAAIJ,EAAYD,GAtBL,KAuBlBE,EAAQ,EAAQ,CACdJ,EAzBW,EAyBUF,EAAUO,EAC/BH,GAAaC,EAAYD,GAAa,EAAIH,EAAU,EACpD,EACA,GAGFK,EAAQ,EAAQ,CACdH,EAhCW,EAgCUH,EAAUO,EAC/BH,GAAaC,EAAYD,GAAa,EAAIH,EAAU,EACpD,EACA,IAIJK,EAAQ,GAAS,CACfJ,EAxCa,EAwCQF,EAAUO,EAC/BH,EAzCa,EAyCQH,EAAUO,EAC/B,EACA,GAEFF,EAAQ,GAAS,CACfH,EA9Ca,EA8CQH,EAAUO,EAC/BH,EA/Ca,EA+CQH,EAAUO,EAC/B,EACA,GAEFF,EAAQ,GAAS,CACfJ,EApDa,EAoDQF,EAAUO,EAC/BF,EArDa,EAqDQJ,EAAUO,EAC/B,EACA,GAEFF,EAAQ,GAAS,CACfH,EA1Da,EA0DQH,EAAUO,EAC/BF,EA3Da,EA2DQJ,EAAUO,EAC/B,EACA,GAGmB,UAAjBhD,EAAQX,KACH,CACL6D,GAAIJ,EAASI,GACbC,GAAIL,EAASK,IAIVL,EC5EF,SAASM,EACdpD,EACAV,EACAC,GAMA,GAAqB,YAAjBS,EAAQX,KAAoB,CAE9B,IAAMgE,EAAK1E,KAAKsE,IAAI3D,EAAIU,EAAQV,EAAIU,EAAQF,MAAQ,GAC9CwD,EAAK3E,KAAKsE,IAAI1D,EAAIS,EAAQT,EAAIS,EAAQD,OAAS,GAEjDwD,EAAK,KACLC,EAAK,KAEHC,EAAI9E,KAAKsE,IAAIjD,EAAQF,OAAS,EAC9B4D,EAAI/E,KAAKsE,IAAIjD,EAAQD,QAAU,EAyBrC,MAvBA,CAAC,EAAG,EAAG,EAAG,GAAG4D,SAAQ,SAAArE,GACnB,IAAMsB,EAAK6C,EAAIF,EACT1C,EAAK6C,EAAIF,EAETI,GAAOH,EAAIA,EAAIC,EAAIA,GAAb,SAAkBH,EAAM,GAAKE,EACnCI,GAAOH,EAAIA,EAAID,EAAIA,GAAb,SAAkBD,EAAM,GAAKE,EAEnCI,EAAKlD,EAAKgD,EACVG,EAAKlD,EAAKgD,EAEVG,EAAKX,EAAKO,EACVK,EAAKX,EAAKO,EAEVK,EAAIvF,KAAKyC,MAAM2C,EAAID,GACnBK,EAAIxF,KAAKyC,MAAM6C,EAAID,GAEzBT,EAAK5E,KAAKsD,IAAI,EAAGtD,KAAKyF,IAAI,GAAKJ,EAAKE,EAAKC,EAAIP,GAAMH,IACnDD,EAAK7E,KAAKsD,IAAI,EAAGtD,KAAKyF,IAAI,GAAKH,EAAKC,EAAKC,EAAIN,GAAMH,IACnD,IAAMW,EAAI1F,KAAKyC,MAAMoC,EAAID,GACzBA,GAAMc,EACNb,GAAMa,KAGD1F,KAAKyC,MAAMqC,EAAIF,EAAKF,EAAIK,EAAIF,EAAKF,GApCpB,GAqCf,GAAqB,cAAjBtD,EAAQX,KAAsB,CAAC,IAAD,EACdoC,EAAyBzB,GADX,mBAChCQ,EADgC,KAC5BC,EAD4B,KACxBC,EADwB,KACpBC,EADoB,KAMvC,OACEJ,EAA+BjB,EAAGC,EAAGiB,EAAIC,EAAIC,EAAID,GA5C/B,IA6ClBF,EAA+BjB,EAAGC,EAAGmB,EAAID,EAAIC,EAAIC,GA7C/B,IA8ClBJ,EAA+BjB,EAAGC,EAAGmB,EAAIC,EAAIH,EAAIG,GA9C/B,IA+ClBJ,EAA+BjB,EAAGC,EAAGiB,EAAIG,EAAIH,EAAIC,GA/C/B,GAiDf,GAAqB,YAAjBT,EAAQX,KAAoB,CACrCC,GAAKU,EAAQV,EACbC,GAAKS,EAAQT,EAFwB,MAajCmC,EAAiB1B,GAbgB,mBAKnC2B,EALmC,KAMnC2C,EANmC,KAOnC1C,EAPmC,KAQnCC,EARmC,KASnC0C,EATmC,KAUnCC,EAVmC,KAWnCC,EAXmC,KAYnCC,EAZmC,KAerC,OACEnE,EAA+BjB,EAAGC,EAAGoC,EAAM2C,EAAM1C,EAAQC,GAjEvC,IAmElBtB,EAA+BjB,EAAGC,EAAGqC,EAAQC,EAAQ0C,EAASC,GAnE5C,IAqElBjE,EAA+BjB,EAAGC,EAAGgF,EAASC,EAASC,EAAOC,GArE5C,IAuElBnE,EAA+BjB,EAAGC,EAAGkF,EAAOC,EAAO/C,EAAM2C,GAvEvC,GA0Ef,GAAqB,UAAjBtE,EAAQX,KAAkB,CAAC,IAAD,EACIyC,EAAe9B,GADnB,mBAC9BQ,EAD8B,KAC1BC,EAD0B,KACtBC,EADsB,KAClBC,EADkB,KACd0B,EADc,KACVC,EADU,KACNqC,EADM,KACFC,EADE,KAMnC,OAEErE,EALFjB,GAAKU,EAAQV,EACbC,GAAKS,EAAQT,EAI0B8C,EAAIC,EAAI5B,EAAIC,GAlF/B,IAoFlBJ,EAA+BjB,EAAGC,EAAGiB,EAAIC,EAAIC,EAAIC,GApF/B,IAsFlBJ,EAA+BjB,EAAGC,EAAGoF,EAAIC,EAAIlE,EAAIC,GAtF/B,GAwFf,GAAqB,SAAjBX,EAAQX,KAAiB,CAAC,IAAD,EACToC,EAAyBzB,GADhB,mBAC3BQ,EAD2B,KACvBC,EADuB,KACnBC,EADmB,KACfC,EADe,KAGlC,OAAOrB,GAAKkB,GAAMlB,GAAKoB,GAAMnB,GAAKkB,GAAMlB,GAAKoB,EACxC,GAAqB,cAAjBX,EAAQX,KAEjB,OADAwF,QAAQC,KAAK,gEACN,EAEP,MAAM,IAAIC,MAAM,sBAAwB/E,EAAQX,MCzG7C,SAAS2F,EACdhF,EACAV,EACAC,EAHK,GAK0B,IAD7BiD,EAC4B,EAD5BA,QAASC,EACmB,EADnBA,QAEX,IAAKzC,EAAQG,YAA+B,SAAjBH,EAAQX,KAAiB,OAAO,EAE3D,IAAMyD,EAAWP,EAAkBvC,EAAS,CAAEwC,UAASC,YAEjDwC,EAASC,OAAOC,KAAKrC,GAAUmC,QAAO,SAAAG,GAC1C,IAAMC,EAAUvC,EAASsC,GAEzB,OACE9F,EAAIkD,GAAW6C,EAAQ,IACvB/F,EAAIkD,GAAW6C,EAAQ,GAAKA,EAAQ,IACpC9F,EAAIkD,GAAW4C,EAAQ,IACvB9F,EAAIkD,GAAW4C,EAAQ,GAAKA,EAAQ,MAIxC,OAAIJ,EAAOK,OAAS,GACXL,EAAO,GAMX,SAASM,EACdC,EADK,KAIJ,IAFClG,EAEF,EAFEA,EAAGC,EAEL,EAFKA,EACHiD,EACF,EADEA,QAASC,EACX,EADWA,QAEX,OAAO+C,EAASC,QAAO,SAACtG,EAAQa,GAC9B,GAAIb,EACF,OAAOA,EAET,IAAMuG,EAAeV,EAAWhF,EAASV,EAAGC,EAAG,CAC7CiD,UACAC,YAEF,OAAOiD,EAAe,CAAE1F,UAAS0F,gBAAiB,OACjD,MC/CE,SAASC,EACd3F,GAEA,MAAwB,SAAjBA,EAAQX,KCLV,IAAMuG,EACC,YADDA,EAEE,aAFFA,EAGC,YAHDA,EAID,UAJCA,EAKJ,QALIA,EAMH,SANGA,EAOH,SAPGA,EAQA,YAGAC,EAAW,uBAAuBC,KAAKC,OAAOC,UAAUC,UACjE,UACA,UCFG,SAASC,EAAT,GAOgB,IANrBC,EAMoB,EANpBA,SACA7G,EAKoB,EALpBA,EACAC,EAIoB,EAJpBA,EACAC,EAGoB,EAHpBA,YACA4G,EAEoB,EAFpBA,KACAC,EACoB,EADpBA,SAKMC,EAAWC,SAASC,cAAc,OA+CxC,SAASC,EAAUC,GACjBA,EAAGC,kBAGL,SAASC,IACHN,EAASO,WACXR,EAASC,EAASO,WAEpBC,IAGF,SAASA,IACPR,EAASS,OAAS,KAClBT,EAASU,UAAY,KACrBV,EAASW,QAAU,KACnBlB,OAAOmB,oBAAoB,QAAST,GAAW,GAC/CF,SAASY,KAAKC,YAAYd,GA9D5BA,EAASe,gBAAkB,OAC3Bf,EAASgB,SAAW,EACpBhB,EAASO,UAAYV,EACrBG,EAASiB,QAAQlI,KAAO,UAExB6F,OAAOsC,OAAOlB,EAASmB,MAAO,CAC5BC,MAAOlI,EACPmI,SAAU,WACVC,IAAKrI,EAAI,KACTsI,KAAMvI,EAAI,KACVwI,UAAW,wBACXC,UAAW,SACXC,QAAS,eACT5B,KAAMA,EACN6B,QAAS,MACTC,QAAS,cACTC,WAAY,SACZC,UAAW,QAGb9B,EAASU,UAAY,SAAAN,GACnB,GAAIA,EAAGtB,MAAQQ,EAEb,OADAc,EAAG2B,iBACClC,GACFG,EAASO,UAAYV,OACrBS,UAGFE,IAGEJ,EAAGtB,MAAQQ,IACbc,EAAG2B,iBACHzB,MAGJN,EAASS,OAASH,EAElBN,EAASW,QAAU,SAAAP,GACjBA,EAAG2B,iBACH,IACE,IAAMC,EAAO5B,EAAG6B,cAAeC,QAAQ,QAAQC,QAAQ,OAAQ,KAC/DnC,EAASoC,YAAcJ,EACvB,YAsBJvC,OAAO4C,iBAAiB,QAASlC,GAAW,GAC5CF,SAASY,KAAKyB,YAAYtC,GAC1BA,EAASuC,QACT,IAAMC,EAAY/C,OAAOgD,eACzB,GAAID,EAAW,CACb,IAAME,EAAQzC,SAAS0C,cACvBD,EAAME,mBAAmB5C,GACzBwC,EAAUK,kBACVL,EAAUM,SAASJ,ICpFhB,SAASK,EAAiBC,GAC/B,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GAG1C,SAASC,EACdC,GAEA,OACGA,aAAkBC,aAAuC,YAAxBD,EAAOpC,QAAQlI,MACjDsK,aAAkBE,kBAClBF,aAAkBG,qBAClBH,aAAkBI,kBAKf,SAASC,EAAY1B,EAAclC,GACxC,IAAM6D,EAAO1D,SAASC,cAAc,OAC9BW,EAAOZ,SAASY,KACtB8C,EAAKxC,MAAME,SAAW,WACtBsC,EAAKxC,MAAMU,WAAa,SACxB8B,EAAKxC,MAAMrB,KAAOA,EAClBe,EAAKyB,YAAYqB,GAEjBA,EAAKpD,UAAYyB,EACjB,IAAMxI,EAAQmK,EAAKC,YACbnK,EAASkK,EAAKE,aAGdC,EAAO7D,SAASC,cAAc,QACpC4D,EAAK3C,MAAMO,QAAU,eACrBoC,EAAK3C,MAAM4C,SAAW,SACtBD,EAAK3C,MAAM3H,MAAQ,MACnBsK,EAAK3C,MAAM1H,OAAS,MACpBkK,EAAKrB,YAAYwB,GAEjB,IAAME,EAAWF,EAAKG,UAAYH,EAAKD,aAGvC,OAFA5D,SAASY,KAAKC,YAAY6C,GAEnB,CAAEnK,QAAOC,SAAQuK,YChDnB,IAAME,EAAwB,SAACxK,GACpC,IAAMyK,EAAUT,EAAYhK,EAAQsI,KAAMtI,EAAQoG,MAClDpG,EAAQF,MAAQ2K,EAAQ3K,MACxBE,EAAQD,OAAS0K,EAAQ1K,OACzBC,EAAQsK,SAAWG,EAAQH,UCCtB,SAASI,EACdlF,EACAmF,EACAC,EACApI,EACAC,GAEA,IAAIoI,EAAOC,IACPC,EAAO,EACPC,EAAOF,IACPG,EAAO,EAEXzF,EAAS7B,SAAQ,SAAA3D,GAAY,IAAD,EACDyB,EAAyBzB,GADxB,mBACnBQ,EADmB,KACfC,EADe,KACXC,EADW,KACPC,EADO,KAE1BkK,EAAOlM,KAAKsD,IAAI4I,EAAMrK,GACtBwK,EAAOrM,KAAKsD,IAAI+I,EAAMvK,GACtBsK,EAAOpM,KAAKyF,IAAI2G,EAAMrK,GACtBuK,EAAOtM,KAAKyF,IAAI6G,EAAMtK,MAGxBkK,GAAQrI,EACRuI,GAAQvI,EACRwI,GAAQvI,EACRwI,GAAQxI,EACR,IAAMyI,EAAevM,KAAKyF,KAAKyG,EAAM,GAC/BM,EAAgBxM,KAAKyF,MAAMuG,EAAcI,GAAO,GAChDK,EAAczM,KAAKyF,KAAK4G,EAAM,GAC9BK,EAAiB1M,KAAKyF,MAAMwG,EAAeK,GAAO,GAGpDK,EAAsB,MACtBJ,GAAgBC,KAClBG,EAAsB,CACpBhM,EAAGX,KAAKsD,IACNiJ,EAtCiB,EAuCjBP,EAxCmB,GACF,GAyCnBpL,EAAGqL,EAxCsB,EADN,EA0CnB9K,MAAOnB,KAAKyF,IACVuG,EAAcQ,EAAgBD,EAAeK,EA5C1B,IA+CrBxL,OA7CyB,IAkD7B,IAAIyL,EAAoB,KAgBxB,OAfIJ,GAAeC,KACjBG,EAAoB,CAClBlM,EAAGqL,EArDsB,EADN,EAuDnBpL,EAAGZ,KAAKsD,IACNmJ,EAxDiB,EAyDjBR,EA1DmB,GACF,GA2DnB9K,MA1DyB,EA2DzBC,OAAQpB,KAAKyF,IACXwG,EAAeS,EAAiBD,EAAcK,GA9D3B,MAoElB,CACLC,WAAYJ,EACZK,SAAUH,GC1CP,SAASI,EAAepG,GAC7B,IAAMqG,EAAW,YAAOrG,GAMxB,OAJAqG,EAAYlI,SAAQ,SAAA3D,GAClBA,EAAQG,YAAa,KAGhB0L,EAGF,SAASC,EAAuBtG,GACrC,OAAOA,EAASP,QAAO,SAAA8G,GAAE,OAAKA,EAAG5L,cAG5B,SAAS6L,EAAmBxG,GACjC,IAAMyG,EAA4B,GAMlC,OALAzG,EAAS7B,SAAQ,SAAC3D,EAASkM,GACrBlM,EAAQG,YACV8L,EAAgBE,KAAKD,MAGlBD,EAGF,IAAMG,EAAwB,SAAC5G,GAAD,OACnCA,EAAS6G,MAAK,SAAArM,GAAO,OAAIA,EAAQG,eAE5B,SAASmM,EACd9G,EACA+G,GAEA,IAAMC,EAAaC,MAAMC,KACvB,IAAIC,IACFnH,EACGP,QAAO,SAAAjF,GAAO,OAAIA,EAAQG,cAC1ByM,KAAI,SAAA5M,GAAO,OAAIuM,EAAavM,QAGnC,OAA6B,IAAtBwM,EAAWlH,OAAekH,EAAW,GAAK,K,sBC3D5C,SAASK,GACdC,EACAxN,EACAC,EACAO,EACAC,EACAgN,GAEAD,EAAQE,YACRF,EAAQG,OAAO3N,EAAIyN,EAAQxN,GAC3BuN,EAAQI,OAAO5N,EAAIQ,EAAQiN,EAAQxN,GACnCuN,EAAQK,iBAAiB7N,EAAIQ,EAAOP,EAAGD,EAAIQ,EAAOP,EAAIwN,GACtDD,EAAQI,OAAO5N,EAAIQ,EAAOP,EAAIQ,EAASgN,GACvCD,EAAQK,iBACN7N,EAAIQ,EACJP,EAAIQ,EACJT,EAAIQ,EAAQiN,EACZxN,EAAIQ,GAEN+M,EAAQI,OAAO5N,EAAIyN,EAAQxN,EAAIQ,GAC/B+M,EAAQK,iBAAiB7N,EAAGC,EAAIQ,EAAQT,EAAGC,EAAIQ,EAASgN,GACxDD,EAAQI,OAAO5N,EAAGC,EAAIwN,GACtBD,EAAQK,iBAAiB7N,EAAGC,EAAGD,EAAIyN,EAAQxN,GAC3CuN,EAAQM,YACRN,EAAQO,OACRP,EAAQQ,SC3BH,SAASC,GACdvN,EACAwN,EACAV,GAEA,IAAMW,EAAYD,EAAGC,UACrB,GAAqB,cAAjBzN,EAAQX,KAAsB,CAChC,IAAMK,EAAYoN,EAAQpN,UAC1BoN,EAAQpN,UAAY,wBACpBoN,EAAQY,SAAS,EAAG,EAAG1N,EAAQF,MAAOE,EAAQD,QAC9C+M,EAAQpN,UAAYA,OACf,GAAqB,cAAjBM,EAAQX,KACZW,EAAQI,QACXJ,EAAQI,MAAQtB,EAAqBkB,EAAQjB,MAAM,WACjD,OAAO0O,EAAUE,UAAU,EAAG,EAAG3N,EAAQF,MAAOE,EAAQD,OAAQ,CAC9DuN,OAAQtN,EAAQR,YAChB6N,KAC8B,gBAA5BrN,EAAQP,qBACJmO,EACA5N,EAAQP,gBACdC,UAAWM,EAAQN,UACnBC,YAAaK,EAAQL,YACrBC,UAAWI,EAAQJ,gBAKzBkN,EAAQe,YAAc7N,EAAQH,QAAU,IACxC2N,EAAGM,KAAK9N,EAAQI,OAChB0M,EAAQe,YAAc,OACjB,GAAqB,YAAjB7N,EAAQX,KACZW,EAAQI,QACXJ,EAAQI,MAAQtB,EAAqBkB,EAAQjB,MAAM,WAAO,IAAD,EAUnD2C,EAAiB1B,GAVkC,mBAErD2B,EAFqD,KAGrD2C,EAHqD,KAIrD1C,EAJqD,KAKrDC,EALqD,KAMrD0C,EANqD,KAOrDC,EAPqD,KAQrDC,EARqD,KASrDC,EATqD,KAWvD,OAAO+I,EAAUM,QACf,CACE,CAACpM,EAAM2C,GACP,CAAC1C,EAAQC,GACT,CAAC0C,EAASC,GACV,CAACC,EAAOC,IAEV,CACE4I,OAAQtN,EAAQR,YAChB6N,KAC8B,gBAA5BrN,EAAQP,qBACJmO,EACA5N,EAAQP,gBACdC,UAAWM,EAAQN,UACnBC,YAAaK,EAAQL,YACrBC,UAAWI,EAAQJ,gBAM3BkN,EAAQe,YAAc7N,EAAQH,QAAU,IACxC2N,EAAGM,KAAK9N,EAAQI,OAChB0M,EAAQe,YAAc,OACjB,GAAqB,YAAjB7N,EAAQX,KACZW,EAAQI,QACXJ,EAAQI,MAAQtB,EAAqBkB,EAAQjB,MAAM,kBACjD0O,EAAUO,QACRhO,EAAQF,MAAQ,EAChBE,EAAQD,OAAS,EACjBC,EAAQF,MACRE,EAAQD,OACR,CACEuN,OAAQtN,EAAQR,YAChB6N,KAC8B,gBAA5BrN,EAAQP,qBACJmO,EACA5N,EAAQP,gBACdC,UAAWM,EAAQN,UACnBC,YAAaK,EAAQL,YACrBC,UAAWI,EAAQJ,gBAM3BkN,EAAQe,YAAc7N,EAAQH,QAAU,IACxC2N,EAAGM,KAAK9N,EAAQI,OAChB0M,EAAQe,YAAc,MACjB,IAAqB,UAAjB7N,EAAQX,KAAkB,CAAC,IAAD,EACMyC,EAAe9B,GADrB,mBAC5BQ,EAD4B,KACxBC,EADwB,KACpBC,EADoB,KAChBC,EADgB,KACZ0B,EADY,KACRC,EADQ,KACJqC,EADI,KACAC,EADA,KAE7BqJ,EAAU,CACdX,OAAQtN,EAAQR,YAChBG,YAAaK,EAAQL,YACrBC,UAAWI,EAAQJ,WAiBrB,OAdKI,EAAQI,QACXJ,EAAQI,MAAQtB,EAAqBkB,EAAQjB,MAAM,iBAAM,CAEvD0O,EAAUxD,KAAK5H,EAAIC,EAAI5B,EAAIC,EAAIsN,GAE/BR,EAAUxD,KAAKzJ,EAAIC,EAAIC,EAAIC,EAAIsN,GAE/BR,EAAUxD,KAAKtF,EAAIC,EAAIlE,EAAIC,EAAIsN,QAInCnB,EAAQe,YAAc7N,EAAQH,QAAU,IACvCG,EAAQI,MAAqBuD,SAAQ,SAAAvD,GAAK,OAAIoN,EAAGM,KAAK1N,WACvD0M,EAAQe,YAAc,GAEjB,IAAIlI,EAAc3F,GAevB,MAAM,IAAI+E,MAAM,sBAAwB/E,EAAQX,MAdhDyN,EAAQe,YAAc7N,EAAQH,QAAU,IACxC,IAAMuG,EAAO0G,EAAQ1G,KACrB0G,EAAQ1G,KAAOpG,EAAQoG,KACvB,IAAM1G,EAAYoN,EAAQpN,UAC1BoN,EAAQpN,UAAYM,EAAQR,YAC5BsN,EAAQoB,SACNlO,EAAQsI,KACR,EACAtI,EAAQsK,UAAYtK,EAAQmO,yBAA2B,GAEzDrB,EAAQpN,UAAYA,EACpBoN,EAAQ1G,KAAOA,EACf0G,EAAQe,YAAc,GCzHnB,SAASO,GACd5I,EACAgI,EACAa,EACAC,GAaC,IAAD,yDADI,GATFC,EAUF,EAVEA,QACAC,EASF,EATEA,QASF,IAREC,wBAQF,aAPEC,uBAOF,SACA,GAAKL,EAAL,CACA,IAAMvB,EAAUuB,EAAOM,WAAW,MAE5BjP,EAAYoN,EAAQpN,UA2B1B,GA1B8C,kBAAnC4O,EAAWM,qBACpB9B,EAAQpN,UAAY4O,EAAWM,oBAC/B9B,EAAQY,SAAS,EAAG,EAAGW,EAAOvO,MAAOuO,EAAOtO,SAE5C+M,EAAQ+B,UAAU,EAAG,EAAGR,EAAOvO,MAAOuO,EAAOtO,QAE/C+M,EAAQpN,UAAYA,EAEpB4O,EAAU,eACLA,EADK,CAER9L,QAA4B,kBAAZ+L,EAAuBA,EAAUD,EAAW9L,QAC5DC,QAA4B,kBAAZ+L,EAAuBA,EAAUF,EAAW7L,UAG9D+C,EAAS7B,SAAQ,SAAA3D,GACf8M,EAAQgC,UACN9O,EAAQV,EAAIgP,EAAW9L,QACvBxC,EAAQT,EAAI+O,EAAW7L,SAEzB8K,GAAcvN,EAASwN,EAAIV,GAC3BA,EAAQgC,WACL9O,EAAQV,EAAIgP,EAAW9L,SACvBxC,EAAQT,EAAI+O,EAAW7L,YAIxBiM,EAAiB,CACnB,IAAMK,EAAmBvJ,EAASP,QAAO,SAAA8G,GAAE,OAAIA,EAAG5L,cAsBlD,GApBA4O,EAAiBpL,SAAQ,SAAA3D,GACvB,IADkC,EAQ9ByB,EAAyBzB,GARK,mBAIhC0C,EAJgC,KAKhCE,EALgC,KAMhCD,EANgC,KAOhCE,EAPgC,KAS5BmM,EAAWlC,EAAQmC,cACzBnC,EAAQoC,YAAY,CAAC,EAAG,IACxBpC,EAAQqC,WACNzM,EAXa,EAWQ4L,EAAW9L,QAChCI,EAZa,EAYQ0L,EAAW7L,QAChCE,EAAYD,EAAY0M,EACxBvM,EAAYD,EAAYwM,GAE1BtC,EAAQoC,YAAYF,MAGU,IAA5BD,EAAiBzJ,QAA6C,SAA7ByJ,EAAiB,GAAG1P,KAAiB,CACxE,IAAMyD,EAAWP,EAAkBwM,EAAiB,GAAIT,GACxDpJ,OAAOmK,OAAOvM,GAAUa,SAAQ,SAAA0B,GAC9ByH,EAAQqC,WAAW9J,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,QAKrE,GAAIoJ,EAAkB,CACpB,IAAMa,EAAa5E,EACjBlF,EACAsH,EAAQuB,OAAOvO,MAAQiG,OAAOwJ,iBAC9BzC,EAAQuB,OAAOtO,OAASgG,OAAOwJ,iBAC/BjB,EAAW9L,QACX8L,EAAW7L,SAGP+M,EAAc1C,EAAQ0C,YAC5B1C,EAAQpN,UJlGmB,kBImG3BoN,EAAQ0C,YAAc,wBACtB,CAACF,EAAW5D,WAAY4D,EAAW3D,UAAUhI,SAAQ,SAAA8L,GAC/CA,GACF5C,GACEC,EACA2C,EAAUnQ,EACVmQ,EAAUlQ,EACVkQ,EAAU3P,MACV2P,EAAU1P,OACV0L,MAGNqB,EAAQ0C,YAAcA,EACtB1C,EAAQpN,UAAYA,ICxGxB,SAASgQ,GAASC,EAAcC,GAE9B,IAAMC,EAAOtJ,SAASC,cAAc,KACpCqJ,EAAKC,aAAa,WAAYH,GAC9BE,EAAKC,aAAa,OAAQF,GAC1BC,EAAKE,QAGLF,EAAKG,SA4IP,SAASC,GACPC,EACAC,GAEA,MAAO,CACL3K,SAAU0K,EAActD,KAAI,SAAA5M,GAAO,sBAC9BA,EAD8B,CAEjCC,GAAID,EAAQC,IAAMC,MAClBR,UAAWM,EAAQN,WAAa,UAChCC,YAAaK,EAAQL,aAAe,EACpCC,UAAWI,EAAQJ,WAAa,EAChCC,QACsB,OAApBG,EAAQH,cAAwC+N,IAApB5N,EAAQH,QAChC,IACAG,EAAQH,aAEhBuQ,SAAUD,GCxJP,SAASE,GACd7K,EACAlG,EACAC,GAIA,IAFA,IAAI+Q,EAAa,KAERC,EAAI/K,EAASF,OAAS,EAAGiL,GAAK,IAAKA,EAC1C,GAAInN,EAAQoC,EAAS+K,GAAIjR,EAAGC,GAAI,CAC9B+Q,EAAa9K,EAAS+K,GACtB,MAIJ,OAAOD,ECtCF,ICCME,GAAS,CACpB,CACEC,KAEE,yBAAKC,QAAQ,eACX,0BAAMC,EAAE,oSAGZC,MAAO,aAET,CACEH,KAEE,yBAAKC,QAAQ,eACX,0BAAMC,EAAE,+GAGZC,MAAO,aAET,CACEH,KAEE,yBAAKC,QAAQ,uBACX,0BAAMC,EAAE,gEAGZC,MAAO,WAET,CACEH,KAEE,yBAAKC,QAAQ,eACX,0BAAMC,EAAE,2EAGZC,MAAO,WAET,CACEH,KAEE,yBAAKC,QAAQ,eACX,0BAAMC,EAAE,wOAGZC,MAAO,SAET,CACEH,KAEE,yBAAKC,QAAQ,eACX,0BAAMC,EAAE,8UAGZC,MAAO,SAIEC,GAAqBL,GAAO5D,KAAI,SAAAxM,GAAK,OAAIA,EAAMwQ,MAAM,M,IC1D5DE,G,iDACIC,WAAqB,E,KACrBC,aAAyB,G,KACzBC,UAAsB,G,iEAETzL,GACnB,OAAO0L,KAAKC,UACV3L,EAASoH,KAAI,cAAGxM,MAAH,IAAaJ,EAAb,+CACRA,EADQ,CAEXG,YAAY,U,gCAKRiR,GAENC,KAAKL,aAAa1L,OAAS,GAC3B+L,KAAKL,aAAaK,KAAKL,aAAa1L,OAAS,KAAO8L,GAKtDC,KAAKL,aAAa7E,KAAKiF,K,mCAGZE,GAEXD,KAAKE,gBAEL,IACE,OAAOL,KAAKM,MAAMF,GAClB,SACA,OAAO,Q,uCAKTD,KAAKJ,UAAUQ,OAAO,EAAGJ,KAAKJ,UAAU3L,U,+BAGjCE,GACP,IAAMkM,EAAeL,KAAKM,qBAAqBnM,GACzCoM,EAAiBP,KAAKJ,UAAUY,MACtC,YAAuBjE,IAAnBgE,GACFP,KAAKL,aAAa7E,KAAKuF,GAChBL,KAAKS,aAAaF,IAGpB,O,+BAGApM,GACP,IAAMkM,EAAeL,KAAKM,qBAAqBnM,GAC3CoM,EAAiBP,KAAKL,aAAaa,MAMvC,OAHIH,IAAiBE,IACnBA,EAAiBP,KAAKL,aAAaa,YAEdjE,IAAnBgE,GACFP,KAAKJ,UAAU9E,KAAKuF,GACbL,KAAKS,aAAaF,IAGpB,O,oCAIP,OAAOP,KAAKN,Y,sCAIZM,KAAKN,WAAY,I,wCAIjBM,KAAKN,WAAY,M,KCrEd,SAASgB,GAAT,GAAkE,IAA/CC,EAA8C,EAA9CA,SAAUnK,EAAoC,EAApCA,KAAMoK,EAA8B,EAA9BA,eAAgBrK,EAAc,EAAdA,IACxD,OACE,yBAAKsK,UAAU,UAAUzK,MAAO,CAAEG,IAAKA,EAAKC,KAAMA,IAChD,yBACEqK,UAAU,QACVC,QAASF,EACTG,cAAe,SAAAC,GACbA,EAAEhK,iBACE4J,GAAgBA,OAGvBD,G,ICwBHM,G,MA1BJ,SAASC,GAAT,GAAqE,IAA9CtE,EAA6C,EAA7CA,QAASgE,EAAoC,EAApCA,eAAgBrK,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,KACnD,OACE,kBAACkK,GAAD,CAASE,eAAgBA,EAAgBrK,IAAKA,EAAKC,KAAMA,GACvD,wBAAIqK,UAAU,eAAeE,cAAe,SAAAC,GAAC,OAAIA,EAAEhK,mBAChD4F,EAAQrB,KAAI,SAAC4F,EAAQC,GAAT,OACX,wBACErN,IAAKqN,EACLP,UAAU,uBACVC,QAASF,GAET,kBAACS,GAAsBF,SAQnC,SAASE,GAAT,GAAkE,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,OAClC,OACE,4BAAQV,UAAU,sBAAsBC,QAASS,GAC9CD,GAMP,SAASE,KACP,GAAIP,GACF,OAAOA,GAET,IAAMQ,EAAMvM,SAASC,cAAc,OAEnC,OADAD,SAASY,KAAKyB,YAAYkK,GAClBR,GAAkBQ,EAS5B,SAASC,KACPC,iCAAuBH,MAGV,gBACRI,GACH,IAAMhF,EAAUxB,MAAMyG,KACtBD,EAAOhF,QAAQtK,SAAQ,SAAA6O,GACjBA,GACFvE,EAAQ9B,KAAKqG,MAGbvE,EAAQ3I,QACV6N,iBACE,kBAAC,GAAD,CACEvL,IAAKqL,EAAOrL,IACZC,KAAMoL,EAAOpL,KACboG,QAASA,EACTgE,eAAgBc,KAElBF,OC3EKO,I,MAAb,iDACEC,QAAyC,GAD3C,KAGEC,QAEW,KALb,uDAQIA,GAEAjC,KAAKiC,QAAUA,IAVnB,qCAaiBV,GACbvB,KAAKgC,QAAQT,EAAOjD,MAAQiD,IAdhC,oCAkBIW,EACA/N,EACA4K,GAEA,IAAMR,EAAO1K,OAAOmK,OAAOgC,KAAKgC,SAC7BG,MAAK,SAAC/P,EAAGC,GAAJ,OAAWA,EAAE+P,aAAe,IAAMhQ,EAAEgQ,aAAe,MACxDxO,QACC,SAAA2N,GAAM,OAAIA,EAAOc,SAAWd,EAAOc,QAAQH,EAAO/N,EAAU4K,MAGhE,OAAoB,IAAhBR,EAAKtK,OAAqB,IAE9BiO,EAAMlL,iBACCuH,EAAK,GAAG+D,QAAQnO,EAAU4K,EAAU,SA/B/C,0CAmCI5K,EACA4K,EACAkD,GAEA,OAAOpO,OAAOmK,OAAOgC,KAAKgC,SACvBpO,QAAO,SAAA2N,GAAM,MAAI,qBAAsBA,KACvCY,MACC,SAAC/P,EAAGC,GAAJ,YAC0BkK,IAAvBnK,EAAEmQ,iBAAiCnQ,EAAEmQ,iBAAmB,WACjChG,IAAvBlK,EAAEkQ,iBAAiClQ,EAAEkQ,iBAAmB,QAE5DhH,KAAI,SAAAgG,GAAM,MAAK,CACdD,MAAOC,EAAOiB,iBACdjB,OAAQ,WACNU,EAAQV,EAAOe,QAAQnO,EAAU4K,EAAU,cAjDrD,mCAuDIT,EACAnK,EACA4K,EACAkD,GAEA,GAAIjC,KAAKgC,QAAQ1D,IAAS,mBAAoB0B,KAAKgC,QAAQ1D,GAAO,CAChE,IAAMiD,EAASvB,KAAKgC,QAAQ1D,GACtBmE,EAAiBlB,EAAOkB,eAK9B,OACE,kBAACA,EAAD,CACEtO,SAAUA,EACV4K,SAAUA,EACV2D,WARe,SAACC,GAClBV,EAAQV,EAAOe,QAAQnO,EAAU4K,EAAU4D,OAY/C,OAAO,SA5EX,MCDaC,GAA+B,CAC1CtE,KAAM,yBACNgE,QAAS,SAAAnO,GACP,MAAO,CACLA,SAAUsG,EAAuBtG,KAGrCqO,iBAAkB,SAClBD,iBAAkB,EAClBF,QAAS,SAAAH,GAAK,OAAIA,EAAMnO,MAAQQ,GAAkB2N,EAAMnO,MAAQQ,ICblE,SAASsO,GAAQ1O,EAAe2O,EAAgBC,GAC9C,IAAMpU,EAAUwF,EAAS2O,GACzB3O,EAAS2O,GAAU3O,EAAS4O,GAC5B5O,EAAS4O,GAAUpU,EAGd,SAASqU,GAAe7O,EAAe8O,GAC5CA,EAAcd,MAAK,SAAC/P,EAAWC,GAAZ,OAA0BD,EAAIC,KACjD,IAAI6Q,GAAW,EAYf,OAVAD,EAAc3Q,SAAQ,SAACuI,EAAOqE,IAG5BgE,EAAWA,GAAYrI,IAAUqE,IAIjC2D,GAAK1O,EAAU0G,EAAQ,EAAGA,MAGrB1G,EAGF,SAASgP,GAAgBhP,EAAe8O,GAC7C,IAAMG,EAAwBH,EAAcd,MAC1C,SAAC/P,EAAWC,GAAZ,OAA0BA,EAAID,KAE5B8Q,GAAW,EAYf,OATAE,EAAsB9Q,SAAQ,SAACuI,EAAOqE,IAGpCgE,EAAWA,GAAYrI,IAAU1G,EAASF,OAASiL,EAAI,IAIvD2D,GAAK1O,EAAU0G,EAAQ,EAAGA,MAErB1G,EAiDF,SAASkP,GAAelP,EAAe8O,GAC5CA,EAAcd,MAAK,SAAC/P,EAAWC,GAAZ,OAA0BD,EAAIC,KAGjD,IAAMiR,EAAmBL,EAAc1H,KAAI,SAAAV,GAAK,OAAI1G,EAAS0G,MAEvDuI,EAAwBH,EAE3BM,UAEAC,OAAO,CAAC,IAoBX,OAlBAJ,EAAsB9Q,SAAQ,SAACuI,EAAOqE,GAEpC,GAAU,IAANA,EAKJ,IAAK,IAAIuE,EAAML,EAAsBlE,EAAI,GAAK,EAAGuE,GAAO5I,IAAS4I,EAE/DtP,EAASsP,EAAMvE,GAAK/K,EAASsP,MAKjCH,EAAiBhR,SAAQ,SAAC3D,EAASuQ,GACjC/K,EAAS+K,GAAKvQ,KAGTwF,EAgDF,SAASuP,GAAgBvP,EAAe8O,GAC7C,IAAMG,EAAwBH,EAAcd,MAC1C,SAAC/P,EAAWC,GAAZ,OAA0BA,EAAID,KAI1BuR,EAAoBP,EAAsB7H,KAAI,SAAAV,GAAK,OAAI1G,EAAS0G,MA0BtE,OAxBAoI,EAAgBG,EAEbG,UAEAC,OAAO,CAACrP,EAASF,UAEN3B,SAAQ,SAACuI,EAAOqE,GAE5B,GAAU,IAANA,EAKJ,IAAK,IAAIuE,EAAMR,EAAc/D,EAAI,GAAK,EAAGuE,EAAM5I,IAAS4I,EAEtDtP,EAASsP,EAAMvE,GAAK/K,EAASsP,MAKjCE,EAAkBrR,SAAQ,SAAC3D,EAASuQ,GAClC/K,EAASA,EAASF,OAASiL,EAAI,GAAKvQ,KAG/BwF,EC5LF,IAAMyP,GAA6B,CACxCtF,KAAM,eACNgE,QAAS,SAACnO,EAAU4K,GAClB,MAAO,CACL5K,SAAU6O,GAAY,YAAI7O,GAAWwG,EAAmBxG,IACxD4K,aAGJyD,iBAAkB,gBAClBJ,YAAa,GACbC,QAAS,SAAAH,GAAK,OACZA,EAAM1N,IAAa0N,EAAM2B,UAAY3B,EAAM4B,QAAyB,SAAf5B,EAAM6B,OAGlDC,GAA6B,CACxC1F,KAAM,eACNgE,QAAS,SAACnO,EAAU4K,GAClB,MAAO,CACL5K,SAAUgP,GAAa,YAAIhP,GAAWwG,EAAmBxG,IACzD4K,aAGJyD,iBAAkB,gBAClBJ,YAAa,GACbC,QAAS,SAAAH,GAAK,OACZA,EAAM1N,IAAa0N,EAAM2B,UAAY3B,EAAM4B,QAAyB,SAAf5B,EAAM6B,OAGlDE,GAA2B,CACtC3F,KAAM,aACNgE,QAAS,SAACnO,EAAU4K,GAClB,MAAO,CACL5K,SAAUkP,GAAY,YAAIlP,GAAWwG,EAAmBxG,IACxD4K,aAGJyD,iBAAkB,eAClBH,QAAS,SAAAH,GAAK,OAAIA,EAAM1N,IAAa0N,EAAM2B,UAA2B,SAAf3B,EAAM6B,OAGlDG,GAA6B,CACxC5F,KAAM,eACNgE,QAAS,SAACnO,EAAU4K,GAClB,MAAO,CACL5K,SAAUuP,GAAa,YAAIvP,GAAWwG,EAAmBxG,IACzD4K,aAGJyD,iBAAkB,iBAClBH,QAAS,SAAAH,GAAK,OAAIA,EAAM1N,IAAa0N,EAAM2B,UAA2B,SAAf3B,EAAM6B,OCxDlDI,GAA0B,CACrC7F,KAAM,YACNgE,QAAS,SAAAnO,GACP,MAAO,CACLA,SAAUA,EAASoH,KAAI,SAAA6I,GAAI,sBAAUA,EAAV,CAAgBtV,YAAY,SAG3D0T,iBAAkB,aAClBH,QAAS,SAAAH,GAAK,OAAIA,EAAM1N,IAA4B,SAAf0N,EAAM6B,OCTtC,SAASM,GAAT,GAQH,IAPFzH,EAOC,EAPDA,QACA2C,EAMC,EANDA,MACA+E,EAKC,EALDA,SAMA,OACE,yBAAKzD,UAAU,cACZjE,EAAQrB,KAAI,SAAA4F,GAAM,OACjB,4BACEpN,IAAKoN,EAAOlK,KACZ6J,QAAS,kBAAMwD,EAASnD,EAAO5B,QAC/BsB,UAAWtB,IAAU4B,EAAO5B,MAAQ,SAAW,IAE9C4B,EAAOlK,U,UCXZsN,GAAS,YAQX,IAPFC,EAOC,EAPDA,OACAnO,EAMC,EANDA,MACAiO,EAKC,EALDA,SAKC,EACmCG,IAAMC,SAASrO,GADlD,mBACMsO,EADN,KACkBC,EADlB,KAKD,OAHAH,IAAMI,WAAU,WACdD,EAAcvO,KACb,CAACA,IAEF,yBAAKwK,UAAU,gBACb,yBAAKA,UAAU,iCACf,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,wBACZ2D,EAAOjJ,KAAI,SAAAlF,GAAK,OACf,yBACEwK,UAAU,sBACVC,QAAS,WACPwD,EAASjO,IAEXyO,MAAOzO,EACPJ,SAAU,EACVG,MAAO,CAAEhI,gBAAiBiI,IAEf,gBAAVA,EACC,yBAAKwK,UAAU,kCAEftE,MAIN,yBAAKsE,UAAU,qBAAf,KACA,yBAAKzK,MAAO,CAAEE,SAAU,aACtB,2BACEyO,YAAY,EACZlE,UAAU,qBACVyD,SAAU,SAAAtD,GACR,IAAMzB,EAAQyB,EAAE1I,OAAOiH,MACnBA,EAAMyF,MAAM,4CACdV,EAAmB,gBAAV/E,EAA0B,cAAgB,IAAMA,GAE3DqF,EAAcrF,IAEhBA,OAAQoF,GAAc,IAAIvN,QAAQ,KAAM,OAG5C,yBAAKhB,MAAO,CAAE6O,MAAO,aAMtB,SAASC,GAAT,GAQH,IAPFlX,EAOC,EAPDA,KACAqI,EAMC,EANDA,MACAiO,EAKC,EALDA,SAKC,EAC6BG,IAAMC,UAAS,GAD5C,mBACMS,EADN,KACgBC,EADhB,KAED,OACE,6BACE,4BACEvE,UAAU,SACVzK,MAAOC,EAAQ,CAAEjI,gBAAiBiI,QAAUkG,EAC5CuE,QAAS,kBAAMsE,GAAWD,MAE5B,kBAAC,IAAME,SAAP,CAAgBC,SAAS,IACtBH,EACC,kBAACzE,GAAD,CAASE,eAAgB,kBAAMwE,GAAU,KACvC,kBAAC,GAAD,CACEZ,OAAQA,GAAOxW,GACfqI,MAAOA,QAASkG,EAChB+H,SAAU,SAAAiB,GACRjB,EAASiB,OAIb,MAEN,2BACEvX,KAAK,OACL6S,UAAU,eACVtB,MAAOlJ,GAAS,GAChBmP,QAAS,SAAAxE,GAAC,OAAIsD,EAAStD,EAAE9J,cAAcC,QAAQ,UAC/CmN,SAAU,SAAAtD,GAAC,OAAIsD,EAAStD,EAAE1I,OAAOiH,WAMzC,IAAMiF,GAAS,CACbiB,iBAAkB,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,kBAAmB,CACjB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,eAEFC,cAAe,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YCrISC,GAAwC,SAAC,GAK/C,IAJLd,EAII,EAJJA,MACAe,EAGI,EAHJA,UACAC,EAEI,EAFJA,cACAC,EACI,EADJA,WAEA,OACE,oCACE,4BAAKjB,GACL,kBAAC,GAAD,CACE9W,KAAM6X,EACNxP,MAAO0P,EACPzB,SAAU,SAAAjO,GAAK,OAAIyP,EAAczP,QCdnC2P,GAAiB,SACrB7R,EACA8R,GAEA,OAAO9R,EAASoH,KAAI,SAAA5M,GAClB,OAAIA,EAAQG,WACHmX,EAAStX,GAEXA,MAIEuX,GAAkC,CAC7C5H,KAAM,oBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU6R,GAAe7R,GAAU,SAAAuG,GAAE,sBAChCA,EADgC,CAEnC3L,MAAO,KACPZ,YAAaoR,OAEfR,SAAS,eAAMA,EAAP,CAAiBoH,uBAAwB5G,MAGrDkD,eAAgB,gBAAGtO,EAAH,EAAGA,SAAoBuO,GAAvB,EAAa3D,SAAb,EAAuB2D,YAAvB,OACd,kBAAC,GAAD,CACEoC,MAAM,eACNe,UAAU,gBACVC,cAAe,SAACzP,GACdqM,EAAWrM,IAEb0P,WAAY9K,EACV9G,GACA,SAAAxF,GAAO,OAAIA,EAAQR,mBAMdiY,GAAsC,CACjD9H,KAAM,wBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU6R,GAAe7R,GAAU,SAAAuG,GAAE,sBAChCA,EADgC,CAEnC3L,MAAO,KACPX,gBAAiBmR,OAEnBR,SAAS,eAAMA,EAAP,CAAiBsH,2BAA4B9G,MAGzDkD,eAAgB,gBAAGtO,EAAH,EAAGA,SAAUuO,EAAb,EAAaA,WAAb,OACd,kBAAC,GAAD,CACEoC,MAAM,mBACNe,UAAU,oBACVC,cAAe,SAACzP,GACdqM,EAAWrM,IAEb0P,WAAY9K,EACV9G,GACA,SAAAxF,GAAO,OAAIA,EAAQP,uBAMdkY,GAAgC,CAC3ChI,KAAM,kBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU6R,GAAe7R,GAAU,SAAAuG,GAAE,sBAChCA,EADgC,CAEnC3L,MAAO,KACPV,UAAWkR,SAIjBkD,eAAgB,gBAAGtO,EAAH,EAAGA,SAAUuO,EAAb,EAAaA,WAAb,OACd,oCACE,oCACA,kBAAC2B,GAAD,CACEzH,QAAS,CACP,CAAE2C,MAAO,QAAStI,KAAM,SACxB,CAAEsI,MAAO,UAAWtI,KAAM,WAC1B,CAAEsI,MAAO,cAAetI,KAAM,gBAEhCsI,MAAOtE,EAAqB9G,GAAU,SAAAxF,GAAO,OAAIA,EAAQN,aACzDiW,SAAU,SAAA/E,GACRmD,EAAWnD,SAORgH,GAAkC,CAC7CjI,KAAM,oBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU6R,GAAe7R,GAAU,SAAAuG,GAAE,sBAChCA,EADgC,CAEnC3L,MAAO,KACPT,YAAaiR,SAInBkD,eAAgB,gBAAGtO,EAAH,EAAGA,SAAoBuO,GAAvB,EAAa3D,SAAb,EAAuB2D,YAAvB,OACd,oCACE,4CACA,kBAAC2B,GAAD,CACEzH,QAAS,CACP,CAAE2C,MAAO,EAAGtI,KAAM,QAClB,CAAEsI,MAAO,EAAGtI,KAAM,QAClB,CAAEsI,MAAO,EAAGtI,KAAM,eAEpBsI,MAAOtE,EAAqB9G,GAAU,SAAAxF,GAAO,OAAIA,EAAQL,eACzDgW,SAAU,SAAA/E,GAAK,OAAImD,EAAWnD,SAMzBiH,GAAiC,CAC5ClI,KAAM,mBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU6R,GAAe7R,GAAU,SAAAuG,GAAE,sBAChCA,EADgC,CAEnC3L,MAAO,KACPR,UAAWgR,SAIjBkD,eAAgB,gBAAGtO,EAAH,EAAGA,SAAoBuO,GAAvB,EAAa3D,SAAb,EAAuB2D,YAAvB,OACd,oCACE,0CACA,kBAAC2B,GAAD,CACEzH,QAAS,CACP,CAAE2C,MAAO,EAAGtI,KAAM,aAClB,CAAEsI,MAAO,EAAGtI,KAAM,UAClB,CAAEsI,MAAO,EAAGtI,KAAM,eAEpBsI,MAAOtE,EAAqB9G,GAAU,SAAAxF,GAAO,OAAIA,EAAQJ,aACzD+V,SAAU,SAAA/E,GAAK,OAAImD,EAAWnD,SAMzBkH,GAA8B,CACzCnI,KAAM,gBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU6R,GAAe7R,GAAU,SAAAuG,GAAE,sBAChCA,EADgC,CAEnC3L,MAAO,KACPP,QAAS+Q,SAIfkD,eAAgB,gBAAGtO,EAAH,EAAGA,SAAUuO,EAAb,EAAaA,WAAb,OACd,oCACE,uCACA,2BACE1U,KAAK,QACL4C,IAAI,IACJmC,IAAI,MACJuR,SAAU,SAAAtD,GAAC,OAAI0B,GAAY1B,EAAE1I,OAAOiH,QACpCA,MACEtE,EAAqB9G,GAAU,SAAAxF,GAAO,OAAIA,EAAQH,YAClD,OAOGkY,GAA+B,CAC1CpI,KAAM,iBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU6R,GAAe7R,GAAU,SAAAuG,GACjC,GAAIpG,EAAcoG,GAAK,CACrB,IAAM/L,EAA8B,eAC/B+L,EAD+B,CAElC3L,MAAO,KACPgG,KAAK,GAAD,OAAKwK,EAAL,cAAgB7E,EAAG3F,KAAK4R,MAAM,OAAO,MAG3C,OADAxN,EAAsBxK,GACfA,EAGT,OAAO+L,OAIb+H,eAAgB,gBAAGtO,EAAH,EAAGA,SAAUuO,EAAb,EAAaA,WAAb,OACd,oCACE,yCACA,kBAAC2B,GAAD,CACEzH,QAAS,CACP,CAAE2C,MAAO,GAAItI,KAAM,SACnB,CAAEsI,MAAO,GAAItI,KAAM,UACnB,CAAEsI,MAAO,GAAItI,KAAM,SACnB,CAAEsI,MAAO,GAAItI,KAAM,eAErBsI,MAAOtE,EACL9G,GACA,SAAAxF,GAAO,OAAI2F,EAAc3F,KAAaA,EAAQoG,KAAK4R,MAAM,OAAO,MAElErC,SAAU,SAAA/E,GAAK,OAAImD,EAAWnD,SAMzBqH,GAAiC,CAC5CtI,KAAM,mBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU6R,GAAe7R,GAAU,SAAAuG,GACjC,GAAIpG,EAAcoG,GAAK,CACrB,IAAM/L,EAA8B,eAC/B+L,EAD+B,CAElC3L,MAAO,KACPgG,KAAK,GAAD,OAAK2F,EAAG3F,KAAK4R,MAAM,OAAO,GAA1B,cAAkCpH,KAGxC,OADApG,EAAsBxK,GACfA,EAGT,OAAO+L,OAIb+H,eAAgB,gBAAGtO,EAAH,EAAGA,SAAUuO,EAAb,EAAaA,WAAb,OACd,oCACE,2CACA,kBAAC2B,GAAD,CACEzH,QAAS,CACP,CAAE2C,MAAO,SAAUtI,KAAM,UACzB,CAAEsI,MAAO,YAAatI,KAAM,aAC5B,CAAEsI,MAAO,UAAWtI,KAAM,YAE5BsI,MAAOtE,EACL9G,GACA,SAAAxF,GAAO,OAAI2F,EAAc3F,IAAYA,EAAQoG,KAAK4R,MAAM,OAAO,MAEjErC,SAAU,SAAA/E,GAAK,OAAImD,EAAWnD,SC7PhCsH,GAAoB,qBvBHnB,WACL,IAAMC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WAAa,EAC1BC,EAAMN,EAAKO,UACXC,EAAKR,EAAKS,WACV3W,EAAMkW,EAAKU,aACXC,EAAOX,EAAKY,aAElB,MAAM,GAAN,OAAUV,GAAV,OAAiBE,GAAjB,OAAyBE,GAAzB,OAA+BE,GAA/B,OAAoC1W,GAApC,OAA0C6W,GuBNDE,IAEpC,SAASC,KACd,MAAO,CACLC,gBAAiB,KACjBC,gBAAiB,KACjBC,YAAa,YACbC,kBAAkB,EAClB7B,uBAAwB,UACxBE,2BAA4B,cAC5B4B,gBAAiB,cACjB1K,oBAAqB,UACrBpM,QAAS,EACTC,QAAS,EACT8W,QAAS,EACTC,QAAS,EACT7J,KAAMuI,ICdH,IAAMuB,GAA0C,CACrD9J,KAAM,4BACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CAAER,SAAS,eAAMA,EAAP,CAAiBxB,oBAAqBgC,MAEzDkD,eAAgB,gBAAG1D,EAAH,EAAGA,SAAU2D,EAAb,EAAaA,WAAb,OACd,oCACE,uDACA,kBAAC,GAAD,CACE1U,KAAK,mBACLqI,MAAO0I,EAASxB,oBAChB+G,SAAU,SAAAjO,GAAK,OAAIqM,EAAWrM,SAMzBgS,GAA4B,CACvC/J,KAAM,cACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CACLpL,SAAU,GACV4K,SAAU6I,OAGdnF,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,4BACE1U,KAAK,SACL8S,QAAS,WACHpM,OAAO4T,QAAQ,oDACjB5F,EAAW,OAGfoC,MAAM,6CAPR,kBCnBSyD,GAAb,YACE,WAAYC,GAAe,IAAD,8BACxB,4CAAMA,KAEDC,MAAQ,CACXlJ,MAAOiJ,EAAMjJ,MACbmJ,MAAM,GALgB,EAD5B,8FAUmCF,GAC/BxI,KAAK2I,SAAS,CAAEpJ,MAAOiJ,EAAMjJ,UAXjC,iCAcqByB,GACjBhB,KAAK2I,SAAS,CAAEpJ,MAAOyB,EAAE1I,OAAOiH,UAfpC,mCAkBwB,IACZA,EAAUS,KAAKyI,MAAflJ,MAEHA,GAILS,KAAKwI,MAAMlE,SAAS/E,GACpBS,KAAK2I,SAAS,CAAED,MAAM,KAJpB1I,KAAK2I,SAAS,CAAEpJ,MAAOS,KAAKwI,MAAMjJ,MAAOmJ,MAAM,MAtBrD,+BA6BmB,IAAD,SACU1I,KAAKyI,MAArBlJ,EADM,EACNA,MAAOmJ,EADD,EACCA,KAEf,OACE,kBAAC,WAAD,KACGA,EACC,2BACE7H,UAAU,qBACVvC,KAAK,OACLsK,UAAW,GACXrJ,MAAOA,EACP+E,SAAU,SAAAtD,GAAC,OAAI,EAAK6H,WAAW7H,IAC/B8H,OAAQ,kBAAM,EAAKC,cACnBC,UAAW,SAAAhI,GACK,UAAVA,EAAEjN,KACJ,EAAKgV,cAGTE,WAAS,IAGX,0BACEnI,QAAS,kBAAM,EAAK6H,SAAS,CAAED,MAAM,KACrC7H,UAAU,gBAETtB,QAtDb,GAAkC2J,aCPrBC,GAAkC,CAC7C7K,KAAM,oBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CAAER,SAAS,eAAMA,EAAP,CAAiBT,KAAMiB,MAE1CkD,eAAgB,gBAAG1D,EAAH,EAAGA,SAAU2D,EAAb,EAAaA,WAAb,OACd,oCACE,oCACC3D,EAAST,MACR,kBAAC,GAAD,CACEiB,MAAOR,EAAST,KAChBgG,SAAU,SAAChG,GAAD,OAAkBoE,EAAWpE,SAOpC8K,GAAuC,CAClD9K,KAAM,yBACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAC5B,MAAO,CAAER,SAAS,eAAMA,EAAP,CAAiBiJ,iBAAkBzI,MAEtDkD,eAAgB,gBAAG1D,EAAH,EAAGA,SAAU2D,EAAb,EAAaA,WAAb,OACd,+BACE,2BACE1U,KAAK,WACLqb,QAAStK,EAASiJ,iBAClB1D,SAAU,SAAAtD,GACR0B,EAAW1B,EAAE1I,OAAO+Q,YAL1B,gBAaSC,GAA0B,CACrChL,KAAM,YACNgE,QAAS,SAACnO,EAAU4K,EAAUQ,GAE5B,OnBhBG,SACLpL,EACAmK,GAEA,IAAMiL,EAAa1J,KAAKC,UAAU,CAChC0J,QAAS,EACTC,OAAQ/U,OAAOgV,SAASC,OACxBxV,SAAUA,EAASoH,KAAI,cAAGxM,MAAH,qCAGzBsP,GAAS,GAAD,OACHC,EADG,SAEN,iCAAmCsL,mBAAmBL,ImBGtDM,CAAW1V,EAAU4K,EAAST,MACvB,IAETmE,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,4BAAQ5B,QAAS,kBAAM4B,EAAW,QAAlC,gBAISoH,GAA0B,CACrCxL,KAAM,YACNgE,QAAS,SAACnO,EAAU4K,EAAUgL,GAC5B,MAAO,CAAE5V,SAAU4V,IAErBtH,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,4BACE5B,QAAS,YnBdR,WACL,IAAMkJ,EAAQ9U,SAASC,cAAc,SAC/B8U,EAAS,IAAIC,WAenB,OAdAF,EAAMhc,KAAO,OACbgc,EAAMG,OAAS,QAEfH,EAAMI,SAAW,WACVJ,EAAMK,MAAOpW,OAKlBgW,EAAOK,WAAWN,EAAMK,MAAO,GAAI,QAJjCE,MAAM,6BAOVP,EAAMtL,QAEC,IAAI8L,SAAmB,SAAAC,GAC5BR,EAAOS,UAAY,WACjB,GAAIT,EAAOU,aAAeT,WAAWU,KAAM,CACzC,IAAIzW,EAAW,GACf,IAEEA,EADa0L,KAAKM,MAAM8J,EAAOnc,QACfqG,UAAY,GAC5B,MAAO6M,IAGTyJ,EAAQ7L,GAAQzK,EAAU,amBZ1B0W,GAAeC,MAAK,YAAmB,IAAhB3W,EAAe,EAAfA,SACrBuO,EAAWvO,QAHjB,kBCvDA4W,GAAuB,KAEdC,GAA2B,CACtC1M,KAAM,aACNgE,QAAS,SAAAnO,GACP,IAAMxF,EAAUwF,EAAS8W,MAAK,SAAAvQ,GAAE,OAAIA,EAAG5L,cAIvC,OAHIH,IACFoc,GAAelL,KAAKC,UAAUnR,IAEzB,IAET6T,iBAAkB,cAClBH,QAAS,SAAAH,GAAK,OAAIA,EAAM1N,IAAa0N,EAAM2B,UAA2B,SAAf3B,EAAM6B,MAC7DxB,iBAAkB,GAGP2I,GAA4B,CACvC5M,KAAM,cACNgE,QAAS,SAAAnO,GACP,IAAMgX,EAAgBtL,KAAKM,MAAM4K,IACjC,MAAO,CACL5W,SAAUA,EAASoH,KAAI,SAAA5M,GACrB,GAAIA,EAAQG,WAAY,CACtB,IAAMf,EAAU,eACXY,EADW,CAEdI,MAAO,KACPX,gBAAe,OAAE+c,QAAF,IAAEA,OAAF,EAAEA,EAAe/c,gBAChCE,YAAW,OAAE6c,QAAF,IAAEA,OAAF,EAAEA,EAAe7c,YAC5BH,YAAW,OAAEgd,QAAF,IAAEA,OAAF,EAAEA,EAAehd,YAC5BE,UAAS,OAAE8c,QAAF,IAAEA,OAAF,EAAEA,EAAe9c,UAC1BG,QAAO,OAAE2c,QAAF,IAAEA,OAAF,EAAEA,EAAe3c,QACxBD,UAAS,OAAE4c,QAAF,IAAEA,OAAF,EAAEA,EAAe5c,YAM5B,OAJI+F,EAAcvG,KAChBA,EAAWgH,KAAX,OAAkBoW,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAepW,KACjCoE,EAAsBpL,IAEjBA,EAET,OAAOY,OAIb6T,iBAAkB,eAClBH,QAAS,SAAAH,GAAK,OAAIA,EAAM1N,IAAa0N,EAAM2B,UAA2B,SAAf3B,EAAM6B,MAC7DxB,iBAAkB,GCzCP6I,GAA8B,SAAC,GAKrC,IAJLtG,EAII,EAJJA,MACAnE,EAGI,EAHJA,SAGI,IAFJ0K,wBAEI,aADJC,YACI,WAC8B5G,mBAAS2G,GADvC,mBACGE,EADH,KACcC,EADd,KAGJ,OAAIF,EAAa,KAGf,yBAAKzK,UAAU,SACb,4BAAKiE,GACL,4BACEjE,UAAU,qBACV7S,KAAK,SACL8S,QAAS,SAAAE,GACPA,EAAEhK,iBACFwU,GAAa,SAAAD,GAAS,OAAKA,OAI3B,0BACE1K,UAAS,kCACP0K,EAAY,iCAAmC,KAFnD,YASFA,GAAa,yBAAK1K,UAAU,eAAeF,KC5BtC8K,GAAwC,SAAC,GAG/C,IAFLC,EAEI,EAFJA,WACAC,EACI,EADJA,aAEA,OACE,kBAAC,GAAD,CAAO7G,MAAM,UACX,yBAAKjE,UAAU,cACZ1B,GAAO5D,KAAI,gBAAGgE,EAAH,EAAGA,MAAOH,EAAV,EAAUA,KAAV,OACV,2BACErL,IAAKwL,EACLsB,UAAU,OACViE,MAAK,UAAK9M,EAAiBuH,GAAtB,cAAkCvH,EAAiBuH,GAAO,KAE/D,2BACEvR,KAAK,QACLqb,QAASqC,IAAenM,EACxB+E,SAAU,WACRqH,EAAapM,MAGjB,yBAAKsB,UAAU,YAAYzB,UClB1BwM,GAAgD,SAAC,GAKvD,IAJLC,EAII,EAJJA,cACA1X,EAGI,EAHJA,SACA4K,EAEI,EAFJA,SACA+M,EACI,EADJA,iBAEA,OACE,6BACE,yBAAKjL,UAAU,cACZgL,EAAcE,aACb,eACA5X,EACA4K,EACA+M,GAEDD,EAAcE,aACb,eACA5X,EACA4K,EACA+M,GAEDD,EAAcE,aACb,eACA5X,EACA4K,EACA+M,GAEDD,EAAcE,aACb,aACA5X,EACA4K,EACA+M,MC7BGE,GAA0C,SAAC,GAKjD,IAJLH,EAII,EAJJA,cACA1X,EAGI,EAHJA,SACA4K,EAEI,EAFJA,SACA+M,EACI,EADJA,iBAEA,OACE,kBAAC,GAAD,CAAOhH,MAAM,UACV+G,EAAcE,aACb,4BACA5X,EACA4K,EACA+M,GAGDD,EAAcE,aACb,cACA5X,EACA4K,EACA+M,KCfFG,I,MAAgB,kBACpB,yBAAK5M,QAAQ,eACX,0BACErD,KAAK,eACLsD,EAAE,qUAKF4M,GACJ,WAAYC,kBAAkBC,WAC9B,cAAezX,WACf,UAAWA,UAAU0X,WACrB,kBAAmB3X,OAER4X,GAA0C,SAAC,GAMjD,IALLT,EAKI,EALJA,cACA1X,EAII,EAJJA,SACA4K,EAGI,EAHJA,SACA+M,EAEI,EAFJA,iBACAS,EACI,EADJA,eAEA,OACE,kBAAC,GAAD,CAAOzH,MAAM,UACX,yBAAKjE,UAAU,eACZgL,EAAcE,aACb,oBACA5X,EACA4K,EACA+M,GAEF,qCACA,yBAAKjL,UAAU,4BACb,4BACEA,UAAU,gCACVC,QAAS,kBAAMyL,EAAe,SAFhC,iBAMCL,IACC,4BACErL,UAAU,sCACVC,QAAS,kBAAMyL,EAAe,cAC9BzH,MAAM,oCAEN,kBAAC,GAAD,QAIL+G,EAAcE,aACb,yBACA5X,EACA4K,EACA+M,GAGF,qCACCD,EAAcE,aACb,YACA5X,EACA4K,EACA+M,GAEDD,EAAcE,aACb,YACA5X,EACA4K,EACA+M,MC1DGU,GAAsC,SAAC,GAO7C,IANLX,EAMI,EANJA,cACAC,EAKI,EALJA,iBACA3X,EAII,EAJJA,SACAwX,EAGI,EAHJA,aACA5M,EAEI,EAFJA,SACA/B,EACI,EADJA,OAEA,OACE,yBAAK6D,UAAU,aACb,kBAAC,GAAD,CACE6K,WAAY3M,EAASgJ,YACrB4D,aAAc,SAAApM,GACZoM,EAAapM,MAGjB,kBAAC,GAAD,CAAOuF,MAAM,YAAYwG,MAAOvQ,EAAsB5G,IACpD,kBAAC,GAAD,CACE0X,cAAeA,EACfC,iBAAkBA,EAClB3X,SAAUA,EACV4K,SAAUA,IAGX8M,EAAcE,aACb,oBACA5X,EACA4K,EACA+M,GzBpDmB,SAAC3X,GAAD,OAC3BA,EAAS6G,MACP,SAAArM,GAAO,OACLA,EAAQG,aACU,cAAjBH,EAAQX,MACU,YAAjBW,EAAQX,MACS,YAAjBW,EAAQX,SyBiDPye,CAActY,IACb,oCACG0X,EAAcE,aACb,wBACA5X,EACA4K,EACA+M,GAGDD,EAAcE,aACb,kBACA5X,EACA4K,EACA+M,IzB3DW,SAAC3X,GAAD,OACvBA,EAAS6G,MACP,SAAArM,GAAO,OACLA,EAAQG,aACU,cAAjBH,EAAQX,MACU,YAAjBW,EAAQX,MACS,YAAjBW,EAAQX,MACS,UAAjBW,EAAQX,SyByDP0e,CAAUvY,IACT,oCACG0X,EAAcE,aACb,oBACA5X,EACA4K,EACA+M,GAGDD,EAAcE,aACb,mBACA5X,EACA4K,EACA+M,IzBnES,SAAC3X,GAAD,OACrBA,EAAS6G,MAAK,SAAArM,GAAO,OAAIA,EAAQG,YAA+B,SAAjBH,EAAQX,QyBuEhD2e,CAAQxY,IACP,oCACG0X,EAAcE,aACb,iBACA5X,EACA4K,EACA+M,GAGDD,EAAcE,aACb,mBACA5X,EACA4K,EACA+M,IAKLD,EAAcE,aACb,gBACA5X,EACA4K,EACA+M,GAGDD,EAAcE,aACb,yBACA5X,EACA4K,EACA+M,IAGJ,kBAAC,GAAD,CACED,cAAeA,EACfC,iBAAkBA,EAClB3X,SAAUA,EACV4K,SAAUA,IAEZ,kBAAC,GAAD,CACE8M,cAAeA,EACfC,iBAAkBA,EAClB3X,SAAUA,EACV4K,SAAUA,EACVwN,eAAgB,SAACve,GAIf,O1B/DH,SACLA,EACAmG,EACA6I,EAHK,GAiBJ,IAZCgL,EAYF,EAZEA,iBAYF,IAXE4E,qBAWF,MAXkB,GAWlB,EAVErP,EAUF,EAVEA,oBACAe,EASF,EATEA,KAUF,IAAKnK,EAASF,OAAQ,OAAOS,OAAO6V,MAAM,+BAG1C,IAAIsC,EAAcpT,IACdqT,EAAc,EACdC,EAActT,IACduT,EAAc,EAUlB,SAAStc,EAASzC,EAAWC,GAC3B,OAAOZ,KAAKsE,IAAI3D,EAAIC,EAAID,EAAIC,EAAIA,EAAID,GATtCkG,EAAS7B,SAAQ,SAAA3D,GAAY,IAAD,EACDyB,EAAyBzB,GADxB,mBACnBQ,EADmB,KACfC,EADe,KACXC,EADW,KACPC,EADO,KAE1Bud,EAAcvf,KAAKsD,IAAIic,EAAa1d,GACpC4d,EAAczf,KAAKsD,IAAImc,EAAa3d,GACpC0d,EAAcxf,KAAKyF,IAAI+Z,EAAazd,GACpC2d,EAAc1f,KAAKyF,IAAIia,EAAa1d,MAOtC,IAAM2d,EAAa/X,SAASC,cAAc,UAuB1C,GAtBA8X,EAAW7W,MAAMO,QAAU,OAC3BzB,SAASY,KAAKyB,YAAY0V,GAC1BA,EAAWxe,MAAQiC,EAASmc,EAAaC,GAA+B,EAAhBF,EACxDK,EAAWve,OAASgC,EAASqc,EAAaC,GAA+B,EAAhBJ,EAEzD7P,GACE5I,EACA+Y,IAAMlQ,OAAOiQ,GACbA,EACA,CACE1P,oBAAqByK,EAAmBzK,EAAsB,KAC9DpM,QAAS,EACTC,QAAS,GAEX,CACE8L,SAAU2P,EAAcD,EACxBzP,SAAU4P,EAAcH,EACxBxP,kBAAkB,EAClBC,iBAAiB,IAIR,QAATrP,EACFqQ,GAAS,GAAD,OAAIC,EAAJ,QAAgB2O,EAAWE,UAAU,mBACxC,GAAa,cAATnf,EACT,IACEif,EAAWG,QAAO,SAAeC,GAAf,UAAAjb,EAAAkb,OAAA,4EAAAlb,EAAA,MAERuC,UAAU0X,UAAUkB,MAAM,CAC9B,IAAI7Y,OAAO8Y,cAAc,CAAE,YAAaH,OAH5B,sDAMd3Y,OAAO6V,MAAM,yDANC,0DASlB,MAAOkD,GACP/Y,OAAO6V,MAAM,yDAKb0C,IAAejQ,GAAQiQ,EAAWtO,S0BjBvB+O,CAAa1f,EAHKmG,EAAS6G,MAAK,SAAArM,GAAO,OAAIA,EAAQG,cACtDqF,EAASP,QAAO,SAAAjF,GAAO,OAAIA,EAAQG,cACnCqF,EACwC6I,EAAQ+B,Q,sGCzExD5K,GzBjEG,CAAEA,SADsC,IyBkE3CA,SACEwZ,GvBcC,CAAEA,QADO,IAAIlO,IuBbdkO,QAKR,SAASC,KACP1Y,SAAS2Y,gBAAgBzX,MAAM0X,OAAS,GAG1C,SAASC,GACPpf,EACAsI,EACAlC,GAGA,GADA6Y,KACa,OAAT3W,GAA0B,KAATA,EACnB,OAAO,EAGT,IAAMmC,EAAUT,EAAY1B,EAAMlC,GAUlC,OATApG,EAAQsI,KAAOA,EACftI,EAAQoG,KAAOA,EAEfpG,EAAQV,GAAKmL,EAAQ3K,MAAQ,EAC7BE,EAAQT,GAAKkL,EAAQ1K,OAAS,EAC9BC,EAAQF,MAAQ2K,EAAQ3K,MACxBE,EAAQD,OAAS0K,EAAQ1K,OACzBC,EAAQsK,SAAWG,EAAQH,UAEpB,EAGT,IAII+U,IAAmB,EACnBC,IAAoB,EAEpBC,GAAyC,KAEtC,SAASC,GAAT,KAGJ,IAFCC,EAEF,EAFEA,QAASC,EAEX,EAFWA,QAKX,MAAO,CAAEpgB,EAFCmgB,EA3CsB,IA0ChC,EADEjd,QAIUjD,EADFmgB,EA3CqB,EAyC/B,EADWjd,SAON,IAAMkd,GAAb,YAKE,WAAY9F,GAAa,IAAD,8BACtB,4CAAMA,KALRxL,OAAmC,KAIX,EAHxBb,GAAyB,KAGD,EADxB0P,cAA+B,IAAI9J,GACX,EA8BhB+J,iBAAmB,SAACyC,QACLhS,IAAjBgS,EAAIpa,WACNA,GAAWoa,EAAIpa,SACf,EAAKqa,oBAGcjS,IAAjBgS,EAAIxP,UACN,EAAK4J,SAAL,eAAmB4F,EAAIxP,YArCH,EAqEjB0J,MAAkBb,KArED,EAuEhB6G,SAAW,WACjB,EAAKD,eAxEiB,EA2EhBE,yBAA2B,SAAC1N,GAClC,EAAK2H,SAAS,CAAET,QAASlH,EAAE/S,EAAGka,QAASnH,EAAE9S,KA5EnB,EA+EhB8a,UAAY,SAAC9G,GACnB,GAAIA,EAAMnO,MAAQQ,EAQhB,OAPAJ,GAAWoG,EAAepG,IAC1B,EAAKqa,cACL,EAAK7F,SAAS,CAAEZ,YAAa,cACzBrT,OAAOQ,SAASyZ,yBAAyBpW,aAC3C7D,OAAOQ,SAASyZ,cAAcC,YAEhC1M,EAAMlL,iBAGR,IAAIqB,EAAY6J,EAAM5J,QAAtB,CAEA,IxB3J2BvE,EZ/CJ8a,EoC0MjBtQ,EAAO,EAAKsN,cAAciD,cAAc5M,EAAO/N,GAAU,EAAKsU,OAGpE,GAFA,EAAKqD,iBAAiBvN,QAEAhC,IAAlBgC,EAAKpK,eAA4CoI,IAAlBgC,EAAKQ,SAIxC,IpCjNuB8P,EoCiNR3M,EAAMnO,OpC/MTQ,GACZsa,IAAYta,GACZsa,IAAYta,GACZsa,IAAYta,EoC4Me,CACzB,IAAMwa,EAAO7M,EAAM2B,SA3Hc,EACN,EA6H3B1P,GAAWA,GAASoH,KAAI,SAAAb,GACtB,GAAIA,EAAG5L,WAAY,CACjB,IAAMH,EAAO,eAAQ+L,GAKrB,OAJIwH,EAAMnO,MAAQQ,EAAiB5F,EAAQV,GAAK8gB,EACvC7M,EAAMnO,MAAQQ,EAAkB5F,EAAQV,GAAK8gB,EAC7C7M,EAAMnO,MAAQQ,EAAe5F,EAAQT,GAAK6gB,EAC1C7M,EAAMnO,MAAQQ,IAAiB5F,EAAQT,GAAK6gB,GAC9CpgB,EAET,OAAO+L,KAET,EAAK8T,cACLtM,EAAMlL,sBACD,IACLwI,GAAmBwP,SAAS9M,EAAMnO,IAAIkb,gBACrC/M,EAAMgN,SACNhN,EAAM2B,UACN3B,EAAM4B,QACN5B,EAAMiN,SAGF,GAAIjN,EAAM1N,IAA4B,SAAf0N,EAAM6B,KAAiB,CACnD,GAAI7B,EAAM2B,SAAU,CAElB,IAAMtF,EAAOoP,GAAQyB,SAASjb,IACjB,OAAToK,IACFpK,GAAWoK,OAER,CAEL,IAAMA,EAAOoP,GAAQ0B,SAASlb,IACjB,OAAToK,IACFpK,GAAWoK,GAGf,EAAKiQ,cACLtM,EAAMlL,uBAhBN,EAAK2R,SAAS,CAAEZ,axB1LShU,EwB0LmBmO,EAAMnO,IxBxL/CoL,GAAO/K,QAAO,SAACzF,EAASI,GAC7B,OAAIA,EAAMwQ,MAAM,KAAOxL,EAAYpF,EAE5BI,EAAMwQ,QAJQ,kBwB8DC,EA+IhB+P,8BA/IgB,IAiJhBC,gBAAkB,WACxB,GAAI5a,UAAU0X,UAAW,CACvB,IAAMpV,EAAO4I,KAAKC,UAChB3L,GACGP,QAAO,SAAAjF,GAAO,OAAIA,EAAQG,cAC1ByM,KAAI,cAAGxM,MAAH,oCAET4F,UAAU0X,UAAUmD,UAAUvY,KAxJV,EA4JhBwY,mBAAqB,WACvB9a,UAAU0X,WACZ1X,UAAU0X,UACPqD,WACA5E,MAAK,SAAA7T,GAAI,OAAI,EAAK0Y,qBAAqB1Y,OAhKtB,EA8wBhB2Y,YAAc,SAAC5O,GACrBA,EAAEhK,iBADqC,IAE/B6Y,EAAmB7O,EAAnB6O,OAAQC,EAAW9O,EAAX8O,OAChB,EAAKnH,UAAS,SAAAF,GAAK,MAAK,CACtBtX,QAASsX,EAAMtX,QAAU0e,EACzBze,QAASqX,EAAMrX,QAAU0e,OAnxBL,EAuxBhBH,qBAAuB,SAACI,GAC9B,IAAIC,EACJ,IACEA,EAAiBnQ,KAAKM,MAAM4P,GAC5B,MAAO/O,IACT,GACE5F,MAAM6U,QAAQD,IACdA,EAAe/b,OAAS,GACxB+b,EAAe,GAAGhiB,KAClB,CACAmG,GAAWoG,EAAepG,IAE1B,IAAI0Y,EAAcpT,IACdqT,EAAc,EACdC,EAActT,IACduT,EAAc,EAEZxT,EAAOlM,KAAKsD,IAAL,MAAAtD,KAAI,YAAQ0iB,EAAezU,KAAI,SAAA5M,GAAO,OAAIA,EAAQV,OACzD0L,EAAOrM,KAAKsD,IAAL,MAAAtD,KAAI,YAAQ0iB,EAAezU,KAAI,SAAA5M,GAAO,OAAIA,EAAQT,OAEzDwC,EAAW,SAACzC,EAAWC,GAC3B,OAAOZ,KAAKsE,IAAI3D,EAAIC,EAAID,EAAIC,EAAIA,EAAID,IAGtC+hB,EAAe1d,SAAQ,SAAA4d,GAAkB,IAAD,EACb9f,EAAyB8f,GADZ,mBAC/B/gB,EAD+B,KAC3BC,EAD2B,KACvBC,EADuB,KACnBC,EADmB,KAEtCud,EAAcvf,KAAKsD,IAAIic,EAAa1d,GACpC4d,EAAczf,KAAKsD,IAAImc,EAAa3d,GACpC0d,EAAcxf,KAAKyF,IAAI+Z,EAAazd,GACpC2d,EAAc1f,KAAKyF,IAAIia,EAAa1d,MAGtC,IAAM6gB,EAAkBzf,EAASmc,EAAaC,GAAe,EACvDsD,EAAkB1f,EAASqc,EAAaC,GAAe,EAEvDnd,EACJ,EAAK4Y,MAAMP,QACX,EAAKO,MAAMtX,QAj3Be,IAm3B1Bgf,EACIrgB,EACJ,EAAK2Y,MAAMN,QACX,EAAKM,MAAMrX,QAr3Bc,EAu3BzBgf,EAEFjc,GAAQ,sBACHA,IADG,YAEH6b,EAAezU,KAAI,SAAA2U,GACpB,IAAMG,EAAYrhB,EAAiBkhB,GAGnC,OAFAG,EAAUpiB,GAAK4B,EAAK2J,EACpB6W,EAAUniB,GAAK4B,EAAK6J,EACb0W,OAGX,EAAK7B,gBA90Be,EA+2BhB8B,clCt7BH,SACLC,EACAC,GAEA,IAAIC,EAAS,EACb,OAAO,WAAiB,IAAD,uBAAZC,EAAY,yBAAZA,EAAY,gBACrBC,aAAaF,GACbA,EAAS/b,OAAOkc,YAAW,kBAAML,EAAE,WAAF,EAAMG,KAAOF,IkC+6BxBK,EAAS,W3B7xB5B,IACL1c,EACAsU,EADAtU,E2B6xBqBA,G3B5xBrBsU,E2B4xB+B,EAAKA,M3B1xBpCqI,aAAaC,QAxMW,aAwMgBlR,KAAKC,UAAU3L,IACvD2c,aAAaC,QAxMiB,mBAwMgBlR,KAAKC,UAAU2I,M2B0xB1D,KA/2BD,EAAKoD,cAAcmF,eAAepO,IAClC,EAAKiJ,cAAcmF,eAAe/M,IAClC,EAAK4H,cAAcmF,eAAe9M,IAClC,EAAK2H,cAAcmF,eAAepN,IAClC,EAAKiI,cAAcmF,eAAehN,IAClC,EAAK6H,cAAcmF,eAAe7M,IAElC,EAAK0H,cAAcmF,eAAe9K,IAClC,EAAK2F,cAAcmF,eAAe5K,IAClC,EAAKyF,cAAcmF,eAAe1K,IAClC,EAAKuF,cAAcmF,eAAezK,IAClC,EAAKsF,cAAcmF,eAAevK,IAClC,EAAKoF,cAAcmF,eAAexK,IAClC,EAAKqF,cAAcmF,eAAetK,IAClC,EAAKmF,cAAcmF,eAAepK,IAElC,EAAKiF,cAAcmF,eAAe5I,IAClC,EAAKyD,cAAcmF,eAAe3I,IAElC,EAAKwD,cAAcmF,eAAe7H,IAClC,EAAK0C,cAAcmF,eAAe5H,IAClC,EAAKyC,cAAcmF,eAAe1H,IAClC,EAAKuC,cAAcmF,eAAelH,IAElC,EAAK+B,cAAcmF,eAAehG,IAClC,EAAKa,cAAcmF,eAAe9F,IA3BZ,EAL1B,iFA+CIhW,SAASoC,iBAAiB,UAAW0I,KAAKgJ,WAAW,GACrD9T,SAASoC,iBAAiB,YAAa0I,KAAK0O,0BAC5Cha,OAAO4C,iBAAiB,SAAU0I,KAAKyO,UAAU,GAHxB,M3BgBtB,WACL,IAAM5P,EAAgBiS,aAAaG,QA5KX,cA6KlBnS,EAAagS,aAAaG,QA5KF,oBA8K1B9c,EAAW,GACf,GAAI0K,EACF,IACE1K,EAAW0L,KAAKM,MAAMtB,GACtB,MAAOmC,IAKX,IAAIjC,EAAW,KACf,GAAID,EACF,IACEC,EAAWc,KAAKM,MAAMrB,GACtB,MAAOkC,IAKX,OAAOpC,GAAQzK,EAAU4K,G2BjCqBmS,GAA1B1W,EALO,EAKjBrG,SAAuB4K,EALN,EAKMA,SAE3BvE,IACFrG,GAAWqG,GAGTuE,EACFiB,KAAK2I,SAAS5J,GAEdiB,KAAKwO,gBA5DX,6CAiEItZ,SAASW,oBAAoB,UAAWmK,KAAKgJ,WAAW,GACxD9T,SAASW,oBACP,YACAmK,KAAK0O,0BACL,GAEFha,OAAOmB,oBAAoB,SAAUmK,KAAKyO,UAAU,KAvExD,+BAyKmB,IAAD,OACRnV,EAAc5E,OAAOyc,WA1NG,IA2NxB5X,EAAe7E,OAAO0c,YA1NC,EA4N7B,OACE,yBACEvQ,UAAU,YACVwQ,MAAO,SAAArQ,GACLA,EAAE9J,cAAcoa,QACd,aACAzR,KAAKC,UACH3L,GACGP,QAAO,SAAAjF,GAAO,OAAIA,EAAQG,cAC1ByM,KAAI,cAAGxM,MAAH,qCAGXoF,GAAWsG,EAAuBtG,IAClC,EAAKqa,cACLxN,EAAEhK,kBAEJua,OAAQ,SAAAvQ,GACNA,EAAE9J,cAAcoa,QACd,aACAzR,KAAKC,UACH3L,GACGP,QAAO,SAAAjF,GAAO,OAAIA,EAAQG,cAC1ByM,KAAI,cAAGxM,MAAH,qCAGXiS,EAAEhK,kBAEJwO,QAAS,SAAAxE,GACP,IAAM+O,EAAQ/O,EAAE9J,cAAcC,QAAQ,QACtC,EAAKwY,qBAAqBI,GAC1B/O,EAAEhK,mBAGJ,kBAAC,GAAD,CACE6U,cAAe7L,KAAK6L,cACpBC,iBAAkB9L,KAAK8L,iBACvB/M,SAAQ,eAAOiB,KAAKyI,OACpBtU,SAAUA,GACVwX,aAAc,SAAApM,GACZ,EAAKoJ,SAAS,CAAEZ,YAAaxI,IAC7BpL,GAAWoG,EAAepG,IAC1Be,SAAS2Y,gBAAgBzX,MAAM0X,OACnB,SAAVvO,EAAmB,OAAS,YAC9B,EAAKiP,eAEPxR,OAAQgD,KAAKhD,SAEf,4BACEpO,GAAG,SACHwH,MAAO,CACL3H,MAAO6K,EACP5K,OAAQ6K,GAEV9K,MAAO6K,EAAc5E,OAAOwJ,iBAC5BxP,OAAQ6K,EAAe7E,OAAOwJ,iBAC9BsT,IAAK,SAAAxU,GACiB,OAAhB,EAAKA,SACP,EAAKA,OAASA,EACd,EAAKb,GAAK+Q,IAAMlQ,OAAO,EAAKA,SAE1B,EAAKsS,2BACP,EAAKA,2BACL,EAAKA,8BAA2B/S,GAE9BS,IACFA,EAAO1F,iBAAiB,QAAS,EAAKsY,YAAa,CACjD6B,SAAS,IAEX,EAAKnC,yBAA2B,kBAC9BtS,EAAOnH,oBAAoB,QAAS,EAAK+Z,cAKzCtW,IAAgB0U,IAChBzU,IAAiB0U,KAEjBD,GAAkB1U,EAClB2U,GAAmB1U,EACnByD,EACGM,WAAW,MACXoU,MAAMhd,OAAOwJ,iBAAkBxJ,OAAOwJ,qBAI/C6C,cAAe,SAAAC,GACbA,EAAEhK,iBADgB,MAGDmX,GAA4BnN,EAAG,EAAKyH,OAA7Cxa,EAHU,EAGVA,EAAGC,EAHO,EAGPA,EAELS,EAAUqQ,GAAqB7K,GAAUlG,EAAGC,GAC7CS,GAcAA,EAAQG,aACXqF,GAAWoG,EAAepG,IAC1BxF,EAAQG,YAAa,EACrB,EAAK0f,eAGPtN,GAAiB,CACftE,QAAQ,CACNjI,UAAU0X,WAAa,CACrB/K,MAAO,OACPC,OAAQ,EAAKgO,iBAEf5a,UAAU0X,WAAa,CACrB/K,MAAO,QACPC,OAAQ,kBAAM,EAAKkO,wBAPhB,mBASF,EAAK5D,cAAc8F,oBACpBxd,GACA,EAAKsU,MACL,EAAKqD,oBAGTvV,IAAKyK,EAAEqN,QACP7X,KAAMwK,EAAEoN,WApCRlN,GAAiB,CACftE,QAAS,CACPjI,UAAU0X,WAAa,CACrB/K,MAAO,QACPC,OAAQ,kBAAM,EAAKkO,wBAGvBlZ,IAAKyK,EAAEqN,QACP7X,KAAMwK,EAAEoN,WA+BdwD,YAAa,SAAA5Q,GAQX,GAPoB,OAAhBkN,IAIFA,GAAYlN,GAGG,IAAbA,EAAE6Q,OAAN,CAEA7Q,EAAEhK,iBAIEqB,EAAYnD,SAASyZ,gBACvBzZ,SAASyZ,cAAcC,OAfT,MhC3VrB,SACLza,EACAlG,EACAC,EACAoL,EACAC,EACApI,EACAC,GAEA,IAAM6M,EAAa5E,EACjBlF,EACAmF,EACAC,EACApI,EACAC,GANF,EAS6D,CAC3D6M,EAAW5D,WACX4D,EAAW3D,UACXiB,KACA,SAAA6C,GAAS,OACPA,GACAA,EAAUnQ,GAAKA,GACfA,GAAKmQ,EAAUnQ,EAAImQ,EAAU3P,OAC7B2P,EAAUlQ,GAAKA,GACfA,GAAKkQ,EAAUlQ,EAAIkQ,EAAU1P,UAlBjC,mBAqBA,MAAO,CACLojB,0BAtBF,KAuBEC,wBAvBF,MgCyWcC,CACF7d,GACA6M,EAAEoN,QAxXkB,IAyXpBpN,EAAEqN,QAxXiB,EAyXnB/U,EACAC,EACA,EAAKkP,MAAMtX,QACX,EAAKsX,MAAMrX,SATX0gB,EApBc,EAoBdA,0BACAC,EArBc,EAqBdA,wBArBc,EAgCC5D,GAA4BnN,EAAG,EAAKyH,OAA7Cxa,EAhCQ,EAgCRA,EAAGC,EAhCK,EAgCLA,EAELS,EAAUZ,EACd,EAAK0a,MAAMV,YACX9Z,EACAC,EACA,EAAKua,MAAMtC,uBACX,EAAKsC,MAAMpC,2BACX,UACA,EACA,EACA,KAIEhS,GAA+B,EAC/B4d,GAAqB,EACrBC,GAAkB,EAClBjT,EAAuC,KACvCkT,GAA4B,EAChC,GAA+B,cAA3B,EAAK1J,MAAMV,YAA6B,CAC1C,IAAMqK,EAAgBle,EACpBC,GACA,CAAElG,IAAGC,KACL,EAAKua,OAOP,GAJA,EAAKE,SAAS,CACZb,gBAAiBsK,EAAgBA,EAAczjB,QAAU,OAGvDyjB,EACF/d,EAAe+d,EAAc/d,aAC7Ba,SAAS2Y,gBAAgBzX,MAAM0X,OAA/B,UAA2CzZ,EAA3C,WACA4d,GAAqB,OAEJjT,GACf7K,GAASP,QAAO,SAAA8G,GAAE,OAAIA,EAAG5L,cACzBb,EACAC,IAGgB8S,EAAE6C,WAClB1P,GAAWoG,EAAepG,MAE5B8K,EAAaD,GAAqB7K,GAAUlG,EAAGC,MAQxC+Q,EAAWnQ,aACdmQ,EAAWnQ,YAAa,EACxBqjB,GAA4B,GAI1BnR,EAAE8C,SACJ3P,GAAQ,sBACHA,GAASoH,KAAI,SAAA5M,GAAO,sBAClBA,EADkB,CAErBG,YAAY,QAHR,YAKHqF,GACAP,QAAO,SAAAjF,GAAO,OAAIA,EAAQG,cAC1ByM,KAAI,SAAA5M,GACH,IAAMZ,EAAaiB,EAAiBL,GAEpC,OADAZ,EAAWe,YAAa,EACjBf,cAOnBoG,GAAWoG,EAAepG,IAG5B,GAAIG,EAAc3F,GAAlB,CACE,IAAI0jB,EAAQrR,EAAEoN,QACVkE,EAAQtR,EAAEqN,QACd,IAAKrN,EAAE8C,OAAQ,CACb,IAAMyO,EAA0B,EAAKC,sCACnCvkB,EACAC,GAEEqkB,IACF5jB,EAAQV,EAAIskB,EAAwBE,eACpC9jB,EAAQT,EAAIqkB,EAAwBG,eACpCL,EAAQE,EAAwBI,SAChCL,EAAQC,EAAwBK,UAIpC/d,EAAY,CACVC,SAAU,GACV7G,EAAGokB,EACHnkB,EAAGokB,EACHnkB,YAAa,EAAKsa,MAAMtC,uBACxBpR,KAAM,EAAK0T,MAAMR,gBACjBjT,SAAU,SAAAiC,GACR8W,GAAepf,EAASsI,EAAM,EAAKwR,MAAMR,iBACzC9T,GAAQ,sBAAOA,IAAP,gBAAsBxF,EAAtB,CAA+BG,YAAY,MACnD,EAAK6Z,SAAS,CACZd,gBAAiB,KACjBE,YAAa,qBA3BrB,CAkC+B,SAA3B,EAAKU,MAAMV,aACb5T,GAAQ,sBAAOA,IAAP,gBAAsBxF,EAAtB,CAA+BG,YAAY,MACnD,EAAK6Z,SAAS,CACZd,gBAAiB,KACjBE,YAAa,gBAGf5T,GAAQ,sBAAOA,IAAP,CAAiBxF,IACzB,EAAKga,SAAS,CAAEd,gBAAiBlZ,KAGnC,IAAIkkB,EAAQ5kB,EACR6kB,EAAQ5kB,GAER4jB,GAA6BC,KAC/Bc,EAAQ7R,EAAEoN,QAjgBU,IAkgBpB0E,EAAQ9R,EAAEqN,QAjgBS,GAogBrB,IAAM0E,EAAc,SAAC/R,GAAmB,IAAD,EAErC,GADeA,EAAE1I,kBACOC,YAAxB,CAIA,GAAIuZ,EAA2B,CAC7B,IAAM7jB,EAAI+S,EAAEoN,QA5gBM,IA6gBZve,EAAK5B,EAAI4kB,EAGf,OAFA,EAAKlK,UAAS,SAAAF,GAAK,MAAK,CAAEtX,QAASsX,EAAMtX,QAAUtB,WACnDgjB,EAAQ5kB,GAIV,GAAI8jB,EAAyB,CAC3B,IAAM7jB,EAAI8S,EAAEqN,QAnhBK,EAohBXve,EAAK5B,EAAI4kB,EAGf,OAFA,EAAKnK,UAAS,SAAAF,GAAK,MAAK,CAAErX,QAASqX,EAAMrX,QAAUtB,WACnDgjB,EAAQ5kB,GAIV,GAAI+jB,GAAsB,EAAKxJ,MAAMX,gBAAiB,CACpD,IAAMpN,EAAK,EAAK+N,MAAMX,gBAChBpK,EAAmBvJ,GAASP,QAAO,SAAA8G,GAAE,OAAIA,EAAG5L,cAClD,GAAgC,IAA5B4O,EAAiBzJ,OAAc,CAAC,IAAD,EAChBka,GAA4BnN,EAAG,EAAKyH,OAA7Cxa,EADyB,EACzBA,EAAGC,EADsB,EACtBA,EAmEX,OAjEAwP,EAAiBpL,SAAQ,SAAA3D,GACvB,OAAQ0F,GACN,IAAK,KACH1F,EAAQF,OAASE,EAAQV,EAAI4kB,EAC7BlkB,EAAQV,EAAI4kB,EACR7R,EAAE6C,UACJlV,EAAQT,GAAKS,EAAQD,OAASC,EAAQF,MACtCE,EAAQD,OAASC,EAAQF,QAEzBE,EAAQD,QAAUC,EAAQT,EAAI4kB,EAC9BnkB,EAAQT,EAAI4kB,GAEd,MACF,IAAK,KACHnkB,EAAQF,MAAQokB,EAAQlkB,EAAQV,EAC5B+S,EAAE6C,UACJlV,EAAQT,GAAKS,EAAQD,OAASC,EAAQF,MACtCE,EAAQD,OAASC,EAAQF,QAEzBE,EAAQD,QAAUC,EAAQT,EAAI4kB,EAC9BnkB,EAAQT,EAAI4kB,GAEd,MACF,IAAK,KACHnkB,EAAQF,OAASE,EAAQV,EAAI4kB,EAC7BlkB,EAAQV,EAAI4kB,EACR7R,EAAE6C,SACJlV,EAAQD,OAASC,EAAQF,MAEzBE,EAAQD,OAASokB,EAAQnkB,EAAQT,EAEnC,MACF,IAAK,KACHS,EAAQF,OAASR,EAAI4kB,EACjB7R,EAAE6C,SACJlV,EAAQD,OAASC,EAAQF,MAEzBE,EAAQD,QAAUR,EAAI4kB,EAExB,MACF,IAAK,IACHnkB,EAAQD,QAAUC,EAAQT,EAAI4kB,EAC9BnkB,EAAQT,EAAI4kB,EACZ,MACF,IAAK,IACHnkB,EAAQF,OAASE,EAAQV,EAAI4kB,EAC7BlkB,EAAQV,EAAI4kB,EACZ,MACF,IAAK,IACHlkB,EAAQD,OAASokB,EAAQnkB,EAAQT,EACjC,MACF,IAAK,IACHS,EAAQF,MAAQokB,EAAQlkB,EAAQV,EAIpCyM,EAAGzM,EAAIU,EAAQV,EACfyM,EAAGxM,EAAIS,EAAQT,EACfwM,EAAG3L,MAAQ,QAEb8jB,EAAQ5kB,EACR6kB,EAAQ5kB,EAERyf,GAAQzN,qBACR,EAAKsO,eAKT,aAAIvP,SAAJ,aAAI,EAAYnQ,WAAY,CAG1BojB,GAAkB,EAClB,IAAMxU,EAAmBvJ,GAASP,QAAO,SAAA8G,GAAE,OAAIA,EAAG5L,cAClD,GAAI4O,EAAiBzJ,OAAQ,CAAC,IAAD,EACVka,GAA4BnN,EAAG,EAAKyH,OAA7Cxa,EADmB,EACnBA,EAAGC,EADgB,EAChBA,EAWX,OATAwP,EAAiBpL,SAAQ,SAAA3D,GACvBA,EAAQV,GAAKA,EAAI4kB,EACjBlkB,EAAQT,GAAKA,EAAI4kB,KAEnBD,EAAQ5kB,EACR6kB,EAAQ5kB,EAERyf,GAAQzN,qBACR,EAAKsO,eAOT,IAAM3G,EAAkB,EAAKY,MAAMZ,gBACnC,GAAKA,EAAL,CAEA,IAAIpZ,EACFuS,EAAEoN,QAjoBgB,IAmoBlBvG,EAAgB5Z,EAChB,EAAKwa,MAAMtX,QACTzC,EACFsS,EAAEqN,QAroBe,EAuoBjBxG,EAAgB3Z,EAChB,EAAKua,MAAMrX,QACbyW,EAAgBpZ,MAAQA,EAExBoZ,EAAgBnZ,OAASsS,EAAE6C,SACvBvW,KAAKsE,IAAInD,GAASnB,KAAK0lB,KAAKtkB,GAC5BA,EACJmZ,EAAgB9Y,MAAQ,KAEO,cAA3B,EAAK0Z,MAAMV,cACb5T,G/BvtBT,SACLA,EACAsD,GACC,IAAD,EAMIrH,EAAyBqH,GAN7B,mBAEEwb,EAFF,KAGEC,EAHF,KAIEC,EAJF,KAKEC,EALF,KAsBA,OAfAjf,EAAS7B,SAAQ,SAAA3D,GAAY,IAAD,EAMtByB,EAAyBzB,GANH,mBAExB0C,EAFwB,KAGxBE,EAHwB,KAIxBD,EAJwB,KAKxBE,EALwB,KAO1B7C,EAAQG,WACW,cAAjBH,EAAQX,MACRilB,GAAe5hB,GACf6hB,GAAe3hB,GACf4hB,GAAe7hB,GACf8hB,GAAe5hB,KAGZ2C,E+B8rBkBkf,CAAalf,GAAU0T,IAGpC8F,GAAQzN,gBACR,EAAKsO,iBAGD8E,EAAY,SAAZA,EAAatS,GAAmB,IAAD,EACM,EAAKyH,MAAtCZ,EAD2B,EAC3BA,gBAAiBE,EADU,EACVA,YA6BzB,GA3BAmG,GAAc,KACdxZ,OAAOmB,oBAAoB,YAAakd,GACxCre,OAAOmB,oBAAoB,UAAWyd,GAEtC1F,MAWE3O,GACCiT,GACAC,IAEGnR,EAAE6C,SACJ5E,EAAWnQ,YAAa,GAExBqF,GAAWoG,EAAepG,IAC1B8K,EAAWnQ,YAAa,IAIJ,OAApB+Y,EAIF,OAFA1T,GAAWoG,EAAepG,SAC1B,EAAKqa,cAIa,cAAhBzG,EACF5T,GAAWA,GAASiE,MAAM,GAAI,GAE9ByP,EAAgB/Y,YAAa,EAG/B,EAAK6Z,SAAS,CACZd,gBAAiB,KACjBE,YAAa,cAGf4F,GAAQ4F,kBACR,EAAK/E,eAGPN,GAAcoF,EAEd5e,OAAO4C,iBAAiB,YAAayb,GACrCre,OAAO4C,iBAAiB,UAAWgc,GAGnC3F,GAAQzN,gBACR,EAAKsO,iBAEPgF,cAAe,SAAAxS,GAAM,IAAD,EACDmN,GAA4BnN,EAAG,EAAKyH,OAA7Cxa,EADU,EACVA,EAAGC,EADO,EACPA,EAELulB,EAAoBzU,GAAqB7K,GAAUlG,EAAGC,GAEtDS,EAAUZ,EACd,OACAE,EACAC,EACA,EAAKua,MAAMtC,uBACX,EAAKsC,MAAMpC,2BACX,UACA,EACA,EACA,KAGEvR,EAAW,GACXud,EAAQrR,EAAEoN,QACVkE,EAAQtR,EAAEqN,QAEd,GAAIoF,GAAqBnf,EAAcmf,GACrCtf,GAAWA,GAASP,QAClB,SAAAjF,GAAO,OAAIA,EAAQC,KAAO6kB,EAAkB7kB,MAE9C,EAAK4f,cAEL3a,OAAOsC,OAAOxH,EAAS8kB,GAEvB9kB,EAAQV,EAAIwlB,EAAkBxlB,EAAIwlB,EAAkBhlB,MAAQ,EAC5DE,EAAQT,EAAIulB,EAAkBvlB,EAAIulB,EAAkB/kB,OAAS,EAC7DoG,EAAW2e,EAAkBxc,KAC7Bob,EACE,EAAK5J,MAAMtX,QACXsiB,EAAkBxlB,EAxvBA,IA0vBlBwlB,EAAkBhlB,MAAQ,EAC5B6jB,EACE,EAAK7J,MAAMrX,QACXqiB,EAAkBvlB,EA5vBD,EA8vBjBulB,EAAkB/kB,OAAS,OACxB,IAAKsS,EAAE8C,OAAQ,CACpB,IAAMyO,EAA0B,EAAKC,sCACnCvkB,EACAC,GAGEqkB,IACF5jB,EAAQV,EAAIskB,EAAwBE,eACpC9jB,EAAQT,EAAIqkB,EAAwBG,eACpCL,EAAQE,EAAwBI,SAChCL,EAAQC,EAAwBK,UAIpC/d,EAAY,CACVC,WACA7G,EAAGokB,EACHnkB,EAAGokB,EACHnkB,YAAaQ,EAAQR,YACrB4G,KAAMpG,EAAQoG,MAAQ,EAAK0T,MAAMR,gBACjCjT,SAAU,SAAAiC,GACR8W,GACEpf,EACAsI,EACAtI,EAAQoG,MAAQ,EAAK0T,MAAMR,iBAE7B9T,GAAQ,sBAAOA,IAAP,gBAAsBxF,EAAtB,CAA+BG,YAAY,MACnD,EAAK6Z,SAAS,CACZd,gBAAiB,KACjBE,YAAa,kBAKrBgL,YAAa,SAAA/R,GAEX,IAD4B0S,QAAQ1S,EAAE2S,UACgB,cAA3B,EAAKlL,MAAMV,YAAtC,CAFgB,MAKCoG,GAA4BnN,EAAG,EAAKyH,OAA7Cxa,EALQ,EAKRA,EAAGC,EALK,EAKLA,EACLkkB,EAAgBle,EACpBC,GACA,CAAElG,IAAGC,KACL,EAAKua,OAEP,GAAI2J,GAAiBA,EAAc/d,aACjCa,SAAS2Y,gBAAgBzX,MAAM0X,OAA/B,UAA2CsE,EAAc/d,aAAzD,eADF,CAIA,IAAM4K,EAAaD,GAAqB7K,GAAUlG,EAAGC,GACrD,GAAI+Q,EAAY,CACd,IAAM5K,EAAeV,EAAWsL,EAAYhR,EAAGC,EAAG,CAChDiD,QAAS,EAAKsX,MAAMtX,QACpBC,QAAS,EAAKqX,MAAMrX,UAEtB8D,SAAS2Y,gBAAgBzX,MAAM0X,OAASzZ,EAAY,UAC7CA,EAD6C,uBAIpDa,SAAS2Y,gBAAgBzX,MAAM0X,OAA/B,WA3wBd,4DAu1BgD7f,EAAWC,GACvD,IAAM0lB,E1Br6BH,SACLzf,EACAlG,EACAC,GAIA,IAFA,IAAI+Q,EAAa,KAERC,EAAI/K,EAASF,OAAS,EAAGiL,GAAK,IAAKA,EAAG,CAAC,IAAD,EACpB9O,EAAyB+D,EAAS+K,IADd,mBACtC/P,EADsC,KAClCC,EADkC,KAC9BC,EAD8B,KAC1BC,EAD0B,KAE7C,GAAIH,EAAKlB,GAAKA,EAAIoB,GAAMD,EAAKlB,GAAKA,EAAIoB,EAAI,CACxC2P,EAAa9K,EAAS+K,GACtB,OAGJ,OAAOD,E0Bu5BwB4U,CAA6B1f,GAAUlG,EAAGC,GACvE,GAAI0lB,EAAsB,CACxB,IAAMnB,EACJmB,EAAqB3lB,EAAI2lB,EAAqBnlB,MAAQ,EAClDikB,EACJkB,EAAqB1lB,EAAI0lB,EAAqBllB,OAAS,EAOzD,GANyBpB,KAAKyC,MAC5B9B,EAAIwkB,EACJvkB,EAAIwkB,GAh3B0B,GA+3B9B,MAAO,CAAEC,SATP3S,KAAKyI,MAAMtX,QACXyiB,EAAqB3lB,EAv5BG,IAy5BxB2lB,EAAqBnlB,MAAQ,EAMZmkB,SAJjB5S,KAAKyI,MAAMrX,QACXwiB,EAAqB1lB,EA35BE,EA65BvB0lB,EAAqBllB,OAAS,EACH+jB,iBAAgBC,qBA/2BrD,2CAy3BI3V,GAAY5I,GAAU6L,KAAK7D,GAAK6D,KAAKhD,OAAS,CAC5C7L,QAAS6O,KAAKyI,MAAMtX,QACpBC,QAAS4O,KAAKyI,MAAMrX,QACpBmM,oBAAqByC,KAAKyI,MAAMlL,sBAElCyC,KAAKsQ,gBACD3C,GAAQmG,gBACVnG,GAAQoG,UAAUpG,GAAQrN,qBAAqBnM,KAC/CwZ,GAAQqG,sBAj4Bd,GAAyBvP,IAAMyE,WAs4BzB+K,GAAc/e,SAASgf,eAAe,QAC5CC,IAASrS,OAAO,kBAAC,GAAD,MAASmS,M","file":"static/js/main.ffb3f4c0.chunk.js","sourcesContent":["// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nexport const LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nexport function randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nexport function withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n","import { randomSeed } from \"../random\";\nimport nanoid from \"nanoid\";\nimport { Drawable } from \"roughjs/bin/core\";\n\nexport function newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    id: nanoid(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    isSelected: false,\n    seed: randomSeed(),\n    shape: null as Drawable | Drawable[] | null\n  };\n  return element;\n}\n\nexport function duplicateElement(element: ReturnType<typeof newElement>) {\n  const copy = { ...element };\n  delete copy.shape;\n  copy.id = nanoid();\n  copy.seed = randomSeed();\n  return copy;\n}\n","// https://stackoverflow.com/a/6853926/232122\nexport function distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nexport function rotate(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number\n) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { rotate } from \"../math\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nexport function getElementAbsoluteCoords(element: ExcalidrawElement) {\n  return [\n    element.width >= 0 ? element.x : element.x + element.width, // x1\n    element.height >= 0 ? element.y : element.y + element.height, // y1\n    element.width >= 0 ? element.x + element.width : element.x, // x2\n    element.height >= 0 ? element.y + element.height : element.y // y2\n  ];\n}\n\nexport function getDiamondPoints(element: ExcalidrawElement) {\n  // Here we add +1 to avoid these numbers to be 0\n  // otherwise rough.js will throw an error complaining about it\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nexport function getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { SceneScroll } from \"../scene/types\";\n\ntype Sides = \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\";\n\nexport function handlerRectangles(\n  element: ExcalidrawElement,\n  { scrollX, scrollY }: SceneScroll\n) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers = {} as { [T in Sides]: number[] };\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + scrollX - 4,\n      elementY1 - margin + scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + scrollX - 4,\n      elementY2 - margin + scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + scrollX + marginX,\n    elementY1 - margin + scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + scrollX - marginX,\n    elementY1 - margin + scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + scrollX + marginX,\n    elementY2 - margin + scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + scrollX - marginX,\n    elementY2 - margin + scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    } as typeof handlers;\n  }\n\n  return handlers;\n}\n","import { distanceBetweenPointAndSegment } from \"../math\";\n\nimport { ExcalidrawElement } from \"./types\";\nimport {\n  getArrowPoints,\n  getDiamondPoints,\n  getElementAbsoluteCoords\n} from \"./bounds\";\n\nexport function hitTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number\n): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = Math.abs(element.width) / 2;\n    const b = Math.abs(element.height) / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    const [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { ExcalidrawElement } from \"./types\";\n\nimport { handlerRectangles } from \"./handlerRectangles\";\nimport { SceneScroll } from \"../scene/types\";\n\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\n\nexport function resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  { scrollX, scrollY }: SceneScroll\n): HandlerRectanglesRet | false {\n  if (!element.isSelected || element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, { scrollX, scrollY });\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key as HandlerRectanglesRet]!;\n\n    return (\n      x + scrollX >= handler[0] &&\n      x + scrollX <= handler[0] + handler[2] &&\n      y + scrollY >= handler[1] &&\n      y + scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as HandlerRectanglesRet;\n  }\n\n  return false;\n}\n\nexport function getElementWithResizeHandler(\n  elements: readonly ExcalidrawElement[],\n  { x, y }: { x: number; y: number },\n  { scrollX, scrollY }: SceneScroll\n) {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const resizeHandle = resizeTest(element, x, y, {\n      scrollX,\n      scrollY\n    });\n    return resizeHandle ? { element, resizeHandle } : null;\n  }, null as { element: ExcalidrawElement; resizeHandle: ReturnType<typeof resizeTest> } | null);\n}\n","import { ExcalidrawElement, ExcalidrawTextElement } from \"./types\";\n\nexport function isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n","export const KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ENTER: \"Enter\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nexport const META_KEY = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform)\n  ? \"metaKey\"\n  : \"ctrlKey\";\n\nexport function isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n","import { KEYS } from \"../keys\";\n\ntype TextWysiwygParams = {\n  initText: string;\n  x: number;\n  y: number;\n  strokeColor: string;\n  font: string;\n  onSubmit: (text: string) => void;\n};\n\nexport function textWysiwyg({\n  initText,\n  x,\n  y,\n  strokeColor,\n  font,\n  onSubmit\n}: TextWysiwygParams) {\n  // Using contenteditable here as it has dynamic width.\n  // But this solution has an issue — it allows to paste\n  // multiline text, which is not currently supported\n  const editable = document.createElement(\"div\");\n  editable.contentEditable = \"true\";\n  editable.tabIndex = 0;\n  editable.innerText = initText;\n  editable.dataset.type = \"wysiwyg\";\n\n  Object.assign(editable.style, {\n    color: strokeColor,\n    position: \"absolute\",\n    top: y + \"px\",\n    left: x + \"px\",\n    transform: \"translate(-50%, -50%)\",\n    textAlign: \"center\",\n    display: \"inline-block\",\n    font: font,\n    padding: \"4px\",\n    outline: \"transparent\",\n    whiteSpace: \"nowrap\",\n    minHeight: \"1em\"\n  });\n\n  editable.onkeydown = ev => {\n    if (ev.key === KEYS.ESCAPE) {\n      ev.preventDefault();\n      if (initText) {\n        editable.innerText = initText;\n        handleSubmit();\n        return;\n      }\n      cleanup();\n      return;\n    }\n    if (ev.key === KEYS.ENTER) {\n      ev.preventDefault();\n      handleSubmit();\n    }\n  };\n  editable.onblur = handleSubmit;\n  // override paste to disallow non-textual data, and replace newlines\n  editable.onpaste = ev => {\n    ev.preventDefault();\n    try {\n      const text = ev.clipboardData!.getData(\"text\").replace(/\\n+/g, \" \");\n      editable.textContent = text;\n    } catch {}\n  };\n\n  function stopEvent(ev: Event) {\n    ev.stopPropagation();\n  }\n\n  function handleSubmit() {\n    if (editable.innerText) {\n      onSubmit(editable.innerText);\n    }\n    cleanup();\n  }\n\n  function cleanup() {\n    editable.onblur = null;\n    editable.onkeydown = null;\n    editable.onpaste = null;\n    window.removeEventListener(\"wheel\", stopEvent, true);\n    document.body.removeChild(editable);\n  }\n\n  window.addEventListener(\"wheel\", stopEvent, true);\n  document.body.appendChild(editable);\n  editable.focus();\n  const selection = window.getSelection();\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(editable);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export function getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\nexport function capitalizeString(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\n// https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\nexport function measureText(text: string, font: string) {\n  const line = document.createElement(\"div\");\n  const body = document.body;\n  line.style.position = \"absolute\";\n  line.style.whiteSpace = \"nowrap\";\n  line.style.font = font;\n  body.appendChild(line);\n  // Now we can measure width and height of the letter\n  line.innerText = text;\n  const width = line.offsetWidth;\n  const height = line.offsetHeight;\n  // Now creating 1px sized item that will be aligned to baseline\n  // to calculate baseline shift\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  span.style.overflow = \"hidden\";\n  span.style.width = \"1px\";\n  span.style.height = \"1px\";\n  line.appendChild(span);\n  // Baseline is important for positioning text on canvas\n  const baseline = span.offsetTop + span.offsetHeight;\n  document.body.removeChild(line);\n\n  return { width, height, baseline };\n}\n\nexport function debounce<T extends any[]>(\n  fn: (...args: T) => void,\n  timeout: number\n) {\n  let handle = 0;\n  return (...args: T) => {\n    clearTimeout(handle);\n    handle = window.setTimeout(() => fn(...args), timeout);\n  };\n}\n","import { measureText } from \"../utils\";\nimport { ExcalidrawTextElement } from \"./types\";\n\nexport const redrawTextBoundingBox = (element: ExcalidrawTextElement) => {\n  const metrics = measureText(element.text, element.font);\n  element.width = metrics.width;\n  element.height = metrics.height;\n  element.baseline = metrics.baseline;\n};\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport function getScrollBars(\n  elements: readonly ExcalidrawElement[],\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nexport function isOverScrollBars(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(\n    elements,\n    canvasWidth,\n    canvasHeight,\n    scrollX,\n    scrollY\n  );\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport function setSelection(\n  elements: readonly ExcalidrawElement[],\n  selection: ExcalidrawElement\n) {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2\n  ] = getElementAbsoluteCoords(selection);\n  elements.forEach(element => {\n    const [\n      elementX1,\n      elementY1,\n      elementX2,\n      elementY2\n    ] = getElementAbsoluteCoords(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n\n  return elements;\n}\n\nexport function clearSelection(elements: readonly ExcalidrawElement[]) {\n  const newElements = [...elements];\n\n  newElements.forEach(element => {\n    element.isSelected = false;\n  });\n\n  return newElements;\n}\n\nexport function deleteSelectedElements(elements: readonly ExcalidrawElement[]) {\n  return elements.filter(el => !el.isSelected);\n}\n\nexport function getSelectedIndices(elements: readonly ExcalidrawElement[]) {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nexport const someElementIsSelected = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected);\n\nexport function getSelectedAttribute<T>(\n  elements: readonly ExcalidrawElement[],\n  getAttribute: (element: ExcalidrawElement) => T\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => getAttribute(element))\n    )\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import { withCustomMathRandom } from \"../random\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { isTextElement } from \"../element/typeChecks\";\nimport { getDiamondPoints, getArrowPoints } from \"../element/bounds\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { Drawable } from \"roughjs/bin/core\";\n\nexport function renderElement(\n  element: ExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D\n) {\n  const generator = rc.generator;\n  if (element.type === \"selection\") {\n    const fillStyle = context.fillStyle;\n    context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n    context.fillRect(0, 0, element.width, element.height);\n    context.fillStyle = fillStyle;\n  } else if (element.type === \"rectangle\") {\n    if (!element.shape) {\n      element.shape = withCustomMathRandom(element.seed, () => {\n        return generator.rectangle(0, 0, element.width, element.height, {\n          stroke: element.strokeColor,\n          fill:\n            element.backgroundColor === \"transparent\"\n              ? undefined\n              : element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        });\n      });\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"diamond\") {\n    if (!element.shape) {\n      element.shape = withCustomMathRandom(element.seed, () => {\n        const [\n          topX,\n          topY,\n          rightX,\n          rightY,\n          bottomX,\n          bottomY,\n          leftX,\n          leftY\n        ] = getDiamondPoints(element);\n        return generator.polygon(\n          [\n            [topX, topY],\n            [rightX, rightY],\n            [bottomX, bottomY],\n            [leftX, leftY]\n          ],\n          {\n            stroke: element.strokeColor,\n            fill:\n              element.backgroundColor === \"transparent\"\n                ? undefined\n                : element.backgroundColor,\n            fillStyle: element.fillStyle,\n            strokeWidth: element.strokeWidth,\n            roughness: element.roughness\n          }\n        );\n      });\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"ellipse\") {\n    if (!element.shape) {\n      element.shape = withCustomMathRandom(element.seed, () =>\n        generator.ellipse(\n          element.width / 2,\n          element.height / 2,\n          element.width,\n          element.height,\n          {\n            stroke: element.strokeColor,\n            fill:\n              element.backgroundColor === \"transparent\"\n                ? undefined\n                : element.backgroundColor,\n            fillStyle: element.fillStyle,\n            strokeWidth: element.strokeWidth,\n            roughness: element.roughness\n          }\n        )\n      );\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    rc.draw(element.shape as Drawable);\n    context.globalAlpha = 1;\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const options = {\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      roughness: element.roughness\n    };\n\n    if (!element.shape) {\n      element.shape = withCustomMathRandom(element.seed, () => [\n        //    \\\n        generator.line(x3, y3, x2, y2, options),\n        // -----\n        generator.line(x1, y1, x2, y2, options),\n        //    /\n        generator.line(x4, y4, x2, y2, options)\n      ]);\n    }\n\n    context.globalAlpha = element.opacity / 100;\n    (element.shape as Drawable[]).forEach(shape => rc.draw(shape));\n    context.globalAlpha = 1;\n    return;\n  } else if (isTextElement(element)) {\n    context.globalAlpha = element.opacity / 100;\n    const font = context.font;\n    context.font = element.font;\n    const fillStyle = context.fillStyle;\n    context.fillStyle = element.strokeColor;\n    context.fillText(\n      element.text,\n      0,\n      element.baseline || element.actualBoundingBoxAscent || 0\n    );\n    context.fillStyle = fillStyle;\n    context.font = font;\n    context.globalAlpha = 1;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords, handlerRectangles } from \"../element\";\n\nimport { roundRect } from \"./roundRect\";\nimport { SceneState } from \"../scene/types\";\nimport {\n  getScrollBars,\n  SCROLLBAR_COLOR,\n  SCROLLBAR_WIDTH\n} from \"../scene/scrollbars\";\n\nimport { renderElement } from \"./renderElement\";\n\nexport function renderScene(\n  elements: readonly ExcalidrawElement[],\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    context.translate(\n      element.x + sceneState.scrollX,\n      element.y + sceneState.scrollY\n    );\n    renderElement(element, rc, context);\n    context.translate(\n      -element.x - sceneState.scrollX,\n      -element.y - sceneState.scrollY\n    );\n  });\n\n  if (renderSelection) {\n    const selectedElements = elements.filter(el => el.isSelected);\n\n    selectedElements.forEach(element => {\n      const margin = 4;\n\n      const [\n        elementX1,\n        elementY1,\n        elementX2,\n        elementY2\n      ] = getElementAbsoluteCoords(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n    });\n\n    if (selectedElements.length === 1 && selectedElements[0].type !== \"text\") {\n      const handlers = handlerRectangles(selectedElements[0], sceneState);\n      Object.values(handlers).forEach(handler => {\n        context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n      });\n    }\n  }\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      elements,\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n","import rough from \"roughjs/bin/wrappers/rough\";\n\nimport { ExcalidrawElement } from \"../element/types\";\n\nimport { getElementAbsoluteCoords } from \"../element\";\n\nimport { renderScene } from \"../renderer\";\nimport { AppState } from \"../types\";\nimport { ExportType } from \"./types\";\nimport nanoid from \"nanoid\";\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\ninterface DataState {\n  elements: readonly ExcalidrawElement[];\n  appState: any;\n}\n\nexport function saveAsJSON(\n  elements: readonly ExcalidrawElement[],\n  name: string\n) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements: elements.map(({ shape, ...el }) => el)\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nexport function loadFromJSON() {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise<DataState>(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        let elements = [];\n        try {\n          const data = JSON.parse(reader.result as string);\n          elements = data.elements || [];\n        } catch (e) {\n          // Do nothing because elements array is already empty\n        }\n        resolve(restore(elements, null));\n      }\n    };\n  });\n}\n\nexport function exportCanvas(\n  type: ExportType,\n  elements: readonly ExcalidrawElement[],\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    scrollX: number;\n    scrollY: number;\n    name: string;\n  }\n) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    subCanvasX1 = Math.min(subCanvasX1, x1);\n    subCanvasY1 = Math.min(subCanvasY1, y1);\n    subCanvasX2 = Math.max(subCanvasX2, x2);\n    subCanvasY2 = Math.max(subCanvasY2, y2);\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    elements,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  if (type === \"png\") {\n    saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n  } else if (type === \"clipboard\") {\n    try {\n      tempCanvas.toBlob(async function(blob) {\n        try {\n          await navigator.clipboard.write([\n            new window.ClipboardItem({ \"image/png\": blob })\n          ]);\n        } catch (err) {\n          window.alert(\"Couldn't copy to clipboard. Try using Chrome browser.\");\n        }\n      });\n    } catch (err) {\n      window.alert(\"Couldn't copy to clipboard. Try using Chrome browser.\");\n    }\n  }\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction restore(\n  savedElements: readonly ExcalidrawElement[],\n  savedState: any\n): DataState {\n  return {\n    elements: savedElements.map(element => ({\n      ...element,\n      id: element.id || nanoid(),\n      fillStyle: element.fillStyle || \"hachure\",\n      strokeWidth: element.strokeWidth || 1,\n      roughness: element.roughness || 1,\n      opacity:\n        element.opacity === null || element.opacity === undefined\n          ? 100\n          : element.opacity\n    })),\n    appState: savedState\n  };\n}\n\nexport function restoreFromLocalStorage() {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  let elements = [];\n  if (savedElements) {\n    try {\n      elements = JSON.parse(savedElements);\n    } catch (e) {\n      // Do nothing because elements array is already empty\n    }\n  }\n\n  let appState = null;\n  if (savedState) {\n    try {\n      appState = JSON.parse(savedState);\n    } catch (e) {\n      // Do nothing because appState is already null\n    }\n  }\n\n  return restore(elements, appState);\n}\n\nexport function saveToLocalStorage(\n  elements: readonly ExcalidrawElement[],\n  state: AppState\n) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { hitTest } from \"../element/collision\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport const hasBackground = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\")\n  );\n\nexport const hasStroke = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\" ||\n        element.type === \"arrow\")\n  );\n\nexport const hasText = (elements: readonly ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected && element.type === \"text\");\n\nexport function getElementAtPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], x, y)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n\nexport function getElementContainingPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(elements[i]);\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n  return hitElement;\n}\n","import { ExcalidrawElement } from \"../element/types\";\n\nexport const createScene = () => {\n  const elements: readonly ExcalidrawElement[] = [];\n  return { elements };\n};\n","import React from \"react\";\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nexport const SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nexport const shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nexport function findShapeByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n","import { ExcalidrawElement } from \"./element/types\";\n\nclass SceneHistory {\n  private recording: boolean = true;\n  private stateHistory: string[] = [];\n  private redoStack: string[] = [];\n\n  generateCurrentEntry(elements: readonly ExcalidrawElement[]) {\n    return JSON.stringify(\n      elements.map(({ shape, ...element }) => ({\n        ...element,\n        isSelected: false\n      }))\n    );\n  }\n\n  pushEntry(newEntry: string) {\n    if (\n      this.stateHistory.length > 0 &&\n      this.stateHistory[this.stateHistory.length - 1] === newEntry\n    ) {\n      // If the last entry is the same as this one, ignore it\n      return;\n    }\n    this.stateHistory.push(newEntry);\n  }\n\n  restoreEntry(entry: string) {\n    // When restoring, we shouldn't add an history entry otherwise we'll be stuck with it and can't go back\n    this.skipRecording();\n\n    try {\n      return JSON.parse(entry);\n    } catch {\n      return null;\n    }\n  }\n\n  clearRedoStack() {\n    this.redoStack.splice(0, this.redoStack.length);\n  }\n\n  redoOnce(elements: readonly ExcalidrawElement[]) {\n    const currentEntry = this.generateCurrentEntry(elements);\n    const entryToRestore = this.redoStack.pop();\n    if (entryToRestore !== undefined) {\n      this.stateHistory.push(currentEntry);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  undoOnce(elements: readonly ExcalidrawElement[]) {\n    const currentEntry = this.generateCurrentEntry(elements);\n    let entryToRestore = this.stateHistory.pop();\n\n    // If nothing was changed since last, take the previous one\n    if (currentEntry === entryToRestore) {\n      entryToRestore = this.stateHistory.pop();\n    }\n    if (entryToRestore !== undefined) {\n      this.redoStack.push(currentEntry);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  isRecording() {\n    return this.recording;\n  }\n\n  skipRecording() {\n    this.recording = false;\n  }\n\n  resumeRecording() {\n    this.recording = true;\n  }\n}\n\nexport const createHistory: () => { history: SceneHistory } = () => {\n  const history = new SceneHistory();\n  return { history };\n};\n","import React from \"react\";\n\ntype Props = {\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n  onCloseRequest?(): void;\n};\n\nexport function Popover({ children, left, onCloseRequest, top }: Props) {\n  return (\n    <div className=\"popover\" style={{ top: top, left: left }}>\n      <div\n        className=\"cover\"\n        onClick={onCloseRequest}\n        onContextMenu={e => {\n          e.preventDefault();\n          if (onCloseRequest) onCloseRequest();\n        }}\n      />\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\n\nimport \"./ContextMenu.css\";\n\ntype ContextMenuOption = {\n  label: string;\n  action(): void;\n};\n\ntype Props = {\n  options: ContextMenuOption[];\n  onCloseRequest?(): void;\n  top: number;\n  left: number;\n};\n\nfunction ContextMenu({ options, onCloseRequest, top, left }: Props) {\n  return (\n    <Popover onCloseRequest={onCloseRequest} top={top} left={left}>\n      <ul className=\"context-menu\" onContextMenu={e => e.preventDefault()}>\n        {options.map((option, idx) => (\n          <li\n            key={idx}\n            className=\"context-menu__option\"\n            onClick={onCloseRequest}\n          >\n            <ContextMenuOption {...option} />\n          </li>\n        ))}\n      </ul>\n    </Popover>\n  );\n}\n\nfunction ContextMenuOption({ label, action }: ContextMenuOption) {\n  return (\n    <button className=\"context-menu-option\" onClick={action}>\n      {label}\n    </button>\n  );\n}\n\nlet contextMenuNode: HTMLDivElement;\nfunction getContextMenuNode(): HTMLDivElement {\n  if (contextMenuNode) {\n    return contextMenuNode;\n  }\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  return (contextMenuNode = div);\n}\n\ntype ContextMenuParams = {\n  options: (ContextMenuOption | false | null | undefined)[];\n  top: number;\n  left: number;\n};\n\nfunction handleClose() {\n  unmountComponentAtNode(getContextMenuNode());\n}\n\nexport default {\n  push(params: ContextMenuParams) {\n    const options = Array.of<ContextMenuOption>();\n    params.options.forEach(option => {\n      if (option) {\n        options.push(option);\n      }\n    });\n    if (options.length) {\n      render(\n        <ContextMenu\n          top={params.top}\n          left={params.left}\n          options={options}\n          onCloseRequest={handleClose}\n        />,\n        getContextMenuNode()\n      );\n    }\n  }\n};\n","import React from \"react\";\nimport { Action, ActionsManagerInterface, UpdaterFn } from \"./types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\n\nexport class ActionManager implements ActionsManagerInterface {\n  actions: { [keyProp: string]: Action } = {};\n\n  updater:\n    | ((elements: ExcalidrawElement[], appState: AppState) => void)\n    | null = null;\n\n  setUpdater(\n    updater: (elements: ExcalidrawElement[], appState: AppState) => void\n  ) {\n    this.updater = updater;\n  }\n\n  registerAction(action: Action) {\n    this.actions[action.name] = action;\n  }\n\n  handleKeyDown(\n    event: KeyboardEvent,\n    elements: readonly ExcalidrawElement[],\n    appState: AppState\n  ) {\n    const data = Object.values(this.actions)\n      .sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0))\n      .filter(\n        action => action.keyTest && action.keyTest(event, elements, appState)\n      );\n\n    if (data.length === 0) return {};\n\n    event.preventDefault();\n    return data[0].perform(elements, appState, null);\n  }\n\n  getContextMenuItems(\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n    updater: UpdaterFn\n  ) {\n    return Object.values(this.actions)\n      .filter(action => \"contextItemLabel\" in action)\n      .sort(\n        (a, b) =>\n          (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) -\n          (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999)\n      )\n      .map(action => ({\n        label: action.contextItemLabel!,\n        action: () => {\n          updater(action.perform(elements, appState, null));\n        }\n      }));\n  }\n\n  renderAction(\n    name: string,\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n    updater: UpdaterFn\n  ) {\n    if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\n      const action = this.actions[name];\n      const PanelComponent = action.PanelComponent!;\n      const updateData = (formState: any) => {\n        updater(action.perform(elements, appState, formState));\n      };\n\n      return (\n        <PanelComponent\n          elements={elements}\n          appState={appState}\n          updateData={updateData}\n        />\n      );\n    }\n\n    return null;\n  }\n}\n","import { Action } from \"./types\";\nimport { deleteSelectedElements } from \"../scene\";\nimport { KEYS } from \"../keys\";\n\nexport const actionDeleteSelected: Action = {\n  name: \"deleteSelectedElements\",\n  perform: elements => {\n    return {\n      elements: deleteSelectedElements(elements)\n    };\n  },\n  contextItemLabel: \"Delete\",\n  contextMenuOrder: 3,\n  keyTest: event => event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE\n};\n","function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n\n  return elements;\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n  return elements;\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n\n  return elements;\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n\n  return elements;\n}\n","import { Action } from \"./types\";\nimport {\n  moveOneLeft,\n  moveOneRight,\n  moveAllLeft,\n  moveAllRight\n} from \"../zindex\";\nimport { getSelectedIndices } from \"../scene\";\nimport { META_KEY } from \"../keys\";\n\nexport const actionSendBackward: Action = {\n  name: \"sendBackward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneLeft([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Send Backward\",\n  keyPriority: 40,\n  keyTest: event =>\n    event[META_KEY] && event.shiftKey && event.altKey && event.code === \"KeyB\"\n};\n\nexport const actionBringForward: Action = {\n  name: \"bringForward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneRight([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Bring Forward\",\n  keyPriority: 40,\n  keyTest: event =>\n    event[META_KEY] && event.shiftKey && event.altKey && event.code === \"KeyF\"\n};\n\nexport const actionSendToBack: Action = {\n  name: \"sendToBack\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllLeft([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Send to Back\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyB\"\n};\n\nexport const actionBringToFront: Action = {\n  name: \"bringToFront\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllRight([...elements], getSelectedIndices(elements)),\n      appState\n    };\n  },\n  contextItemLabel: \"Bring to Front\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyF\"\n};\n","import { Action } from \"./types\";\nimport { META_KEY } from \"../keys\";\n\nexport const actionSelectAll: Action = {\n  name: \"selectAll\",\n  perform: elements => {\n    return {\n      elements: elements.map(elem => ({ ...elem, isSelected: true }))\n    };\n  },\n  contextItemLabel: \"Select All\",\n  keyTest: event => event[META_KEY] && event.code === \"KeyA\"\n};\n","import React from \"react\";\n\nexport function ButtonSelect<T>({\n  options,\n  value,\n  onChange\n}: {\n  options: { value: T; text: string }[];\n  value: T | null;\n  onChange: (value: T) => void;\n}) {\n  return (\n    <div className=\"buttonList\">\n      {options.map(option => (\n        <button\n          key={option.text}\n          onClick={() => onChange(option.value)}\n          className={value === option.value ? \"active\" : \"\"}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\n\nimport \"./ColorPicker.css\";\n\n// This is a narrow reimplementation of the awesome react-color Twitter component\n// https://github.com/casesandberg/react-color/blob/master/src/components/twitter/Twitter.js\n\nconst Picker = function({\n  colors,\n  color,\n  onChange\n}: {\n  colors: string[];\n  color: string | undefined;\n  onChange: (color: string) => void;\n}) {\n  const [innerValue, setInnerValue] = React.useState(color);\n  React.useEffect(() => {\n    setInnerValue(color);\n  }, [color]);\n  return (\n    <div className=\"color-picker\">\n      <div className=\"color-picker-triangle-shadow\"></div>\n      <div className=\"color-picker-triangle\"></div>\n      <div className=\"color-picker-content\">\n        {colors.map(color => (\n          <div\n            className=\"color-picker-swatch\"\n            onClick={() => {\n              onChange(color);\n            }}\n            title={color}\n            tabIndex={0}\n            style={{ backgroundColor: color }}\n          >\n            {color === \"transparent\" ? (\n              <div className=\"color-picker-transparent\"></div>\n            ) : (\n              undefined\n            )}\n          </div>\n        ))}\n        <div className=\"color-picker-hash\">#</div>\n        <div style={{ position: \"relative\" }}>\n          <input\n            spellCheck={false}\n            className=\"color-picker-input\"\n            onChange={e => {\n              const value = e.target.value;\n              if (value.match(/^([0-9a-f]{3}|[0-9a-f]{6}|transparent)$/)) {\n                onChange(value === \"transparent\" ? \"transparent\" : \"#\" + value);\n              }\n              setInnerValue(value);\n            }}\n            value={(innerValue || \"\").replace(/^#/, \"\")}\n          />\n        </div>\n        <div style={{ clear: \"both\" }}></div>\n      </div>\n    </div>\n  );\n};\n\nexport function ColorPicker({\n  type,\n  color,\n  onChange\n}: {\n  type: \"canvasBackground\" | \"elementBackground\" | \"elementStroke\";\n  color: string | null;\n  onChange: (color: string) => void;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  return (\n    <div>\n      <button\n        className=\"swatch\"\n        style={color ? { backgroundColor: color } : undefined}\n        onClick={() => setActive(!isActive)}\n      />\n      <React.Suspense fallback=\"\">\n        {isActive ? (\n          <Popover onCloseRequest={() => setActive(false)}>\n            <Picker\n              colors={colors[type]}\n              color={color || undefined}\n              onChange={changedColor => {\n                onChange(changedColor);\n              }}\n            />\n          </Popover>\n        ) : null}\n      </React.Suspense>\n      <input\n        type=\"text\"\n        className=\"swatch-input\"\n        value={color || \"\"}\n        onPaste={e => onChange(e.clipboardData.getData(\"text\"))}\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n}\n\nconst colors = {\n  canvasBackground: [\n    \"#DEE6EF\",\n    \"#FCEAD8\",\n    \"#F9E0E0\",\n    \"#E6F1F1\",\n    \"#E0EDDF\",\n    \"#FBF5DD\",\n    \"#F0E6ED\",\n    \"#FFEDEF\",\n    \"#EDE5E1\",\n    \"#F2F0EF\",\n    \"#FFFFFF\"\n  ],\n  elementBackground: [\n    \"#4E79A7\",\n    \"#F28E2C\",\n    \"#E15759\",\n    \"#76B7B2\",\n    \"#59A14F\",\n    \"#EDC949\",\n    \"#AF7AA1\",\n    \"#FF9DA7\",\n    \"#9C755F\",\n    \"#BAB0AB\",\n    \"transparent\"\n  ],\n  elementStroke: [\n    \"#324E6B\",\n    \"#9B5B1D\",\n    \"#903839\",\n    \"#4C7572\",\n    \"#396733\",\n    \"#AD9336\",\n    \"#805976\",\n    \"#BA737A\",\n    \"#725646\",\n    \"#88817D\",\n    \"#000000\"\n  ]\n};\n","import React from \"react\";\nimport { ColorPicker } from \"../ColorPicker\";\n\ninterface PanelColorProps {\n  title: string;\n  colorType: \"canvasBackground\" | \"elementBackground\" | \"elementStroke\";\n  colorValue: string | null;\n  onColorChange: (value: string) => void;\n}\n\nexport const PanelColor: React.FC<PanelColorProps> = ({\n  title,\n  colorType,\n  onColorChange,\n  colorValue\n}) => {\n  return (\n    <>\n      <h5>{title}</h5>\n      <ColorPicker\n        type={colorType}\n        color={colorValue}\n        onChange={color => onColorChange(color)}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"../element/types\";\nimport { getSelectedAttribute } from \"../scene\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport { PanelColor } from \"../components/panels/PanelColor\";\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\n\nconst changeProperty = (\n  elements: readonly ExcalidrawElement[],\n  callback: (element: ExcalidrawElement) => ExcalidrawElement\n) => {\n  return elements.map(element => {\n    if (element.isSelected) {\n      return callback(element);\n    }\n    return element;\n  });\n};\n\nexport const actionChangeStrokeColor: Action = {\n  name: \"changeStrokeColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        strokeColor: value\n      })),\n      appState: { ...appState, currentItemStrokeColor: value }\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <PanelColor\n      title=\"Stroke Color\"\n      colorType=\"elementStroke\"\n      onColorChange={(color: string) => {\n        updateData(color);\n      }}\n      colorValue={getSelectedAttribute(\n        elements,\n        element => element.strokeColor\n      )}\n    />\n  )\n};\n\nexport const actionChangeBackgroundColor: Action = {\n  name: \"changeBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        backgroundColor: value\n      })),\n      appState: { ...appState, currentItemBackgroundColor: value }\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <PanelColor\n      title=\"Background Color\"\n      colorType=\"elementBackground\"\n      onColorChange={(color: string) => {\n        updateData(color);\n      }}\n      colorValue={getSelectedAttribute(\n        elements,\n        element => element.backgroundColor\n      )}\n    />\n  )\n};\n\nexport const actionChangeFillStyle: Action = {\n  name: \"changeFillStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        fillStyle: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Fill</h5>\n      <ButtonSelect\n        options={[\n          { value: \"solid\", text: \"Solid\" },\n          { value: \"hachure\", text: \"Hachure\" },\n          { value: \"cross-hatch\", text: \"Cross-hatch\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.fillStyle)}\n        onChange={value => {\n          updateData(value);\n        }}\n      />\n    </>\n  )\n};\n\nexport const actionChangeStrokeWidth: Action = {\n  name: \"changeStrokeWidth\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        strokeWidth: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h5>Stroke Width</h5>\n      <ButtonSelect\n        options={[\n          { value: 1, text: \"Thin\" },\n          { value: 2, text: \"Bold\" },\n          { value: 4, text: \"Extra Bold\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.strokeWidth)}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeSloppiness: Action = {\n  name: \"changeSloppiness\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        roughness: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h5>Sloppiness</h5>\n      <ButtonSelect\n        options={[\n          { value: 0, text: \"Draftsman\" },\n          { value: 1, text: \"Artist\" },\n          { value: 3, text: \"Cartoonist\" }\n        ]}\n        value={getSelectedAttribute(elements, element => element.roughness)}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeOpacity: Action = {\n  name: \"changeOpacity\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => ({\n        ...el,\n        shape: null,\n        opacity: value\n      }))\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Opacity</h5>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        onChange={e => updateData(+e.target.value)}\n        value={\n          getSelectedAttribute(elements, element => element.opacity) ||\n          0 /* Put the opacity at 0 if there are two conflicting ones */\n        }\n      />\n    </>\n  )\n};\n\nexport const actionChangeFontSize: Action = {\n  name: \"changeFontSize\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = {\n            ...el,\n            shape: null,\n            font: `${value}px ${el.font.split(\"px \")[1]}`\n          };\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      })\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Font size</h5>\n      <ButtonSelect\n        options={[\n          { value: 16, text: \"Small\" },\n          { value: 20, text: \"Medium\" },\n          { value: 28, text: \"Large\" },\n          { value: 36, text: \"Very Large\" }\n        ]}\n        value={getSelectedAttribute(\n          elements,\n          element => isTextElement(element) && +element.font.split(\"px \")[0]\n        )}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n\nexport const actionChangeFontFamily: Action = {\n  name: \"changeFontFamily\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, el => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = {\n            ...el,\n            shape: null,\n            font: `${el.font.split(\"px \")[0]}px ${value}`\n          };\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      })\n    };\n  },\n  PanelComponent: ({ elements, updateData }) => (\n    <>\n      <h5>Font family</h5>\n      <ButtonSelect\n        options={[\n          { value: \"Virgil\", text: \"Virgil\" },\n          { value: \"Helvetica\", text: \"Helvetica\" },\n          { value: \"Courier\", text: \"Courier\" }\n        ]}\n        value={getSelectedAttribute(\n          elements,\n          element => isTextElement(element) && element.font.split(\"px \")[1]\n        )}\n        onChange={value => updateData(value)}\n      />\n    </>\n  )\n};\n","import { AppState } from \"./types\";\nimport { getDateTime } from \"./utils\";\n\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nexport function getDefaultAppState(): AppState {\n  return {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"transparent\",\n    currentItemFont: \"20px Virgil\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    cursorX: 0,\n    cursorY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n}\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { getDefaultAppState } from \"../appState\";\n\nexport const actionChangeViewBackgroundColor: Action = {\n  name: \"changeViewBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, viewBackgroundColor: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <>\n      <h5>Canvas Background Color</h5>\n      <ColorPicker\n        type=\"canvasBackground\"\n        color={appState.viewBackgroundColor}\n        onChange={color => updateData(color)}\n      />\n    </>\n  )\n};\n\nexport const actionClearCanvas: Action = {\n  name: \"clearCanvas\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: [],\n      appState: getDefaultAppState()\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      onClick={() => {\n        if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n          updateData(null);\n        }\n      }}\n      title=\"Clear the canvas & reset background color\"\n    >\n      Clear canvas\n    </button>\n  )\n};\n","import React, { Fragment, Component } from \"react\";\n\ntype InputState = {\n  value: string;\n  edit: boolean;\n};\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport class EditableText extends Component<Props, InputState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      edit: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props: Props) {\n    this.setState({ value: props.value });\n  }\n\n  private handleEdit(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  private handleBlur() {\n    const { value } = this.state;\n\n    if (!value) {\n      this.setState({ value: this.props.value, edit: false });\n      return;\n    }\n    this.props.onChange(value);\n    this.setState({ edit: false });\n  }\n\n  public render() {\n    const { value, edit } = this.state;\n\n    return (\n      <Fragment>\n        {edit ? (\n          <input\n            className=\"project-name-input\"\n            name=\"name\"\n            maxLength={25}\n            value={value}\n            onChange={e => this.handleEdit(e)}\n            onBlur={() => this.handleBlur()}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                this.handleBlur();\n              }\n            }}\n            autoFocus\n          />\n        ) : (\n          <span\n            onClick={() => this.setState({ edit: true })}\n            className=\"project-name\"\n          >\n            {value}\n          </span>\n        )}\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { Action } from \"./types\";\nimport { EditableText } from \"../components/EditableText\";\nimport { saveAsJSON, loadFromJSON } from \"../scene\";\n\nexport const actionChangeProjectName: Action = {\n  name: \"changeProjectName\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, name: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <>\n      <h5>Name</h5>\n      {appState.name && (\n        <EditableText\n          value={appState.name}\n          onChange={(name: string) => updateData(name)}\n        />\n      )}\n    </>\n  )\n};\n\nexport const actionChangeExportBackground: Action = {\n  name: \"changeExportBackground\",\n  perform: (elements, appState, value) => {\n    return { appState: { ...appState, exportBackground: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={appState.exportBackground}\n        onChange={e => {\n          updateData(e.target.checked);\n        }}\n      />\n      background\n    </label>\n  )\n};\n\nexport const actionSaveScene: Action = {\n  name: \"saveScene\",\n  perform: (elements, appState, value) => {\n    saveAsJSON(elements, appState.name);\n    return {};\n  },\n  PanelComponent: ({ updateData }) => (\n    <button onClick={() => updateData(null)}>Save as...</button>\n  )\n};\n\nexport const actionLoadScene: Action = {\n  name: \"loadScene\",\n  perform: (elements, appState, loadedElements) => {\n    return { elements: loadedElements };\n  },\n  PanelComponent: ({ updateData }) => (\n    <button\n      onClick={() => {\n        loadFromJSON().then(({ elements }) => {\n          updateData(elements);\n        });\n      }}\n    >\n      Load file...\n    </button>\n  )\n};\n","import { Action } from \"./types\";\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\nimport { META_KEY } from \"../keys\";\n\nlet copiedStyles: string = \"{}\";\n\nexport const actionCopyStyles: Action = {\n  name: \"copyStyles\",\n  perform: elements => {\n    const element = elements.find(el => el.isSelected);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n    return {};\n  },\n  contextItemLabel: \"Copy Styles\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyC\",\n  contextMenuOrder: 0\n};\n\nexport const actionPasteStyles: Action = {\n  name: \"pasteStyles\",\n  perform: elements => {\n    const pastedElement = JSON.parse(copiedStyles);\n    return {\n      elements: elements.map(element => {\n        if (element.isSelected) {\n          const newElement = {\n            ...element,\n            shape: null,\n            backgroundColor: pastedElement?.backgroundColor,\n            strokeWidth: pastedElement?.strokeWidth,\n            strokeColor: pastedElement?.strokeColor,\n            fillStyle: pastedElement?.fillStyle,\n            opacity: pastedElement?.opacity,\n            roughness: pastedElement?.roughness\n          };\n          if (isTextElement(newElement)) {\n            newElement.font = pastedElement?.font;\n            redrawTextBoundingBox(newElement);\n          }\n          return newElement;\n        }\n        return element;\n      })\n    };\n  },\n  contextItemLabel: \"Paste Styles\",\n  keyTest: event => event[META_KEY] && event.shiftKey && event.code === \"KeyV\",\n  contextMenuOrder: 1\n};\n","import React, { useState } from \"react\";\n\ninterface PanelProps {\n  title: string;\n  defaultCollapsed?: boolean;\n  hide?: boolean;\n}\n\nexport const Panel: React.FC<PanelProps> = ({\n  title,\n  children,\n  defaultCollapsed = false,\n  hide = false\n}) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n\n  if (hide) return null;\n\n  return (\n    <div className=\"panel\">\n      <h4>{title}</h4>\n      <button\n        className=\"btn-panel-collapse\"\n        type=\"button\"\n        onClick={e => {\n          e.preventDefault();\n          setCollapsed(collapsed => !collapsed);\n        }}\n      >\n        {\n          <span\n            className={`btn-panel-collapse-icon ${\n              collapsed ? \"btn-panel-collapse-icon-closed\" : \"\"\n            }`}\n          >\n            ▼\n          </span>\n        }\n      </button>\n      {!collapsed && <div className=\"panelColumn\">{children}</div>}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { SHAPES } from \"../../shapes\";\nimport { capitalizeString } from \"../../utils\";\nimport { Panel } from \"../Panel\";\n\ninterface PanelToolsProps {\n  activeTool: string;\n  onToolChange: (value: string) => void;\n}\n\nexport const PanelTools: React.FC<PanelToolsProps> = ({\n  activeTool,\n  onToolChange\n}) => {\n  return (\n    <Panel title=\"Shapes\">\n      <div className=\"panelTools\">\n        {SHAPES.map(({ value, icon }) => (\n          <label\n            key={value}\n            className=\"tool\"\n            title={`${capitalizeString(value)} - ${capitalizeString(value)[0]}`}\n          >\n            <input\n              type=\"radio\"\n              checked={activeTool === value}\n              onChange={() => {\n                onToolChange(value);\n              }}\n            />\n            <div className=\"toolIcon\">{icon}</div>\n          </label>\n        ))}\n      </div>\n    </Panel>\n  );\n};\n","import React from \"react\";\nimport { ActionManager } from \"../../actions\";\nimport { ExcalidrawElement } from \"../../element/types\";\nimport { AppState } from \"../../types\";\nimport { UpdaterFn } from \"../../actions/types\";\n\ninterface PanelSelectionProps {\n  actionManager: ActionManager;\n  elements: readonly ExcalidrawElement[];\n  appState: AppState;\n  syncActionResult: UpdaterFn;\n}\n\nexport const PanelSelection: React.FC<PanelSelectionProps> = ({\n  actionManager,\n  elements,\n  appState,\n  syncActionResult\n}) => {\n  return (\n    <div>\n      <div className=\"buttonList\">\n        {actionManager.renderAction(\n          \"bringForward\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        {actionManager.renderAction(\n          \"bringToFront\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        {actionManager.renderAction(\n          \"sendBackward\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        {actionManager.renderAction(\n          \"sendToBack\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Panel } from \"../Panel\";\nimport { ActionManager } from \"../../actions\";\nimport { ExcalidrawElement } from \"../../element/types\";\nimport { AppState } from \"../../types\";\nimport { UpdaterFn } from \"../../actions/types\";\n\ninterface PanelCanvasProps {\n  actionManager: ActionManager;\n  elements: readonly ExcalidrawElement[];\n  appState: AppState;\n  syncActionResult: UpdaterFn;\n}\n\nexport const PanelCanvas: React.FC<PanelCanvasProps> = ({\n  actionManager,\n  elements,\n  appState,\n  syncActionResult\n}) => {\n  return (\n    <Panel title=\"Canvas\">\n      {actionManager.renderAction(\n        \"changeViewBackgroundColor\",\n        elements,\n        appState,\n        syncActionResult\n      )}\n\n      {actionManager.renderAction(\n        \"clearCanvas\",\n        elements,\n        appState,\n        syncActionResult\n      )}\n    </Panel>\n  );\n};\n","import React from \"react\";\nimport { Panel } from \"../Panel\";\nimport { ExportType } from \"../../scene/types\";\n\nimport \"./panelExport.scss\";\nimport { ActionManager } from \"../../actions\";\nimport { ExcalidrawElement } from \"../../element/types\";\nimport { AppState } from \"../../types\";\nimport { UpdaterFn } from \"../../actions/types\";\n\ninterface PanelExportProps {\n  actionManager: ActionManager;\n  elements: readonly ExcalidrawElement[];\n  appState: AppState;\n  syncActionResult: UpdaterFn;\n  onExportCanvas: (type: ExportType) => void;\n}\n\n// fa-clipboard\nconst ClipboardIcon = () => (\n  <svg viewBox=\"0 0 384 512\">\n    <path\n      fill=\"currentColor\"\n      d=\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\"\n    ></path>\n  </svg>\n);\n\nconst probablySupportsClipboard =\n  \"toBlob\" in HTMLCanvasElement.prototype &&\n  \"clipboard\" in navigator &&\n  \"write\" in navigator.clipboard &&\n  \"ClipboardItem\" in window;\n\nexport const PanelExport: React.FC<PanelExportProps> = ({\n  actionManager,\n  elements,\n  appState,\n  syncActionResult,\n  onExportCanvas\n}) => {\n  return (\n    <Panel title=\"Export\">\n      <div className=\"panelColumn\">\n        {actionManager.renderAction(\n          \"changeProjectName\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        <h5>Image</h5>\n        <div className=\"panelExport-imageButtons\">\n          <button\n            className=\"panelExport-exportToPngButton\"\n            onClick={() => onExportCanvas(\"png\")}\n          >\n            Export to PNG\n          </button>\n          {probablySupportsClipboard && (\n            <button\n              className=\"panelExport-exportToClipboardButton\"\n              onClick={() => onExportCanvas(\"clipboard\")}\n              title=\"Copy to clipboard (experimental)\"\n            >\n              <ClipboardIcon />\n            </button>\n          )}\n        </div>\n        {actionManager.renderAction(\n          \"changeExportBackground\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n\n        <h5>Scene</h5>\n        {actionManager.renderAction(\n          \"saveScene\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n        {actionManager.renderAction(\n          \"loadScene\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n      </div>\n    </Panel>\n  );\n};\n","import React from \"react\";\nimport { PanelTools } from \"./panels/PanelTools\";\nimport { Panel } from \"./Panel\";\nimport { PanelSelection } from \"./panels/PanelSelection\";\nimport {\n  hasBackground,\n  someElementIsSelected,\n  hasStroke,\n  hasText,\n  exportCanvas\n} from \"../scene\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { PanelCanvas } from \"./panels/PanelCanvas\";\nimport { PanelExport } from \"./panels/PanelExport\";\nimport { ExportType } from \"../scene/types\";\nimport { AppState } from \"../types\";\nimport { ActionManager } from \"../actions\";\nimport { UpdaterFn } from \"../actions/types\";\n\ninterface SidePanelProps {\n  actionManager: ActionManager;\n  elements: readonly ExcalidrawElement[];\n  syncActionResult: UpdaterFn;\n  appState: AppState;\n  onToolChange: (elementType: string) => void;\n  canvas: HTMLCanvasElement;\n}\n\nexport const SidePanel: React.FC<SidePanelProps> = ({\n  actionManager,\n  syncActionResult,\n  elements,\n  onToolChange,\n  appState,\n  canvas\n}) => {\n  return (\n    <div className=\"sidePanel\">\n      <PanelTools\n        activeTool={appState.elementType}\n        onToolChange={value => {\n          onToolChange(value);\n        }}\n      />\n      <Panel title=\"Selection\" hide={!someElementIsSelected(elements)}>\n        <PanelSelection\n          actionManager={actionManager}\n          syncActionResult={syncActionResult}\n          elements={elements}\n          appState={appState}\n        />\n\n        {actionManager.renderAction(\n          \"changeStrokeColor\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n\n        {hasBackground(elements) && (\n          <>\n            {actionManager.renderAction(\n              \"changeBackgroundColor\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n\n            {actionManager.renderAction(\n              \"changeFillStyle\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n          </>\n        )}\n\n        {hasStroke(elements) && (\n          <>\n            {actionManager.renderAction(\n              \"changeStrokeWidth\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n\n            {actionManager.renderAction(\n              \"changeSloppiness\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n          </>\n        )}\n\n        {hasText(elements) && (\n          <>\n            {actionManager.renderAction(\n              \"changeFontSize\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n\n            {actionManager.renderAction(\n              \"changeFontFamily\",\n              elements,\n              appState,\n              syncActionResult\n            )}\n          </>\n        )}\n\n        {actionManager.renderAction(\n          \"changeOpacity\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n\n        {actionManager.renderAction(\n          \"deleteSelectedElements\",\n          elements,\n          appState,\n          syncActionResult\n        )}\n      </Panel>\n      <PanelCanvas\n        actionManager={actionManager}\n        syncActionResult={syncActionResult}\n        elements={elements}\n        appState={appState}\n      />\n      <PanelExport\n        actionManager={actionManager}\n        syncActionResult={syncActionResult}\n        elements={elements}\n        appState={appState}\n        onExportCanvas={(type: ExportType) => {\n          const exportedElements = elements.some(element => element.isSelected)\n            ? elements.filter(element => element.isSelected)\n            : elements;\n          return exportCanvas(type, exportedElements, canvas, appState);\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport {\n  newElement,\n  duplicateElement,\n  resizeTest,\n  isTextElement,\n  textWysiwyg,\n  getElementAbsoluteCoords\n} from \"./element\";\nimport {\n  clearSelection,\n  deleteSelectedElements,\n  setSelection,\n  isOverScrollBars,\n  restoreFromLocalStorage,\n  saveToLocalStorage,\n  getElementAtPosition,\n  createScene,\n  getElementContainingPosition\n} from \"./scene\";\n\nimport { renderScene } from \"./renderer\";\nimport { AppState } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"./element/types\";\n\nimport { isInputLike, measureText, debounce } from \"./utils\";\nimport { KEYS, META_KEY, isArrowKey } from \"./keys\";\n\nimport { findShapeByKey, shapesShortcutKeys } from \"./shapes\";\nimport { createHistory } from \"./history\";\n\nimport ContextMenu from \"./components/ContextMenu\";\n\nimport \"./styles.scss\";\nimport { getElementWithResizeHandler } from \"./element/resizeTest\";\nimport {\n  ActionManager,\n  actionDeleteSelected,\n  actionSendBackward,\n  actionBringForward,\n  actionSendToBack,\n  actionBringToFront,\n  actionSelectAll,\n  actionChangeStrokeColor,\n  actionChangeBackgroundColor,\n  actionChangeOpacity,\n  actionChangeStrokeWidth,\n  actionChangeFillStyle,\n  actionChangeSloppiness,\n  actionChangeFontSize,\n  actionChangeFontFamily,\n  actionChangeViewBackgroundColor,\n  actionClearCanvas,\n  actionChangeProjectName,\n  actionChangeExportBackground,\n  actionLoadScene,\n  actionSaveScene,\n  actionCopyStyles,\n  actionPasteStyles\n} from \"./actions\";\nimport { SidePanel } from \"./components/SidePanel\";\nimport { ActionResult } from \"./actions/types\";\nimport { getDefaultAppState } from \"./appState\";\n\nlet { elements } = createScene();\nconst { history } = createHistory();\n\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction addTextElement(\n  element: ExcalidrawTextElement,\n  text: string,\n  font: string\n) {\n  resetCursor();\n  if (text === null || text === \"\") {\n    return false;\n  }\n\n  const metrics = measureText(text, font);\n  element.text = text;\n  element.font = font;\n  // Center the text\n  element.x -= metrics.width / 2;\n  element.y -= metrics.height / 2;\n  element.width = metrics.width;\n  element.height = metrics.height;\n  element.baseline = metrics.baseline;\n\n  return true;\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\nconst TEXT_TO_CENTER_SNAP_THRESHOLD = 30;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nexport function viewportCoordsToSceneCoords(\n  { clientX, clientY }: { clientX: number; clientY: number },\n  { scrollX, scrollY }: { scrollX: number; scrollY: number }\n) {\n  const x = clientX - CANVAS_WINDOW_OFFSET_LEFT - scrollX;\n  const y = clientY - CANVAS_WINDOW_OFFSET_TOP - scrollY;\n  return { x, y };\n}\n\nexport class App extends React.Component<{}, AppState> {\n  canvas: HTMLCanvasElement | null = null;\n  rc: RoughCanvas | null = null;\n\n  actionManager: ActionManager = new ActionManager();\n  constructor(props: any) {\n    super(props);\n    this.actionManager.registerAction(actionDeleteSelected);\n    this.actionManager.registerAction(actionSendToBack);\n    this.actionManager.registerAction(actionBringToFront);\n    this.actionManager.registerAction(actionSendBackward);\n    this.actionManager.registerAction(actionBringForward);\n    this.actionManager.registerAction(actionSelectAll);\n\n    this.actionManager.registerAction(actionChangeStrokeColor);\n    this.actionManager.registerAction(actionChangeBackgroundColor);\n    this.actionManager.registerAction(actionChangeFillStyle);\n    this.actionManager.registerAction(actionChangeStrokeWidth);\n    this.actionManager.registerAction(actionChangeOpacity);\n    this.actionManager.registerAction(actionChangeSloppiness);\n    this.actionManager.registerAction(actionChangeFontSize);\n    this.actionManager.registerAction(actionChangeFontFamily);\n\n    this.actionManager.registerAction(actionChangeViewBackgroundColor);\n    this.actionManager.registerAction(actionClearCanvas);\n\n    this.actionManager.registerAction(actionChangeProjectName);\n    this.actionManager.registerAction(actionChangeExportBackground);\n    this.actionManager.registerAction(actionSaveScene);\n    this.actionManager.registerAction(actionLoadScene);\n\n    this.actionManager.registerAction(actionCopyStyles);\n    this.actionManager.registerAction(actionPasteStyles);\n  }\n\n  private syncActionResult = (res: ActionResult) => {\n    if (res.elements !== undefined) {\n      elements = res.elements;\n      this.forceUpdate();\n    }\n\n    if (res.appState !== undefined) {\n      this.setState({ ...res.appState });\n    }\n  };\n\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    document.addEventListener(\"mousemove\", this.getCurrentCursorPosition);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const { elements: newElements, appState } = restoreFromLocalStorage();\n\n    if (newElements) {\n      elements = newElements;\n    }\n\n    if (appState) {\n      this.setState(appState);\n    } else {\n      this.forceUpdate();\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    document.removeEventListener(\n      \"mousemove\",\n      this.getCurrentCursorPosition,\n      false\n    );\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = getDefaultAppState();\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private getCurrentCursorPosition = (e: MouseEvent) => {\n    this.setState({ cursorX: e.x, cursorY: e.y });\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (event.key === KEYS.ESCAPE) {\n      elements = clearSelection(elements);\n      this.forceUpdate();\n      this.setState({ elementType: \"selection\" });\n      if (window.document.activeElement instanceof HTMLElement) {\n        window.document.activeElement.blur();\n      }\n      event.preventDefault();\n      return;\n    }\n    if (isInputLike(event.target)) return;\n\n    const data = this.actionManager.handleKeyDown(event, elements, this.state);\n    this.syncActionResult(data);\n\n    if (data.elements !== undefined || data.appState !== undefined) {\n      return;\n    }\n\n    if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements = elements.map(el => {\n        if (el.isSelected) {\n          const element = { ...el };\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n          return element;\n        }\n        return el;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (\n      shapesShortcutKeys.includes(event.key.toLowerCase()) &&\n      !event.ctrlKey &&\n      !event.shiftKey &&\n      !event.altKey &&\n      !event.metaKey\n    ) {\n      this.setState({ elementType: findShapeByKey(event.key) });\n    } else if (event[META_KEY] && event.code === \"KeyZ\") {\n      if (event.shiftKey) {\n        // Redo action\n        const data = history.redoOnce(elements);\n        if (data !== null) {\n          elements = data;\n        }\n      } else {\n        // undo action\n        const data = history.undoOnce(elements);\n        if (data !== null) {\n          elements = data;\n        }\n      }\n      this.forceUpdate();\n      event.preventDefault();\n    }\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private copyToClipboard = () => {\n    if (navigator.clipboard) {\n      const text = JSON.stringify(\n        elements\n          .filter(element => element.isSelected)\n          .map(({ shape, ...el }) => el)\n      );\n      navigator.clipboard.writeText(text);\n    }\n  };\n\n  private pasteFromClipboard = () => {\n    if (navigator.clipboard) {\n      navigator.clipboard\n        .readText()\n        .then(text => this.addElementsFromPaste(text));\n    }\n  };\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(\n              elements\n                .filter(element => element.isSelected)\n                .map(({ shape, ...el }) => el)\n            )\n          );\n          elements = deleteSelectedElements(elements);\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(\n              elements\n                .filter(element => element.isSelected)\n                .map(({ shape, ...el }) => el)\n            )\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          this.addElementsFromPaste(paste);\n          e.preventDefault();\n        }}\n      >\n        <SidePanel\n          actionManager={this.actionManager}\n          syncActionResult={this.syncActionResult}\n          appState={{ ...this.state }}\n          elements={elements}\n          onToolChange={value => {\n            this.setState({ elementType: value });\n            elements = clearSelection(elements);\n            document.documentElement.style.cursor =\n              value === \"text\" ? \"text\" : \"crosshair\";\n            this.forceUpdate();\n          }}\n          canvas={this.canvas!}\n        />\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.canvas === null) {\n              this.canvas = canvas;\n              this.rc = rough.canvas(this.canvas!);\n            }\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onContextMenu={e => {\n            e.preventDefault();\n\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const element = getElementAtPosition(elements, x, y);\n            if (!element) {\n              ContextMenu.push({\n                options: [\n                  navigator.clipboard && {\n                    label: \"Paste\",\n                    action: () => this.pasteFromClipboard()\n                  }\n                ],\n                top: e.clientY,\n                left: e.clientX\n              });\n              return;\n            }\n\n            if (!element.isSelected) {\n              elements = clearSelection(elements);\n              element.isSelected = true;\n              this.forceUpdate();\n            }\n\n            ContextMenu.push({\n              options: [\n                navigator.clipboard && {\n                  label: \"Copy\",\n                  action: this.copyToClipboard\n                },\n                navigator.clipboard && {\n                  label: \"Paste\",\n                  action: () => this.pasteFromClipboard()\n                },\n                ...this.actionManager.getContextMenuItems(\n                  elements,\n                  this.state,\n                  this.syncActionResult\n                )\n              ],\n              top: e.clientY,\n              left: e.clientX\n            });\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              elements,\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n\n            type ResizeTestType = ReturnType<typeof resizeTest>;\n            let resizeHandle: ResizeTestType = false;\n            let isResizingElements = false;\n            let draggingOccured = false;\n            let hitElement: ExcalidrawElement | null = null;\n            let elementIsAddedToSelection = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = getElementWithResizeHandler(\n                elements,\n                { x, y },\n                this.state\n              );\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement.element : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeElement.resizeHandle;\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                const selected = getElementAtPosition(\n                  elements.filter(el => el.isSelected),\n                  x,\n                  y\n                );\n                // clear selection if shift is not clicked\n                if (!selected && !e.shiftKey) {\n                  elements = clearSelection(elements);\n                }\n                hitElement = getElementAtPosition(elements, x, y);\n\n                // If we click on something\n                if (hitElement) {\n                  // deselect if item is selected\n                  // if shift is not clicked, this will always return true\n                  // otherwise, it will trigger selection based on current\n                  // state of the box\n                  if (!hitElement.isSelected) {\n                    hitElement.isSelected = true;\n                    elementIsAddedToSelection = true;\n                  }\n\n                  // We duplicate the selected element if alt is pressed on Mouse down\n                  if (e.altKey) {\n                    elements = [\n                      ...elements.map(element => ({\n                        ...element,\n                        isSelected: false\n                      })),\n                      ...elements\n                        .filter(element => element.isSelected)\n                        .map(element => {\n                          const newElement = duplicateElement(element);\n                          newElement.isSelected = true;\n                          return newElement;\n                        })\n                    ];\n                  }\n                }\n              }\n            } else {\n              elements = clearSelection(elements);\n            }\n\n            if (isTextElement(element)) {\n              let textX = e.clientX;\n              let textY = e.clientY;\n              if (!e.altKey) {\n                const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n                  x,\n                  y\n                );\n                if (snappedToCenterPosition) {\n                  element.x = snappedToCenterPosition.elementCenterX;\n                  element.y = snappedToCenterPosition.elementCenterY;\n                  textX = snappedToCenterPosition.wysiwygX;\n                  textY = snappedToCenterPosition.wysiwygY;\n                }\n              }\n\n              textWysiwyg({\n                initText: \"\",\n                x: textX,\n                y: textY,\n                strokeColor: this.state.currentItemStrokeColor,\n                font: this.state.currentItemFont,\n                onSubmit: text => {\n                  addTextElement(element, text, this.state.currentItemFont);\n                  elements = [...elements, { ...element, isSelected: true }];\n                  this.setState({\n                    draggingElement: null,\n                    elementType: \"selection\"\n                  });\n                }\n              });\n              return;\n            }\n\n            if (this.state.elementType === \"text\") {\n              elements = [...elements, { ...element, isSelected: true }];\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n            } else {\n              elements = [...elements, element];\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          element.height += element.y - lastY;\n                          element.y = lastY;\n                        }\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          element.height += element.y - lastY;\n                          element.y = lastY;\n                        }\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height = lastY - element.y;\n                        }\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                    el.shape = null;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (hitElement?.isSelected) {\n                // Marking that click was used for dragging to check\n                // if elements should be deselected on mouseup\n                draggingOccured = true;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey\n                ? Math.abs(width) * Math.sign(height)\n                : height;\n              draggingElement.shape = null;\n\n              if (this.state.elementType === \"selection\") {\n                elements = setSelection(elements, draggingElement);\n              }\n              // We don't want to save history when moving an element\n              history.skipRecording();\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // If click occured on already selected element\n              // it is needed to remove selection from other elements\n              // or if SHIFT or META key pressed remove selection\n              // from hitted element\n              //\n              // If click occured and elements were dragged or some element\n              // was added to selection (on mousedown phase) we need to keep\n              // selection unchanged\n              if (\n                hitElement &&\n                !draggingOccured &&\n                !elementIsAddedToSelection\n              ) {\n                if (e.shiftKey) {\n                  hitElement.isSelected = false;\n                } else {\n                  elements = clearSelection(elements);\n                  hitElement.isSelected = true;\n                }\n              }\n\n              if (draggingElement === null) {\n                // if no element is clicked, clear the selection and redraw\n                elements = clearSelection(elements);\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                elements = elements.slice(0, -1);\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n\n              history.resumeRecording();\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            history.skipRecording();\n            this.forceUpdate();\n          }}\n          onDoubleClick={e => {\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n\n            const elementAtPosition = getElementAtPosition(elements, x, y);\n\n            const element = newElement(\n              \"text\",\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            ) as ExcalidrawTextElement;\n\n            let initText = \"\";\n            let textX = e.clientX;\n            let textY = e.clientY;\n\n            if (elementAtPosition && isTextElement(elementAtPosition)) {\n              elements = elements.filter(\n                element => element.id !== elementAtPosition.id\n              );\n              this.forceUpdate();\n\n              Object.assign(element, elementAtPosition);\n              // x and y will change after calling addTextElement function\n              element.x = elementAtPosition.x + elementAtPosition.width / 2;\n              element.y = elementAtPosition.y + elementAtPosition.height / 2;\n              initText = elementAtPosition.text;\n              textX =\n                this.state.scrollX +\n                elementAtPosition.x +\n                CANVAS_WINDOW_OFFSET_LEFT +\n                elementAtPosition.width / 2;\n              textY =\n                this.state.scrollY +\n                elementAtPosition.y +\n                CANVAS_WINDOW_OFFSET_TOP +\n                elementAtPosition.height / 2;\n            } else if (!e.altKey) {\n              const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n                x,\n                y\n              );\n\n              if (snappedToCenterPosition) {\n                element.x = snappedToCenterPosition.elementCenterX;\n                element.y = snappedToCenterPosition.elementCenterY;\n                textX = snappedToCenterPosition.wysiwygX;\n                textY = snappedToCenterPosition.wysiwygY;\n              }\n            }\n\n            textWysiwyg({\n              initText,\n              x: textX,\n              y: textY,\n              strokeColor: element.strokeColor,\n              font: element.font || this.state.currentItemFont,\n              onSubmit: text => {\n                addTextElement(\n                  element,\n                  text,\n                  element.font || this.state.currentItemFont\n                );\n                elements = [...elements, { ...element, isSelected: true }];\n                this.setState({\n                  draggingElement: null,\n                  elementType: \"selection\"\n                });\n              }\n            });\n          }}\n          onMouseMove={e => {\n            const hasDeselectedButton = Boolean(e.buttons);\n            if (hasDeselectedButton || this.state.elementType !== \"selection\") {\n              return;\n            }\n            const { x, y } = viewportCoordsToSceneCoords(e, this.state);\n            const resizeElement = getElementWithResizeHandler(\n              elements,\n              { x, y },\n              this.state\n            );\n            if (resizeElement && resizeElement.resizeHandle) {\n              document.documentElement.style.cursor = `${resizeElement.resizeHandle}-resize`;\n              return;\n            }\n            const hitElement = getElementAtPosition(elements, x, y);\n            if (hitElement) {\n              const resizeHandle = resizeTest(hitElement, x, y, {\n                scrollX: this.state.scrollX,\n                scrollY: this.state.scrollY\n              });\n              document.documentElement.style.cursor = resizeHandle\n                ? `${resizeHandle}-resize`\n                : `move`;\n            } else {\n              document.documentElement.style.cursor = ``;\n            }\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  private addElementsFromPaste = (paste: string) => {\n    let parsedElements;\n    try {\n      parsedElements = JSON.parse(paste);\n    } catch (e) {}\n    if (\n      Array.isArray(parsedElements) &&\n      parsedElements.length > 0 &&\n      parsedElements[0].type // need to implement a better check here...\n    ) {\n      elements = clearSelection(elements);\n\n      let subCanvasX1 = Infinity;\n      let subCanvasX2 = 0;\n      let subCanvasY1 = Infinity;\n      let subCanvasY2 = 0;\n\n      const minX = Math.min(...parsedElements.map(element => element.x));\n      const minY = Math.min(...parsedElements.map(element => element.y));\n\n      const distance = (x: number, y: number) => {\n        return Math.abs(x > y ? x - y : y - x);\n      };\n\n      parsedElements.forEach(parsedElement => {\n        const [x1, y1, x2, y2] = getElementAbsoluteCoords(parsedElement);\n        subCanvasX1 = Math.min(subCanvasX1, x1);\n        subCanvasY1 = Math.min(subCanvasY1, y1);\n        subCanvasX2 = Math.max(subCanvasX2, x2);\n        subCanvasY2 = Math.max(subCanvasY2, y2);\n      });\n\n      const elementsCenterX = distance(subCanvasX1, subCanvasX2) / 2;\n      const elementsCenterY = distance(subCanvasY1, subCanvasY2) / 2;\n\n      const dx =\n        this.state.cursorX -\n        this.state.scrollX -\n        CANVAS_WINDOW_OFFSET_LEFT -\n        elementsCenterX;\n      const dy =\n        this.state.cursorY -\n        this.state.scrollY -\n        CANVAS_WINDOW_OFFSET_TOP -\n        elementsCenterY;\n\n      elements = [\n        ...elements,\n        ...parsedElements.map(parsedElement => {\n          const duplicate = duplicateElement(parsedElement);\n          duplicate.x += dx - minX;\n          duplicate.y += dy - minY;\n          return duplicate;\n        })\n      ];\n      this.forceUpdate();\n    }\n  };\n\n  private getTextWysiwygSnappedToCenterPosition(x: number, y: number) {\n    const elementClickedInside = getElementContainingPosition(elements, x, y);\n    if (elementClickedInside) {\n      const elementCenterX =\n        elementClickedInside.x + elementClickedInside.width / 2;\n      const elementCenterY =\n        elementClickedInside.y + elementClickedInside.height / 2;\n      const distanceToCenter = Math.hypot(\n        x - elementCenterX,\n        y - elementCenterY\n      );\n      const isSnappedToCenter =\n        distanceToCenter < TEXT_TO_CENTER_SNAP_THRESHOLD;\n      if (isSnappedToCenter) {\n        const wysiwygX =\n          this.state.scrollX +\n          elementClickedInside.x +\n          CANVAS_WINDOW_OFFSET_LEFT +\n          elementClickedInside.width / 2;\n        const wysiwygY =\n          this.state.scrollY +\n          elementClickedInside.y +\n          CANVAS_WINDOW_OFFSET_TOP +\n          elementClickedInside.height / 2;\n        return { wysiwygX, wysiwygY, elementCenterX, elementCenterY };\n      }\n    }\n  }\n\n  private saveDebounced = debounce(() => {\n    saveToLocalStorage(elements, this.state);\n  }, 300);\n\n  componentDidUpdate() {\n    renderScene(elements, this.rc!, this.canvas!, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    this.saveDebounced();\n    if (history.isRecording()) {\n      history.pushEntry(history.generateCurrentEntry(elements));\n      history.clearRedoStack();\n    }\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}