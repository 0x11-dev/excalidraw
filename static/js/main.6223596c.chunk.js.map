{"version":3,"sources":["zindex.ts","index.tsx"],"names":["swap","elements","indexA","indexB","element","moveOneLeft","indicesToMove","sort","a","b","isSorted","forEach","index","i","moveOneRight","reversedIndicesToMove","length","moveAllLeft","leftMostElements","map","reverse","concat","pos","moveAllRight","rightMostElements","Array","of","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","distanceBetweenPointAndSegment","x","y","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","hitTest","type","px","abs","width","py","height","tx","ty","ex","ey","rx","ry","qx","qy","r","q","min","max","t","getElementAbsoluteX1","getElementAbsoluteX2","getElementAbsoluteY1","getElementAbsoluteY2","getArrowPoints","x3","y3","x4","y4","console","warn","Error","resizeTest","sceneState","handlers","handlerRectangles","filter","Object","keys","key","handler","scrollX","scrollY","elementX1","elementX2","elementY1","elementY2","renderScene","rc","context","fillStyle","viewBackgroundColor","fillRect","canvas","clearRect","selectedIndices","getSelectedIndices","draw","isSelected","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","canvasWidth","canvasHeight","scrollBarWidth","horizontalScrollBar","SCROLLBAR_MARGIN","scrollBarHeight","horizontal","vertical","SCROLLBAR_WIDTH","getScrollbars","rotate","angle","cos","sin","generator","rough","isTextElement","isInputLike","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","distance","minSize","xs","ys","PI","generateDraw","shape","rectangle","stroke","strokeColor","fill","backgroundColor","translate","ellipse","shapes","line","font","fillText","text","actualBoundingBoxAscent","clearSelection","deleteSelectedElements","splice","KEYS","SHAPES","icon","faMousePointer","value","faSquare","faCircle","faLongArrowAltRight","faFont","shapesShortcutKeys","findElementByKey","reduce","isArrowKey","keyCode","push","someElementIsSelected","some","App","state","draggingElement","resizingElement","elementType","exportBackground","exportVisibleOnly","exportPadding","currentItemStrokeColor","currentItemBackgroundColor","onResize","forceUpdate","onKeyDown","event","preventDefault","step","shiftKey","metaKey","altKey","code","includes","toLowerCase","setState","clearCanvas","window","confirm","removeWheelEventListener","handleWheel","e","deltaX","deltaY","document","addEventListener","this","savedState","savedElements","localStorage","getItem","JSON","parse","restore","removeEventListener","className","onCut","clipboardData","setData","stringify","onCopy","onPaste","parsedElements","paste","getData","isArray","parsedElement","checked","onChange","onClick","title","alert","ReactDOM","render","rootElement","subCanvasX1","Infinity","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","createElement","tempCanvasCtx","getContext","style","display","body","appendChild","drawImage","link","setAttribute","toDataURL","click","remove","exportAsPNG","Number","disabled","id","innerWidth","innerHeight","ref","undefined","passive","onMouseDown","button","activeElement","blur","clientX","offsetLeft","clientY","offsetTop","newElement","resizeHandle","isDraggingElements","isResizingElements","cursorStyle","documentElement","cursor","resizeElement","find","hitElement","prompt","measureText","actualBoundingBoxDescent","lastX","lastY","onMouseMove","HTMLElement","el","selectedElements","selection","selectionX1","selectionX2","selectionY1","selectionY2","setSelection","onMouseUp","pop","setItem","React","Component","getElementById"],"mappings":"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","file":"static/js/main.6223596c.chunk.js","sourcesContent":["function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMousePointer,\n  faSquare,\n  faCircle,\n  faLongArrowAltRight,\n  faFont\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { moveOneLeft, moveAllLeft, moveOneRight, moveAllRight } from \"./zindex\";\n\nimport \"./styles.scss\";\n\ntype ExcalidrawElement = ReturnType<typeof newElement>;\ntype ExcalidrawTextElement = ExcalidrawElement & {\n  type: \"text\";\n  font: string;\n  text: string;\n  actualBoundingBoxAscent: number;\n};\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nconst elements = Array.of<ExcalidrawElement>();\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nconst LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nfunction randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nfunction withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n\n// https://stackoverflow.com/a/6853926/232122\nfunction distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nfunction hitTest(element: ExcalidrawElement, x: number, y: number): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = element.width / 2;\n    const b = element.height / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\nfunction resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  sceneState: SceneState\n): string | false {\n  if (element.type === \"text\" || element.type === \"arrow\") return false;\n\n  const x1 = getElementAbsoluteX1(element);\n  const x2 = getElementAbsoluteX2(element);\n  const y1 = getElementAbsoluteY1(element);\n  const y2 = getElementAbsoluteY2(element);\n\n  const handlers = handlerRectangles(x1, x2, y1, y2, sceneState);\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key];\n\n    return (\n      x + sceneState.scrollX >= handler[0] &&\n      x + sceneState.scrollX <= handler[0] + handler[2] &&\n      y + sceneState.scrollY >= handler[1] &&\n      y + sceneState.scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n}\n\nfunction newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    type: type,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    isSelected: false,\n    strokeColor: strokeColor,\n    backgroundColor: backgroundColor,\n    seed: randomSeed(),\n    draw(\n      rc: RoughCanvas,\n      context: CanvasRenderingContext2D,\n      sceneState: SceneState\n    ) {}\n  };\n  return element;\n}\n\ntype SceneState = {\n  scrollX: number;\n  scrollY: number;\n  // null indicates transparent bg\n  viewBackgroundColor: string | null;\n};\n\nconst SCROLLBAR_WIDTH = 6;\nconst SCROLLBAR_MARGIN = 4;\nconst SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nfunction getScrollbars(\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  // horizontal scrollbar\n  const sceneWidth = canvasWidth + Math.abs(scrollX);\n  const scrollBarWidth = (canvasWidth * canvasWidth) / sceneWidth;\n  const scrollBarX = scrollX > 0 ? 0 : canvasWidth - scrollBarWidth;\n  const horizontalScrollBar = {\n    x: scrollBarX + SCROLLBAR_MARGIN,\n    y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n    width: scrollBarWidth - SCROLLBAR_MARGIN * 2,\n    height: SCROLLBAR_WIDTH\n  };\n\n  // vertical scrollbar\n  const sceneHeight = canvasHeight + Math.abs(scrollY);\n  const scrollBarHeight = (canvasHeight * canvasHeight) / sceneHeight;\n  const scrollBarY = scrollY > 0 ? 0 : canvasHeight - scrollBarHeight;\n  const verticalScrollBar = {\n    x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n    y: scrollBarY + SCROLLBAR_MARGIN,\n    width: SCROLLBAR_WIDTH,\n    height: scrollBarHeight - SCROLLBAR_WIDTH * 2\n  };\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nfunction handlerRectangles(\n  elementX1: number,\n  elementX2: number,\n  elementY1: number,\n  elementY2: number,\n  sceneState: SceneState\n) {\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers: { [handler: string]: number[] } = {};\n\n  if (elementX2 - elementX1 > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY1 - margin + sceneState.scrollY - 8,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY2 - margin + sceneState.scrollY + 8,\n      8,\n      8\n    ];\n  }\n\n  if (elementY2 - elementY1 > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + sceneState.scrollX - 8,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + sceneState.scrollX + 8,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + sceneState.scrollX - 8,\n    elementY1 - margin + sceneState.scrollY - 8,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + sceneState.scrollX + 8,\n    elementY1 - margin + sceneState.scrollY - 8,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + sceneState.scrollX - 8,\n    elementY2 - margin + sceneState.scrollY + 8,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + sceneState.scrollX + 8,\n    elementY2 - margin + sceneState.scrollY + 8,\n    8,\n    8\n  ]; // se\n\n  return handlers;\n}\n\nfunction renderScene(\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  sceneState: SceneState\n) {\n  if (!context) return;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(-0.5, -0.5, canvas.width, canvas.height);\n  } else {\n    context.clearRect(-0.5, -0.5, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  const selectedIndices = getSelectedIndices();\n\n  elements.forEach(element => {\n    element.draw(rc, context, sceneState);\n    if (element.isSelected) {\n      const margin = 4;\n\n      const elementX1 = getElementAbsoluteX1(element);\n      const elementX2 = getElementAbsoluteX2(element);\n      const elementY1 = getElementAbsoluteY1(element);\n      const elementY2 = getElementAbsoluteY2(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n\n      if (\n        element.type !== \"text\" &&\n        element.type !== \"arrow\" &&\n        selectedIndices.length === 1\n      ) {\n        const handlers = handlerRectangles(\n          elementX1,\n          elementX2,\n          elementY1,\n          elementY2,\n          sceneState\n        );\n        Object.values(handlers).forEach(handler => {\n          context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n        });\n      }\n    }\n  });\n\n  const scrollBars = getScrollbars(\n    context.canvas.width,\n    context.canvas.height,\n    sceneState.scrollX,\n    sceneState.scrollY\n  );\n\n  context.fillStyle = SCROLLBAR_COLOR;\n  context.fillRect(\n    scrollBars.horizontal.x,\n    scrollBars.horizontal.y,\n    scrollBars.horizontal.width,\n    scrollBars.horizontal.height\n  );\n  context.fillRect(\n    scrollBars.vertical.x,\n    scrollBars.vertical.y,\n    scrollBars.vertical.width,\n    scrollBars.vertical.height\n  );\n  context.fillStyle = fillStyle;\n}\n\nfunction exportAsPNG({\n  exportBackground,\n  exportVisibleOnly,\n  exportPadding = 10,\n  viewBackgroundColor\n}: {\n  exportBackground: boolean;\n  exportVisibleOnly: boolean;\n  exportPadding?: number;\n  viewBackgroundColor: string;\n}) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n\n  // deselect & rerender\n\n  clearSelection();\n  ReactDOM.render(<App />, rootElement, () => {\n    // calculate visible-area coords\n\n    let subCanvasX1 = Infinity;\n    let subCanvasX2 = 0;\n    let subCanvasY1 = Infinity;\n    let subCanvasY2 = 0;\n\n    elements.forEach(element => {\n      subCanvasX1 = Math.min(subCanvasX1, getElementAbsoluteX1(element));\n      subCanvasX2 = Math.max(subCanvasX2, getElementAbsoluteX2(element));\n      subCanvasY1 = Math.min(subCanvasY1, getElementAbsoluteY1(element));\n      subCanvasY2 = Math.max(subCanvasY2, getElementAbsoluteY2(element));\n    });\n\n    // create temporary canvas from which we'll export\n\n    const tempCanvas = document.createElement(\"canvas\");\n    const tempCanvasCtx = tempCanvas.getContext(\"2d\")!;\n    tempCanvas.style.display = \"none\";\n    document.body.appendChild(tempCanvas);\n    tempCanvas.width = exportVisibleOnly\n      ? subCanvasX2 - subCanvasX1 + exportPadding * 2\n      : canvas.width;\n    tempCanvas.height = exportVisibleOnly\n      ? subCanvasY2 - subCanvasY1 + exportPadding * 2\n      : canvas.height;\n\n    // if we're exporting without bg, we need to rerender the scene without it\n    //  (it's reset again, below)\n    if (!exportBackground) {\n      renderScene(rc, context, {\n        viewBackgroundColor: null,\n        scrollX: 0,\n        scrollY: 0\n      });\n    }\n\n    // copy our original canvas onto the temp canvas\n    tempCanvasCtx.drawImage(\n      canvas, // source\n      exportVisibleOnly // sx\n        ? subCanvasX1 - exportPadding\n        : 0,\n      exportVisibleOnly // sy\n        ? subCanvasY1 - exportPadding\n        : 0,\n      exportVisibleOnly // sWidth\n        ? subCanvasX2 - subCanvasX1 + exportPadding * 2\n        : canvas.width,\n      exportVisibleOnly // sHeight\n        ? subCanvasY2 - subCanvasY1 + exportPadding * 2\n        : canvas.height,\n      0, // dx\n      0, // dy\n      exportVisibleOnly ? tempCanvas.width : canvas.width, // dWidth\n      exportVisibleOnly ? tempCanvas.height : canvas.height // dHeight\n    );\n\n    // reset transparent bg back to original\n    if (!exportBackground) {\n      renderScene(rc, context, { viewBackgroundColor, scrollX: 0, scrollY: 0 });\n    }\n\n    // create a temporary <a> elem which we'll use to download the image\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"download\", \"excalidraw.png\");\n    link.setAttribute(\"href\", tempCanvas.toDataURL(\"image/png\"));\n    link.click();\n\n    // clean up the DOM\n    link.remove();\n    if (tempCanvas !== canvas) tempCanvas.remove();\n  });\n}\n\nfunction rotate(x1: number, y1: number, x2: number, y2: number, angle: number) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nfunction isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n\nfunction isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\nfunction getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n\nfunction generateDraw(element: ExcalidrawElement) {\n  if (element.type === \"selection\") {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(\n        element.x + scrollX,\n        element.y + scrollY,\n        element.width,\n        element.height\n      );\n      context.fillStyle = fillStyle;\n    };\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor\n      });\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        { stroke: element.strokeColor, fill: element.backgroundColor }\n      )\n    );\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, { stroke: element.strokeColor }),\n      // -----\n      generator.line(x1, y1, x2, y2, { stroke: element.strokeColor }),\n      //    /\n      generator.line(x4, y4, x2, y2, { stroke: element.strokeColor })\n    ]);\n\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      shapes.forEach(shape => rc.draw(shape));\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n    return;\n  } else if (isTextElement(element)) {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const font = context.font;\n      context.font = element.font;\n      const fillStyle = context.fillStyle;\n      context.fillStyle = element.strokeColor;\n      context.fillText(\n        element.text,\n        element.x + scrollX,\n        element.y + element.actualBoundingBoxAscent + scrollY\n      );\n      context.fillStyle = fillStyle;\n      context.font = font;\n    };\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nfunction getElementAbsoluteX1(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x : element.x + element.width;\n}\nfunction getElementAbsoluteX2(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x + element.width : element.x;\n}\nfunction getElementAbsoluteY1(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y : element.y + element.height;\n}\nfunction getElementAbsoluteY2(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y + element.height : element.y;\n}\n\nfunction setSelection(selection: ExcalidrawElement) {\n  const selectionX1 = getElementAbsoluteX1(selection);\n  const selectionX2 = getElementAbsoluteX2(selection);\n  const selectionY1 = getElementAbsoluteY1(selection);\n  const selectionY2 = getElementAbsoluteY2(selection);\n  elements.forEach(element => {\n    const elementX1 = getElementAbsoluteX1(element);\n    const elementX2 = getElementAbsoluteX2(element);\n    const elementY1 = getElementAbsoluteY1(element);\n    const elementY2 = getElementAbsoluteY2(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nfunction clearSelection() {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nfunction deleteSelectedElements() {\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nfunction save(state: AppState) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n\nfunction restore() {\n  try {\n    const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n    const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n    if (savedElements) {\n      elements.splice(0, elements.length, ...JSON.parse(savedElements));\n      elements.forEach((element: ExcalidrawElement) => generateDraw(element));\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements.splice(0, elements.length);\n    return null;\n  }\n}\n\ntype AppState = {\n  draggingElement: ExcalidrawElement | null;\n  resizingElement: ExcalidrawElement | null;\n  elementType: string;\n  exportBackground: boolean;\n  exportVisibleOnly: boolean;\n  exportPadding: number;\n  currentItemStrokeColor: string;\n  currentItemBackgroundColor: string;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n};\n\nconst KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nconst SHAPES = [\n  {\n    icon: faMousePointer,\n    value: \"selection\"\n  },\n  {\n    icon: faSquare,\n    value: \"rectangle\"\n  },\n  {\n    icon: faCircle,\n    value: \"ellipse\"\n  },\n  {\n    icon: faLongArrowAltRight,\n    value: \"arrow\"\n  },\n  {\n    icon: faFont,\n    value: \"text\"\n  }\n];\n\nconst shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nfunction findElementByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nfunction getSelectedIndices() {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nconst someElementIsSelected = () =>\n  elements.some(element => element.isSelected);\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const savedState = restore();\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: false,\n    exportVisibleOnly: true,\n    exportPadding: 10,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (isInputLike(event.target)) return;\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      deleteSelectedElements();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n\n      // Send backward: Cmd-Shift-Alt-B\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyB\"\n    ) {\n      this.moveOneLeft();\n      event.preventDefault();\n\n      // Send to back: Cmd-Shift-B\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyB\") {\n      this.moveAllLeft();\n      event.preventDefault();\n\n      // Bring forward: Cmd-Shift-Alt-F\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyF\"\n    ) {\n      this.moveOneRight();\n      event.preventDefault();\n\n      // Bring to front: Cmd-Shift-F\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyF\") {\n      this.moveAllRight();\n      event.preventDefault();\n\n      // Select all: Cmd-A\n    } else if (event.metaKey && event.code === \"KeyA\") {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findElementByKey(event.key) });\n    }\n  };\n\n  private deleteSelectedElements = () => {\n    deleteSelectedElements();\n    this.forceUpdate();\n  };\n\n  private clearCanvas = () => {\n    if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n      elements.splice(0, elements.length);\n      this.setState({\n        viewBackgroundColor: \"#ffffff\",\n        scrollX: 0,\n        scrollY: 0\n      });\n      this.forceUpdate();\n    }\n  };\n\n  private moveAllLeft = () => {\n    moveAllLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneLeft = () => {\n    moveOneLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveAllRight = () => {\n    moveAllRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneRight = () => {\n    moveOneRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  public render() {\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements();\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          let parsedElements;\n          try {\n            parsedElements = JSON.parse(paste);\n          } catch (e) {}\n          if (\n            Array.isArray(parsedElements) &&\n            parsedElements.length > 0 &&\n            parsedElements[0].type // need to implement a better check here...\n          ) {\n            clearSelection();\n            parsedElements.forEach(parsedElement => {\n              parsedElement.x += 10;\n              parsedElement.y += 10;\n              parsedElement.seed = randomSeed();\n              generateDraw(parsedElement);\n              elements.push(parsedElement);\n            });\n            this.forceUpdate();\n          }\n          e.preventDefault();\n        }}\n      >\n        <div className=\"sidePanel\">\n          <h4>Shapes</h4>\n          <div className=\"panelTools\">\n            {SHAPES.map(({ value, icon }) => (\n              <label key={value} className=\"tool\">\n                <input\n                  type=\"radio\"\n                  checked={this.state.elementType === value}\n                  onChange={() => {\n                    this.setState({ elementType: value });\n                    clearSelection();\n                    this.forceUpdate();\n                  }}\n                />\n                <div className=\"toolIcon\">\n                  <FontAwesomeIcon icon={icon} />\n                </div>\n              </label>\n            ))}\n          </div>\n          <h4>Colors</h4>\n          <div className=\"panelColumn\">\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.viewBackgroundColor}\n                onChange={e => {\n                  this.setState({ viewBackgroundColor: e.target.value });\n                }}\n              />\n              Background\n            </label>\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.currentItemStrokeColor}\n                onChange={e => {\n                  this.setState({ currentItemStrokeColor: e.target.value });\n                }}\n              />\n              Shape Stroke\n            </label>\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.currentItemBackgroundColor}\n                onChange={e => {\n                  this.setState({ currentItemBackgroundColor: e.target.value });\n                }}\n              />\n              Shape Background\n            </label>\n          </div>\n          <h4>Canvas</h4>\n          <div className=\"panelColumn\">\n            <button\n              onClick={this.clearCanvas}\n              title=\"Clear the canvas & reset background color\"\n            >\n              Clear canvas\n            </button>\n          </div>\n          <h4>Export</h4>\n          <div className=\"panelColumn\">\n            <button\n              onClick={() => {\n                exportAsPNG({\n                  exportBackground: this.state.exportBackground,\n                  exportVisibleOnly: this.state.exportVisibleOnly,\n                  exportPadding: this.state.exportPadding,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              }}\n            >\n              Export to png\n            </button>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.exportBackground}\n                onChange={e => {\n                  this.setState({ exportBackground: e.target.checked });\n                }}\n              />\n              background\n            </label>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.exportVisibleOnly}\n                onChange={e => {\n                  this.setState({ exportVisibleOnly: e.target.checked });\n                }}\n              />\n              visible area only\n            </label>\n            <div>\n              (padding:\n              <input\n                type=\"number\"\n                value={this.state.exportPadding}\n                onChange={e => {\n                  this.setState({ exportPadding: Number(e.target.value) });\n                }}\n                disabled={!this.state.exportVisibleOnly}\n              />\n              px)\n            </div>\n          </div>\n          {someElementIsSelected() && (\n            <>\n              <h4>Shape options</h4>\n              <div className=\"panelColumn\">\n                <button onClick={this.deleteSelectedElements}>Delete</button>\n                <button onClick={this.moveOneRight}>Bring forward</button>\n                <button onClick={this.moveAllRight}>Bring to front</button>\n                <button onClick={this.moveOneLeft}>Send backward</button>\n                <button onClick={this.moveAllLeft}>Send to back</button>\n              </div>\n            </>\n          )}\n        </div>\n        <canvas\n          id=\"canvas\"\n          width={window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT}\n          height={window.innerHeight - CANVAS_WINDOW_OFFSET_TOP}\n          ref={canvas => {\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n            }\n          }}\n          onMouseDown={e => {\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            const x =\n              e.clientX -\n              (e.target as HTMLElement).offsetLeft -\n              this.state.scrollX;\n            const y =\n              e.clientY -\n              (e.target as HTMLElement).offsetTop -\n              this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor\n            );\n            let resizeHandle: string | false = false;\n            let isDraggingElements = false;\n            let isResizingElements = false;\n            const cursorStyle = document.documentElement.style.cursor;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = elements.find(element => {\n                return resizeTest(element, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              });\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeTest(resizeElement, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                let hitElement = null;\n\n                // We need to to hit testing from front (end of the array) to back (beginning of the array)\n                for (let i = elements.length - 1; i >= 0; --i) {\n                  if (hitTest(elements[i], x, y)) {\n                    hitElement = elements[i];\n                    break;\n                  }\n                }\n\n                // If we click on something\n                if (hitElement) {\n                  if (hitElement.isSelected) {\n                    // If that element is not already selected, do nothing,\n                    // we're likely going to drag it\n                  } else {\n                    // We unselect every other elements unless shift is pressed\n                    if (!e.shiftKey) {\n                      clearSelection();\n                    }\n                    // No matter what, we select it\n                    hitElement.isSelected = true;\n                  }\n                } else {\n                  // If we don't click on anything, let's remove all the selected elements\n                  clearSelection();\n                }\n\n                isDraggingElements = someElementIsSelected();\n\n                if (isDraggingElements) {\n                  document.documentElement.style.cursor = \"move\";\n                }\n              }\n            }\n\n            if (isTextElement(element)) {\n              const text = prompt(\"What text do you want?\");\n              if (text === null) {\n                return;\n              }\n              element.text = text;\n              element.font = \"20px Virgil\";\n              const font = context.font;\n              context.font = element.font;\n              const {\n                actualBoundingBoxAscent,\n                actualBoundingBoxDescent,\n                width\n              } = context.measureText(element.text);\n              element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n              context.font = font;\n              const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n              // Center the text\n              element.x -= width / 2;\n              element.y -= actualBoundingBoxAscent;\n              element.width = width;\n              element.height = height;\n            }\n\n            generateDraw(element);\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const x = e.clientX - target.offsetLeft - this.state.scrollX;\n                  const y = e.clientY - target.offsetTop - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.height += element.y - lastY;\n                        element.x = lastX;\n                        element.y = lastY;\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        element.height = lastY - element.y;\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                    generateDraw(el);\n                  });\n                  lastX = x;\n                  lastY = y;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x = e.clientX - target.offsetLeft - this.state.scrollX;\n                  const y = e.clientY - target.offsetTop - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey ? width : height;\n\n              generateDraw(draggingElement);\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(draggingElement);\n              }\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              document.documentElement.style.cursor = cursorStyle;\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection();\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            this.forceUpdate();\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  componentDidUpdate() {\n    renderScene(rc, context, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    save(this.state);\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\n// Big hack to ensure that all the 1px lines are drawn at 1px instead of 2px\n// https://stackoverflow.com/questions/13879322/drawing-a-1px-thick-line-in-canvas-creates-a-2px-thick-line/13879402#comment90766599_13879402\ncontext.translate(0.5, 0.5);\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}