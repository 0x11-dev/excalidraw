{"version":3,"sources":["index.tsx"],"names":["elements","Array","of","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","distanceBetweenPointAndSegment","x","y","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","renderScene","rc","context","sceneState","fillStyle","viewBackgroundColor","fillRect","canvas","width","height","clearRect","forEach","element","draw","isSelected","elementX1","getElementAbsoluteX1","elementX2","getElementAbsoluteX2","elementY1","getElementAbsoluteY1","elementY2","getElementAbsoluteY2","lineDash","getLineDash","setLineDash","strokeRect","scrollX","scrollY","margin","scrollBars","canvasWidth","canvasHeight","scrollBarWidth","abs","horizontalScrollBar","SCROLLBAR_MARGIN","scrollBarHeight","horizontal","vertical","SCROLLBAR_WIDTH","getScrollbars","exportAsPNG","exportBackground","exportVisibleOnly","exportPadding","length","window","alert","clearSelection","ReactDOM","render","App","rootElement","subCanvasX1","Infinity","subCanvasX2","subCanvasY1","subCanvasY2","min","max","tempCanvas","document","createElement","tempCanvasCtx","getContext","style","display","body","appendChild","drawImage","link","setAttribute","toDataURL","click","remove","rotate","angle","cos","sin","generator","rough","isTextElement","type","getArrowPoints","distance","minSize","xs","ys","PI","x3","y3","generateDraw","shape","rectangle","stroke","strokeColor","fill","backgroundColor","translate","ellipse","x4","y4","shapes","line","Error","font","fillText","text","actualBoundingBoxAscent","deleteSelectedElements","i","splice","KEYS","SHAPES","icon","faMousePointer","value","faSquare","faCircle","faLongArrowAltRight","faFont","shapesShortcutKeys","map","findElementByKey","key","reduce","isArrowKey","keyCode","state","draggingElement","elementType","currentItemStrokeColor","currentItemBackgroundColor","onResize","forceUpdate","onKeyDown","event","target","nodeName","preventDefault","step","shiftKey","metaKey","includes","toLowerCase","setState","addEventListener","this","savedState","savedElements","localStorage","getItem","JSON","parse","e","restore","removeEventListener","className","onCut","clipboardData","setData","stringify","filter","onCopy","onPaste","parsedElements","paste","getData","isArray","parsedElement","push","checked","onChange","onClick","Number","disabled","id","innerWidth","innerHeight","onWheel","deltaX","deltaY","onMouseDown","clientX","offsetLeft","clientY","offsetTop","newElement","isDraggingElements","cursorStyle","documentElement","cursor","hitElement","find","px","py","tx","ty","a","b","ex","ey","rx","ry","qx","qy","r","q","t","console","warn","hitTest","some","prompt","measureText","actualBoundingBoxDescent","lastX","lastY","onMouseMove","HTMLElement","selectedElements","el","selection","selectionX1","selectionX2","selectionY1","selectionY2","setSelection","onMouseUp","pop","setItem","React","Component","getElementById"],"mappings":"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","file":"static/js/main.527805ec.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMousePointer,\n  faSquare,\n  faCircle,\n  faLongArrowAltRight,\n  faFont\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./styles.css\";\n\ntype ExcalidrawElement = ReturnType<typeof newElement>;\ntype ExcalidrawTextElement = ExcalidrawElement & {\n  type: \"text\";\n  font: string;\n  text: string;\n  actualBoundingBoxAscent: number;\n};\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nlet elements = Array.of<ExcalidrawElement>();\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nconst LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nfunction randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nfunction withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n\n// https://stackoverflow.com/a/6853926/232122\nfunction distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nfunction hitTest(element: ExcalidrawElement, x: number, y: number): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = element.width / 2;\n    const b = element.height / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\nfunction newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    type: type,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    isSelected: false,\n    strokeColor: strokeColor,\n    backgroundColor: backgroundColor,\n    seed: randomSeed(),\n    draw(\n      rc: RoughCanvas,\n      context: CanvasRenderingContext2D,\n      sceneState: SceneState\n    ) {}\n  };\n  return element;\n}\n\ntype SceneState = {\n  scrollX: number;\n  scrollY: number;\n  // null indicates transparent bg\n  viewBackgroundColor: string | null;\n};\n\nconst SCROLLBAR_WIDTH = 6;\nconst SCROLLBAR_MARGIN = 4;\nconst SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nfunction getScrollbars(\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  // horizontal scrollbar\n  const sceneWidth = canvasWidth + Math.abs(scrollX);\n  const scrollBarWidth = (canvasWidth * canvasWidth) / sceneWidth;\n  const scrollBarX = scrollX > 0 ? 0 : canvasWidth - scrollBarWidth;\n  const horizontalScrollBar = {\n    x: scrollBarX + SCROLLBAR_MARGIN,\n    y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n    width: scrollBarWidth - SCROLLBAR_MARGIN * 2,\n    height: SCROLLBAR_WIDTH\n  };\n\n  // vertical scrollbar\n  const sceneHeight = canvasHeight + Math.abs(scrollY);\n  const scrollBarHeight = (canvasHeight * canvasHeight) / sceneHeight;\n  const scrollBarY = scrollY > 0 ? 0 : canvasHeight - scrollBarHeight;\n  const verticalScrollBar = {\n    x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n    y: scrollBarY + SCROLLBAR_MARGIN,\n    width: SCROLLBAR_WIDTH,\n    height: scrollBarHeight - SCROLLBAR_WIDTH * 2\n  };\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nfunction renderScene(\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  sceneState: SceneState\n) {\n  if (!context) return;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(-0.5, -0.5, canvas.width, canvas.height);\n  } else {\n    context.clearRect(-0.5, -0.5, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  elements.forEach(element => {\n    element.draw(rc, context, sceneState);\n    if (element.isSelected) {\n      const margin = 4;\n\n      const elementX1 = getElementAbsoluteX1(element);\n      const elementX2 = getElementAbsoluteX2(element);\n      const elementY1 = getElementAbsoluteY1(element);\n      const elementY2 = getElementAbsoluteY2(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n    }\n  });\n\n  const scrollBars = getScrollbars(\n    context.canvas.width,\n    context.canvas.height,\n    sceneState.scrollX,\n    sceneState.scrollY\n  );\n\n  context.fillStyle = SCROLLBAR_COLOR;\n  context.fillRect(\n    scrollBars.horizontal.x,\n    scrollBars.horizontal.y,\n    scrollBars.horizontal.width,\n    scrollBars.horizontal.height\n  );\n  context.fillRect(\n    scrollBars.vertical.x,\n    scrollBars.vertical.y,\n    scrollBars.vertical.width,\n    scrollBars.vertical.height\n  );\n  context.fillStyle = fillStyle;\n}\n\nfunction exportAsPNG({\n  exportBackground,\n  exportVisibleOnly,\n  exportPadding = 10,\n  viewBackgroundColor\n}: {\n  exportBackground: boolean;\n  exportVisibleOnly: boolean;\n  exportPadding?: number;\n  viewBackgroundColor: string;\n}) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n\n  // deselect & rerender\n\n  clearSelection();\n  ReactDOM.render(<App />, rootElement, () => {\n    // calculate visible-area coords\n\n    let subCanvasX1 = Infinity;\n    let subCanvasX2 = 0;\n    let subCanvasY1 = Infinity;\n    let subCanvasY2 = 0;\n\n    elements.forEach(element => {\n      subCanvasX1 = Math.min(subCanvasX1, getElementAbsoluteX1(element));\n      subCanvasX2 = Math.max(subCanvasX2, getElementAbsoluteX2(element));\n      subCanvasY1 = Math.min(subCanvasY1, getElementAbsoluteY1(element));\n      subCanvasY2 = Math.max(subCanvasY2, getElementAbsoluteY2(element));\n    });\n\n    // create temporary canvas from which we'll export\n\n    const tempCanvas = document.createElement(\"canvas\");\n    const tempCanvasCtx = tempCanvas.getContext(\"2d\")!;\n    tempCanvas.style.display = \"none\";\n    document.body.appendChild(tempCanvas);\n    tempCanvas.width = exportVisibleOnly\n      ? subCanvasX2 - subCanvasX1 + exportPadding * 2\n      : canvas.width;\n    tempCanvas.height = exportVisibleOnly\n      ? subCanvasY2 - subCanvasY1 + exportPadding * 2\n      : canvas.height;\n\n    // if we're exporting without bg, we need to rerender the scene without it\n    //  (it's reset again, below)\n    if (!exportBackground) {\n      renderScene(rc, context, {\n        viewBackgroundColor: null,\n        scrollX: 0,\n        scrollY: 0\n      });\n    }\n\n    // copy our original canvas onto the temp canvas\n    tempCanvasCtx.drawImage(\n      canvas, // source\n      exportVisibleOnly // sx\n        ? subCanvasX1 - exportPadding\n        : 0,\n      exportVisibleOnly // sy\n        ? subCanvasY1 - exportPadding\n        : 0,\n      exportVisibleOnly // sWidth\n        ? subCanvasX2 - subCanvasX1 + exportPadding * 2\n        : canvas.width,\n      exportVisibleOnly // sHeight\n        ? subCanvasY2 - subCanvasY1 + exportPadding * 2\n        : canvas.height,\n      0, // dx\n      0, // dy\n      exportVisibleOnly ? tempCanvas.width : canvas.width, // dWidth\n      exportVisibleOnly ? tempCanvas.height : canvas.height // dHeight\n    );\n\n    // reset transparent bg back to original\n    if (!exportBackground) {\n      renderScene(rc, context, { viewBackgroundColor, scrollX: 0, scrollY: 0 });\n    }\n\n    // create a temporary <a> elem which we'll use to download the image\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"download\", \"excalidraw.png\");\n    link.setAttribute(\"href\", tempCanvas.toDataURL(\"image/png\"));\n    link.click();\n\n    // clean up the DOM\n    link.remove();\n    if (tempCanvas !== canvas) tempCanvas.remove();\n  });\n}\n\nfunction rotate(x1: number, y1: number, x2: number, y2: number, angle: number) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nfunction isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n\nfunction getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n\nfunction generateDraw(element: ExcalidrawElement) {\n  if (element.type === \"selection\") {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(\n        element.x + scrollX,\n        element.y + scrollY,\n        element.width,\n        element.height\n      );\n      context.fillStyle = fillStyle;\n    };\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor\n      });\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        { stroke: element.strokeColor, fill: element.backgroundColor }\n      )\n    );\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, { stroke: element.strokeColor }),\n      // -----\n      generator.line(x1, y1, x2, y2, { stroke: element.strokeColor }),\n      //    /\n      generator.line(x4, y4, x2, y2, { stroke: element.strokeColor })\n    ]);\n\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      shapes.forEach(shape => rc.draw(shape));\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n    return;\n  } else if (isTextElement(element)) {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const font = context.font;\n      context.font = element.font;\n      const fillStyle = context.fillStyle;\n      context.fillStyle = element.strokeColor;\n      context.fillText(\n        element.text,\n        element.x + scrollX,\n        element.y + element.actualBoundingBoxAscent + scrollY\n      );\n      context.fillStyle = fillStyle;\n      context.font = font;\n    };\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nfunction getElementAbsoluteX1(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x : element.x + element.width;\n}\nfunction getElementAbsoluteX2(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x + element.width : element.x;\n}\nfunction getElementAbsoluteY1(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y : element.y + element.height;\n}\nfunction getElementAbsoluteY2(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y + element.height : element.y;\n}\n\nfunction setSelection(selection: ExcalidrawElement) {\n  const selectionX1 = getElementAbsoluteX1(selection);\n  const selectionX2 = getElementAbsoluteX2(selection);\n  const selectionY1 = getElementAbsoluteY1(selection);\n  const selectionY2 = getElementAbsoluteY2(selection);\n  elements.forEach(element => {\n    const elementX1 = getElementAbsoluteX1(element);\n    const elementX2 = getElementAbsoluteX2(element);\n    const elementY1 = getElementAbsoluteY1(element);\n    const elementY2 = getElementAbsoluteY2(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nfunction clearSelection() {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nfunction deleteSelectedElements() {\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nfunction save(state: AppState) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n\nfunction restore() {\n  try {\n    const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n    const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n    if (savedElements) {\n      elements = JSON.parse(savedElements);\n      elements.forEach((element: ExcalidrawElement) => generateDraw(element));\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements = [];\n    return null;\n  }\n}\n\ntype AppState = {\n  draggingElement: ExcalidrawElement | null;\n  elementType: string;\n  exportBackground: boolean;\n  exportVisibleOnly: boolean;\n  exportPadding: number;\n  currentItemStrokeColor: string;\n  currentItemBackgroundColor: string;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n};\n\nconst KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nconst SHAPES = [\n  {\n    icon: faMousePointer,\n    value: \"selection\"\n  },\n  {\n    icon: faSquare,\n    value: \"rectangle\"\n  },\n  {\n    icon: faCircle,\n    value: \"ellipse\"\n  },\n  {\n    icon: faLongArrowAltRight,\n    value: \"arrow\"\n  },\n  {\n    icon: faFont,\n    value: \"text\"\n  }\n];\n\nconst shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nfunction findElementByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const savedState = restore();\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    elementType: \"selection\",\n    exportBackground: false,\n    exportVisibleOnly: true,\n    exportPadding: 10,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if ((event.target as HTMLElement).nodeName === \"INPUT\") {\n      return;\n    }\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      deleteSelectedElements();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === \"a\" && event.metaKey) {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findElementByKey(event.key) });\n    }\n  };\n\n  public render() {\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements();\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          let parsedElements;\n          try {\n            parsedElements = JSON.parse(paste);\n          } catch (e) {}\n          if (\n            Array.isArray(parsedElements) &&\n            parsedElements.length > 0 &&\n            parsedElements[0].type // need to implement a better check here...\n          ) {\n            clearSelection();\n            parsedElements.forEach(parsedElement => {\n              parsedElement.x += 10;\n              parsedElement.y += 10;\n              parsedElement.seed = randomSeed();\n              generateDraw(parsedElement);\n              elements.push(parsedElement);\n            });\n            this.forceUpdate();\n          }\n          e.preventDefault();\n        }}\n      >\n        <div className=\"sidePanel\">\n          <h4>Shapes</h4>\n          <div className=\"panelTools\">\n            {SHAPES.map(({ value, icon }) => (\n              <label key={value} className=\"tool\">\n                <input\n                  type=\"radio\"\n                  checked={this.state.elementType === value}\n                  onChange={() => {\n                    this.setState({ elementType: value });\n                    clearSelection();\n                    this.forceUpdate();\n                  }}\n                />\n                <div className=\"toolIcon\">\n                  <FontAwesomeIcon icon={icon} />\n                </div>\n              </label>\n            ))}\n          </div>\n          <h4>Colors</h4>\n          <div className=\"panelColumn\">\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.viewBackgroundColor}\n                onChange={e => {\n                  this.setState({ viewBackgroundColor: e.target.value });\n                }}\n              />\n              Background\n            </label>\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.currentItemStrokeColor}\n                onChange={e => {\n                  this.setState({ currentItemStrokeColor: e.target.value });\n                }}\n              />\n              Shape Stroke\n            </label>\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.currentItemBackgroundColor}\n                onChange={e => {\n                  this.setState({ currentItemBackgroundColor: e.target.value });\n                }}\n              />\n              Shape Background\n            </label>\n          </div>\n          <h4>Export</h4>\n          <div className=\"panelColumn\">\n            <button\n              onClick={() => {\n                exportAsPNG({\n                  exportBackground: this.state.exportBackground,\n                  exportVisibleOnly: this.state.exportVisibleOnly,\n                  exportPadding: this.state.exportPadding,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              }}\n            >\n              Export to png\n            </button>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.exportBackground}\n                onChange={e => {\n                  this.setState({ exportBackground: e.target.checked });\n                }}\n              />\n              background\n            </label>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.exportVisibleOnly}\n                onChange={e => {\n                  this.setState({ exportVisibleOnly: e.target.checked });\n                }}\n              />\n              visible area only\n            </label>\n            <div>\n              (padding:\n              <input\n                type=\"number\"\n                value={this.state.exportPadding}\n                onChange={e => {\n                  this.setState({ exportPadding: Number(e.target.value) });\n                }}\n                disabled={!this.state.exportVisibleOnly}\n              />\n              px)\n            </div>\n          </div>\n        </div>\n        <canvas\n          id=\"canvas\"\n          width={window.innerWidth - 250}\n          height={window.innerHeight}\n          onWheel={e => {\n            e.preventDefault();\n            const { deltaX, deltaY } = e;\n            this.setState(state => ({\n              scrollX: state.scrollX - deltaX,\n              scrollY: state.scrollY - deltaY\n            }));\n          }}\n          onMouseDown={e => {\n            const x =\n              e.clientX -\n              (e.target as HTMLElement).offsetLeft -\n              this.state.scrollX;\n            const y =\n              e.clientY -\n              (e.target as HTMLElement).offsetTop -\n              this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor\n            );\n            let isDraggingElements = false;\n            const cursorStyle = document.documentElement.style.cursor;\n            if (this.state.elementType === \"selection\") {\n              const hitElement = elements.find(element => {\n                return hitTest(element, x, y);\n              });\n\n              // If we click on something\n              if (hitElement) {\n                if (hitElement.isSelected) {\n                  // If that element is not already selected, do nothing,\n                  // we're likely going to drag it\n                } else {\n                  // We unselect every other elements unless shift is pressed\n                  if (!e.shiftKey) {\n                    clearSelection();\n                  }\n                  // No matter what, we select it\n                  hitElement.isSelected = true;\n                }\n              } else {\n                // If we don't click on anything, let's remove all the selected elements\n                clearSelection();\n              }\n\n              isDraggingElements = elements.some(element => element.isSelected);\n\n              if (isDraggingElements) {\n                document.documentElement.style.cursor = \"move\";\n              }\n            }\n\n            if (isTextElement(element)) {\n              const text = prompt(\"What text do you want?\");\n              if (text === null) {\n                return;\n              }\n              element.text = text;\n              element.font = \"20px Virgil\";\n              const font = context.font;\n              context.font = element.font;\n              const {\n                actualBoundingBoxAscent,\n                actualBoundingBoxDescent,\n                width\n              } = context.measureText(element.text);\n              element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n              context.font = font;\n              const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n              // Center the text\n              element.x -= width / 2;\n              element.y -= actualBoundingBoxAscent;\n              element.width = width;\n              element.height = height;\n            }\n\n            generateDraw(element);\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x = e.clientX - target.offsetLeft - this.state.scrollX;\n                  const y = e.clientY - target.offsetTop - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                target.offsetLeft -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                target.offsetTop -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey ? width : height;\n\n              generateDraw(draggingElement);\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(draggingElement);\n              }\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              document.documentElement.style.cursor = cursorStyle;\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection();\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            this.forceUpdate();\n          }}\n        />\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    renderScene(rc, context, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    save(this.state);\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\n// Big hack to ensure that all the 1px lines are drawn at 1px instead of 2px\n// https://stackoverflow.com/questions/13879322/drawing-a-1px-thick-line-in-canvas-creates-a-2px-thick-line/13879402#comment90766599_13879402\ncontext.translate(0.5, 0.5);\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}