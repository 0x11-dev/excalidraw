{"version":3,"sources":["zindex.ts","random.ts","roundRect.ts","element/newElement.ts","math.ts","element/bounds.ts","element/handlerRectangles.ts","element/collision.ts","element/resizeTest.ts","element/typeChecks.ts","element/generateDraw.ts","components/EditableText.tsx","index.tsx"],"names":["swap","elements","indexA","indexB","element","moveOneLeft","indicesToMove","sort","a","b","isSorted","forEach","index","i","moveOneRight","reversedIndicesToMove","length","moveAllLeft","leftMostElements","map","reverse","concat","pos","moveAllRight","rightMostElements","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","roundRect","context","x","y","width","height","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","newElement","type","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","isSelected","draw","rc","sceneState","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","rotate","angle","cos","sin","getElementAbsoluteX1","getElementAbsoluteX2","getElementAbsoluteY1","getElementAbsoluteY2","getDiamondPoints","topX","rightX","rightY","getArrowPoints","distance","minSize","min","xs","ys","PI","x3","y3","handlerRectangles","elementX1","elementX2","elementY1","elementY2","handlers","marginX","marginY","abs","scrollX","scrollY","nw","se","hitTest","px","py","tx","ty","ex","ey","rx","ry","qx","qy","r","q","max","t","topY","bottomX","bottomY","leftX","leftY","x4","y4","console","warn","Error","resizeTest","filter","Object","keys","key","handler","isTextElement","generator","rough","generateDraw","fillRect","shape","rectangle","globalAlpha","translate","polygon","ellipse","options","shapes","line","font","fillText","text","actualBoundingBoxAscent","EditableText","props","state","value","edit","this","setState","e","target","onChange","className","name","maxLength","handleEdit","onBlur","handleBlur","onKeyDown","autoFocus","onClick","Component","Array","of","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","getMinutes","secs","getSeconds","getDateTime","skipHistory","stateHistory","redoStack","generateHistoryCurrentEntry","JSON","stringify","restoreHistoryEntry","entry","newElements","parse","splice","push","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","renderScene","canvas","offsetX","offsetY","renderScrollbars","renderSelection","getContext","viewBackgroundColor","clearRect","selectedIndices","getSelectedIndices","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","window","devicePixelRatio","strokeStyle","scrollBar","saveFile","data","link","document","createElement","setAttribute","click","remove","isInputLike","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","clearSelection","resetCursor","documentElement","style","cursor","deleteSelectedElements","restore","savedElements","savedState","undefined","KEYS","SHAPES","icon","viewBox","d","shapesShortcutKeys","capitalize","str","charAt","toUpperCase","slice","findElementByKey","reduce","isArrowKey","keyCode","someElementIsSelected","some","getSelectedAttribute","getAttribute","attributes","from","Set","addTextElement","prompt","textMeasure","measureText","actualBoundingBoxDescent","getElementAtPosition","hitElement","ButtonSelect","option","ColorPicker","color","React","useState","isActive","setActive","colors","changedColor","hex","lastCanvasWidth","lastCanvasHeight","lastMouseUp","App","draggingElement","resizingElement","elementType","exportBackground","currentItemStrokeColor","currentItemBackgroundColor","onResize","forceUpdate","event","preventDefault","step","shiftKey","metaKey","altKey","code","includes","toLowerCase","currentEntry","entryToRestore","pop","lastEntry","clearCanvas","confirm","removeWheelEventListener","changeProperty","callback","changeOpacity","changeStrokeColor","changeBackgroundColor","handleWheel","deltaX","deltaY","addEventListener","localStorage","getItem","removeEventListener","innerWidth","innerHeight","onCut","clipboardData","setData","onCopy","onPaste","parsedElements","paste","getData","isArray","parsedElement","title","checked","updateProjectName","exportPadding","alert","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","display","body","appendChild","toDataURL","exportAsPNG","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","input","reader","FileReader","accept","onchange","files","readAsText","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","then","id","ref","passive","scale","onMouseDown","button","activeElement","blur","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","clientX","clientY","resizeHandle","isDraggingElements","isResizingElements","resizeElement","find","lastX","lastY","onMouseMove","HTMLElement","el","selectedElements","sign","selection","selectionX1","selectionX2","selectionY1","selectionY2","setSelection","onMouseUp","onDoubleClick","newEntry","setItem","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.cad43afc.chunk.js","sourcesContent":["function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n}\n","// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nexport const LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nexport function randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nexport function withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { SceneState } from \"../scene/types\";\nimport { randomSeed } from \"../random\";\n\nexport function newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    type: type,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    isSelected: false,\n    strokeColor: strokeColor,\n    backgroundColor: backgroundColor,\n    fillStyle: fillStyle,\n    strokeWidth: strokeWidth,\n    roughness: roughness,\n    opacity: opacity,\n    seed: randomSeed(),\n    draw(\n      rc: RoughCanvas,\n      context: CanvasRenderingContext2D,\n      sceneState: SceneState\n    ) {}\n  };\n  return element;\n}\n","// https://stackoverflow.com/a/6853926/232122\nexport function distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nexport function rotate(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number\n) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { rotate } from \"../math\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nexport function getElementAbsoluteX1(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x : element.x + element.width;\n}\nexport function getElementAbsoluteX2(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x + element.width : element.x;\n}\nexport function getElementAbsoluteY1(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y : element.y + element.height;\n}\nexport function getElementAbsoluteY2(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y + element.height : element.y;\n}\n\nexport function getDiamondPoints(element: ExcalidrawElement) {\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nexport function getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n","import { SceneState } from \"../scene/types\";\nimport { ExcalidrawElement } from \"./types\";\n\nexport function handlerRectangles(\n  element: ExcalidrawElement,\n  sceneState: SceneState\n) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers: { [handler: string]: number[] } = {};\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY1 - margin + sceneState.scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY2 - margin + sceneState.scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + sceneState.scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + sceneState.scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    };\n  }\n\n  return handlers;\n}\n","import { distanceBetweenPointAndSegment } from \"../math\";\n\nimport { ExcalidrawElement } from \"./types\";\nimport {\n  getElementAbsoluteX1,\n  getElementAbsoluteX2,\n  getElementAbsoluteY1,\n  getElementAbsoluteY2,\n  getArrowPoints,\n  getDiamondPoints\n} from \"./bounds\";\n\nexport function hitTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number\n): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = element.width / 2;\n    const b = element.height / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    const [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { SceneState } from \"../scene/types\";\n\nimport { handlerRectangles } from \"./handlerRectangles\";\n\nexport function resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  sceneState: SceneState\n): string | false {\n  if (element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, sceneState);\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key];\n\n    return (\n      x + sceneState.scrollX >= handler[0] &&\n      x + sceneState.scrollX <= handler[0] + handler[2] &&\n      y + sceneState.scrollY >= handler[1] &&\n      y + sceneState.scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n}\n","import { ExcalidrawElement, ExcalidrawTextElement } from \"./types\";\n\nexport function isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n","import rough from \"roughjs/bin/wrappers/rough\";\n\nimport { withCustomMathRandom } from \"../random\";\n\nimport { ExcalidrawElement } from \"./types\";\nimport { isTextElement } from \"./typeChecks\";\nimport { getDiamondPoints, getArrowPoints } from \"./bounds\";\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nexport function generateDraw(element: ExcalidrawElement) {\n  if (element.type === \"selection\") {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(\n        element.x + scrollX,\n        element.y + scrollY,\n        element.width,\n        element.height\n      );\n      context.fillStyle = fillStyle;\n    };\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor,\n        fillStyle: element.fillStyle,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness\n      });\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n      context.globalAlpha = 1;\n    };\n  } else if (element.type === \"diamond\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      const [\n        topX,\n        topY,\n        rightX,\n        rightY,\n        bottomX,\n        bottomY,\n        leftX,\n        leftY\n      ] = getDiamondPoints(element);\n      return generator.polygon(\n        [\n          [topX, topY],\n          [rightX, rightY],\n          [bottomX, bottomY],\n          [leftX, leftY]\n        ],\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      );\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n      context.globalAlpha = 1;\n    };\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      )\n    );\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n      context.globalAlpha = 1;\n    };\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const options = {\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      roughness: element.roughness\n    };\n\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, options),\n      // -----\n      generator.line(x1, y1, x2, y2, options),\n      //    /\n      generator.line(x4, y4, x2, y2, options)\n    ]);\n\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      context.translate(element.x + scrollX, element.y + scrollY);\n      shapes.forEach(shape => rc.draw(shape));\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n      context.globalAlpha = 1;\n    };\n    return;\n  } else if (isTextElement(element)) {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      const font = context.font;\n      context.font = element.font;\n      const fillStyle = context.fillStyle;\n      context.fillStyle = element.strokeColor;\n      context.fillText(\n        element.text,\n        element.x + scrollX,\n        element.y + element.actualBoundingBoxAscent + scrollY\n      );\n      context.fillStyle = fillStyle;\n      context.font = font;\n      context.globalAlpha = 1;\n    };\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import React, { Fragment, Component } from \"react\";\n\ntype InputState = {\n  value: string;\n  edit: boolean;\n};\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport default class EditableText extends Component<Props, InputState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      edit: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props: Props) {\n    this.setState({ value: props.value });\n  }\n\n  private handleEdit(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  private handleBlur() {\n    const { value } = this.state;\n\n    if (!value) {\n      this.setState({ value: this.props.value, edit: false });\n      return;\n    }\n    this.props.onChange(value);\n    this.setState({ edit: false });\n  }\n\n  public render() {\n    const { value, edit } = this.state;\n\n    return (\n      <Fragment>\n        {edit ? (\n          <input\n            className=\"project-name-input\"\n            name=\"name\"\n            maxLength={25}\n            value={value}\n            onChange={e => this.handleEdit(e)}\n            onBlur={() => this.handleBlur()}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                this.handleBlur();\n              }\n            }}\n            autoFocus\n          />\n        ) : (\n          <span\n            onClick={() => this.setState({ edit: true })}\n            className=\"project-name\"\n          >\n            {value}\n          </span>\n        )}\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { TwitterPicker } from \"react-color\";\n\nimport { moveOneLeft, moveAllLeft, moveOneRight, moveAllRight } from \"./zindex\";\nimport { randomSeed } from \"./random\";\nimport { roundRect } from \"./roundRect\";\nimport {\n  newElement,\n  resizeTest,\n  generateDraw,\n  getElementAbsoluteX1,\n  getElementAbsoluteX2,\n  getElementAbsoluteY1,\n  getElementAbsoluteY2,\n  handlerRectangles,\n  hitTest,\n  isTextElement\n} from \"./element\";\nimport { SceneState } from \"./scene/types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"./element/types\";\n\nimport EditableText from \"./components/EditableText\";\n\nimport \"./styles.scss\";\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nconst elements = Array.of<ExcalidrawElement>();\n\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nlet skipHistory = false;\nconst stateHistory: string[] = [];\nconst redoStack: string[] = [];\n\nfunction generateHistoryCurrentEntry() {\n  return JSON.stringify(\n    elements.map(element => ({ ...element, isSelected: false }))\n  );\n}\nfunction pushHistoryEntry(newEntry: string) {\n  if (\n    stateHistory.length > 0 &&\n    stateHistory[stateHistory.length - 1] === newEntry\n  ) {\n    // If the last entry is the same as this one, ignore it\n    return;\n  }\n  stateHistory.push(newEntry);\n}\nfunction restoreHistoryEntry(entry: string) {\n  const newElements = JSON.parse(entry);\n  elements.splice(0, elements.length);\n  newElements.forEach((newElement: ExcalidrawElement) => {\n    generateDraw(newElement);\n    elements.push(newElement);\n  });\n  // When restoring, we shouldn't add an history entry otherwise we'll be stuck with it and can't go back\n  skipHistory = true;\n}\n\nconst SCROLLBAR_WIDTH = 6;\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nconst SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nfunction getScrollBars(\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    minX = Math.min(minX, getElementAbsoluteX1(element));\n    maxX = Math.max(maxX, getElementAbsoluteX2(element));\n    minY = Math.min(minY, getElementAbsoluteY1(element));\n    maxY = Math.max(maxY, getElementAbsoluteY2(element));\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nfunction isOverScrollBars(\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(canvasWidth, canvasHeight, scrollX, scrollY);\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n\nfunction renderScene(\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  const selectedIndices = getSelectedIndices();\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    element.draw(rc, context, sceneState);\n    if (renderSelection && element.isSelected) {\n      const margin = 4;\n\n      const elementX1 = getElementAbsoluteX1(element);\n      const elementX2 = getElementAbsoluteX2(element);\n      const elementY1 = getElementAbsoluteY1(element);\n      const elementY2 = getElementAbsoluteY2(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n\n      if (element.type !== \"text\" && selectedIndices.length === 1) {\n        const handlers = handlerRectangles(element, sceneState);\n        Object.values(handlers).forEach(handler => {\n          context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n        });\n      }\n    }\n  });\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n\nfunction saveAsJSON(name: string) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nfunction loadFromJSON() {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        const data = JSON.parse(reader.result as string);\n        restore(data.elements, null);\n        resolve();\n      }\n    };\n  });\n}\n\nfunction exportAsPNG({\n  exportBackground,\n  exportPadding = 10,\n  viewBackgroundColor,\n  name\n}: {\n  exportBackground: boolean;\n  exportPadding?: number;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n  name: string;\n}) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    subCanvasX1 = Math.min(subCanvasX1, getElementAbsoluteX1(element));\n    subCanvasX2 = Math.max(subCanvasX2, getElementAbsoluteX2(element));\n    subCanvasY1 = Math.min(subCanvasY1, getElementAbsoluteY1(element));\n    subCanvasY2 = Math.max(subCanvasY2, getElementAbsoluteY2(element));\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\nfunction getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\nfunction isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\nfunction setSelection(selection: ExcalidrawElement) {\n  const selectionX1 = getElementAbsoluteX1(selection);\n  const selectionX2 = getElementAbsoluteX2(selection);\n  const selectionY1 = getElementAbsoluteY1(selection);\n  const selectionY2 = getElementAbsoluteY2(selection);\n  elements.forEach(element => {\n    const elementX1 = getElementAbsoluteX1(element);\n    const elementX2 = getElementAbsoluteX2(element);\n    const elementY1 = getElementAbsoluteY1(element);\n    const elementY2 = getElementAbsoluteY2(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nfunction clearSelection() {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction deleteSelectedElements() {\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nfunction save(state: AppState) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n\nfunction restoreFromLocalStorage() {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  return restore(savedElements, savedState);\n}\n\nfunction restore(\n  savedElements: string | ExcalidrawElement[] | null,\n  savedState: string | null\n) {\n  try {\n    if (savedElements) {\n      elements.splice(\n        0,\n        elements.length,\n        ...(typeof savedElements === \"string\"\n          ? JSON.parse(savedElements)\n          : savedElements)\n      );\n      elements.forEach((element: ExcalidrawElement) => {\n        element.fillStyle = element.fillStyle || \"hachure\";\n        element.strokeWidth = element.strokeWidth || 1;\n        element.roughness = element.roughness || 1;\n        element.opacity =\n          element.opacity === null || element.opacity === undefined\n            ? 100\n            : element.opacity;\n\n        generateDraw(element);\n      });\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements.splice(0, elements.length);\n    return null;\n  }\n}\n\ntype AppState = {\n  draggingElement: ExcalidrawElement | null;\n  resizingElement: ExcalidrawElement | null;\n  elementType: string;\n  exportBackground: boolean;\n  currentItemStrokeColor: string;\n  currentItemBackgroundColor: string;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n  name: string;\n};\n\nconst KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nconst SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nconst shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nfunction capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction findElementByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nfunction getSelectedIndices() {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nconst someElementIsSelected = () =>\n  elements.some(element => element.isSelected);\n\nconst hasBackground = () =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\")\n  );\n\nconst hasStroke = () =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\" ||\n        element.type === \"arrow\")\n  );\n\nfunction getSelectedAttribute<T>(\n  getAttribute: (element: ExcalidrawElement) => T\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => getAttribute(element))\n    )\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n\nfunction addTextElement(element: ExcalidrawTextElement) {\n  resetCursor();\n  const text = prompt(\"What text do you want?\");\n  if (text === null || text === \"\") {\n    return false;\n  }\n  const fontSize = 20;\n  element.text = text;\n  element.font = `${fontSize}px Virgil`;\n  const font = context.font;\n  context.font = element.font;\n  const textMeasure = context.measureText(element.text);\n  const width = textMeasure.width;\n  const actualBoundingBoxAscent =\n    textMeasure.actualBoundingBoxAscent || fontSize;\n  const actualBoundingBoxDescent = textMeasure.actualBoundingBoxDescent || 0;\n  element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n  context.font = font;\n  const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n  // Center the text\n  element.x -= width / 2;\n  element.y -= actualBoundingBoxAscent;\n  element.width = width;\n  element.height = height;\n\n  return true;\n}\n\nfunction getElementAtPosition(x: number, y: number) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], x, y)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n\nfunction ButtonSelect<T>({\n  options,\n  value,\n  onChange\n}: {\n  options: { value: T; text: string }[];\n  value: T | null;\n  onChange: (value: T) => void;\n}) {\n  return (\n    <div className=\"buttonList\">\n      {options.map(option => (\n        <button\n          key={option.text}\n          onClick={() => onChange(option.value)}\n          className={value === option.value ? \"active\" : \"\"}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nfunction ColorPicker({\n  color,\n  onChange\n}: {\n  color: string | null;\n  onChange: (color: string) => void;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  return (\n    <div>\n      <button\n        className=\"swatch\"\n        style={color ? { backgroundColor: color } : undefined}\n        onClick={() => setActive(!isActive)}\n      />\n      {isActive ? (\n        <div className=\"popover\">\n          <div className=\"cover\" onClick={() => setActive(false)} />\n          <TwitterPicker\n            colors={[\n              \"#000000\",\n              \"#ABB8C3\",\n              \"#FFFFFF\",\n              \"#FF6900\",\n              \"#FCB900\",\n              \"#00D084\",\n              \"#8ED1FC\",\n              \"#0693E3\",\n              \"#EB144C\",\n              \"#F78DA7\",\n              \"#9900EF\"\n            ]}\n            width=\"205px\"\n            color={color || undefined}\n            onChange={changedColor => {\n              onChange(changedColor.hex);\n            }}\n          />\n        </div>\n      ) : null}\n      <input\n        type=\"text\"\n        className=\"swatch-input\"\n        value={color || \"\"}\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const savedState = restoreFromLocalStorage();\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (isInputLike(event.target)) return;\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      deleteSelectedElements();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n\n      // Send backward: Cmd-Shift-Alt-B\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyB\"\n    ) {\n      this.moveOneLeft();\n      event.preventDefault();\n\n      // Send to back: Cmd-Shift-B\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyB\") {\n      this.moveAllLeft();\n      event.preventDefault();\n\n      // Bring forward: Cmd-Shift-Alt-F\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyF\"\n    ) {\n      this.moveOneRight();\n      event.preventDefault();\n\n      // Bring to front: Cmd-Shift-F\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyF\") {\n      this.moveAllRight();\n      event.preventDefault();\n\n      // Select all: Cmd-A\n    } else if (event.metaKey && event.code === \"KeyA\") {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findElementByKey(event.key) });\n    } else if (event.metaKey && event.code === \"KeyZ\") {\n      const currentEntry = generateHistoryCurrentEntry();\n      if (event.shiftKey) {\n        // Redo action\n        const entryToRestore = redoStack.pop();\n        if (entryToRestore !== undefined) {\n          restoreHistoryEntry(entryToRestore);\n          stateHistory.push(currentEntry);\n        }\n      } else {\n        // undo action\n        let lastEntry = stateHistory.pop();\n        // If nothing was changed since last, take the previous one\n        if (currentEntry === lastEntry) {\n          lastEntry = stateHistory.pop();\n        }\n        if (lastEntry !== undefined) {\n          restoreHistoryEntry(lastEntry);\n          redoStack.push(currentEntry);\n        }\n      }\n      this.forceUpdate();\n      event.preventDefault();\n    }\n  };\n\n  private deleteSelectedElements = () => {\n    deleteSelectedElements();\n    this.forceUpdate();\n  };\n\n  private clearCanvas = () => {\n    if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n      elements.splice(0, elements.length);\n      this.setState({\n        viewBackgroundColor: \"#ffffff\",\n        scrollX: 0,\n        scrollY: 0\n      });\n      this.forceUpdate();\n    }\n  };\n\n  private moveAllLeft = () => {\n    moveAllLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneLeft = () => {\n    moveOneLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveAllRight = () => {\n    moveAllRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneRight = () => {\n    moveOneRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private updateProjectName(name: string): void {\n    this.setState({ name });\n  }\n\n  private changeProperty = (callback: (element: ExcalidrawElement) => void) => {\n    elements.forEach(element => {\n      if (element.isSelected) {\n        callback(element);\n        generateDraw(element);\n      }\n    });\n\n    this.forceUpdate();\n  };\n\n  private changeOpacity = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.changeProperty(element => (element.opacity = +event.target.value));\n  };\n\n  private changeStrokeColor = (color: string) => {\n    this.changeProperty(element => (element.strokeColor = color));\n    this.setState({ currentItemStrokeColor: color });\n  };\n\n  private changeBackgroundColor = (color: string) => {\n    this.changeProperty(element => (element.backgroundColor = color));\n    this.setState({ currentItemBackgroundColor: color });\n  };\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements();\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          let parsedElements;\n          try {\n            parsedElements = JSON.parse(paste);\n          } catch (e) {}\n          if (\n            Array.isArray(parsedElements) &&\n            parsedElements.length > 0 &&\n            parsedElements[0].type // need to implement a better check here...\n          ) {\n            clearSelection();\n            parsedElements.forEach(parsedElement => {\n              parsedElement.x += 10;\n              parsedElement.y += 10;\n              parsedElement.seed = randomSeed();\n              generateDraw(parsedElement);\n              elements.push(parsedElement);\n            });\n            this.forceUpdate();\n          }\n          e.preventDefault();\n        }}\n      >\n        <div className=\"sidePanel\">\n          <h4>Shapes</h4>\n          <div className=\"panelTools\">\n            {SHAPES.map(({ value, icon }) => (\n              <label\n                key={value}\n                className=\"tool\"\n                title={`${capitalize(value)} - ${capitalize(value)[0]}`}\n              >\n                <input\n                  type=\"radio\"\n                  checked={this.state.elementType === value}\n                  onChange={() => {\n                    this.setState({ elementType: value });\n                    clearSelection();\n                    document.documentElement.style.cursor =\n                      value === \"text\" ? \"text\" : \"crosshair\";\n                    this.forceUpdate();\n                  }}\n                />\n                <div className=\"toolIcon\">{icon}</div>\n              </label>\n            ))}\n          </div>\n          {someElementIsSelected() && (\n            <div className=\"panelColumn\">\n              <h4>Selection</h4>\n              <div className=\"buttonList\">\n                <button onClick={this.moveOneRight}>Bring forward</button>\n                <button onClick={this.moveAllRight}>Bring to front</button>\n                <button onClick={this.moveOneLeft}>Send backward</button>\n                <button onClick={this.moveAllLeft}>Send to back</button>\n              </div>\n              <h5>Stroke Color</h5>\n              <ColorPicker\n                color={getSelectedAttribute(element => element.strokeColor)}\n                onChange={color => this.changeStrokeColor(color)}\n              />\n\n              {hasBackground() && (\n                <>\n                  <h5>Background Color</h5>\n                  <ColorPicker\n                    color={getSelectedAttribute(\n                      element => element.backgroundColor\n                    )}\n                    onChange={color => this.changeBackgroundColor(color)}\n                  />\n                  <h5>Fill</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: \"solid\", text: \"Solid\" },\n                      { value: \"hachure\", text: \"Hachure\" },\n                      { value: \"cross-hatch\", text: \"Cross-hatch\" }\n                    ]}\n                    value={getSelectedAttribute(element => element.fillStyle)}\n                    onChange={value => {\n                      this.changeProperty(element => {\n                        element.fillStyle = value;\n                      });\n                    }}\n                  />\n                </>\n              )}\n\n              {hasStroke() && (\n                <>\n                  <h5>Stroke Width</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: 1, text: \"Thin\" },\n                      { value: 2, text: \"Bold\" },\n                      { value: 4, text: \"Extra Bold\" }\n                    ]}\n                    value={getSelectedAttribute(element => element.strokeWidth)}\n                    onChange={value => {\n                      this.changeProperty(element => {\n                        element.strokeWidth = value;\n                      });\n                    }}\n                  />\n\n                  <h5>Sloppiness</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: 0, text: \"Draftsman\" },\n                      { value: 1, text: \"Artist\" },\n                      { value: 3, text: \"Cartoonist\" }\n                    ]}\n                    value={getSelectedAttribute(element => element.roughness)}\n                    onChange={value =>\n                      this.changeProperty(element => {\n                        element.roughness = value;\n                      })\n                    }\n                  />\n                </>\n              )}\n\n              <h5>Opacity</h5>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                onChange={this.changeOpacity}\n                value={\n                  getSelectedAttribute(element => element.opacity) ||\n                  0 /* Put the opacity at 0 if there are two conflicting ones */\n                }\n              />\n\n              <button onClick={this.deleteSelectedElements}>\n                Delete selected\n              </button>\n            </div>\n          )}\n          <h4>Canvas</h4>\n          <div className=\"panelColumn\">\n            <h5>Canvas Background Color</h5>\n            <ColorPicker\n              color={this.state.viewBackgroundColor}\n              onChange={color => this.setState({ viewBackgroundColor: color })}\n            />\n            <button\n              onClick={this.clearCanvas}\n              title=\"Clear the canvas & reset background color\"\n            >\n              Clear canvas\n            </button>\n          </div>\n          <h4>Export</h4>\n          <div className=\"panelColumn\">\n            <h5>Name</h5>\n            {this.state.name && (\n              <EditableText\n                value={this.state.name}\n                onChange={(name: string) => this.updateProjectName(name)}\n              />\n            )}\n            <h5>Image</h5>\n            <button\n              onClick={() => {\n                exportAsPNG(this.state);\n              }}\n            >\n              Export to png\n            </button>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.exportBackground}\n                onChange={e => {\n                  this.setState({ exportBackground: e.target.checked });\n                }}\n              />\n              background\n            </label>\n            <h5>Scene</h5>\n            <button\n              onClick={() => {\n                saveAsJSON(this.state.name);\n              }}\n            >\n              Save as...\n            </button>\n            <button\n              onClick={() => {\n                loadFromJSON().then(() => this.forceUpdate());\n              }}\n            >\n              Load file...\n            </button>\n          </div>\n        </div>\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n            let resizeHandle: string | false = false;\n            let isDraggingElements = false;\n            let isResizingElements = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = elements.find(element => {\n                return resizeTest(element, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              });\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeTest(resizeElement, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                const hitElement = getElementAtPosition(x, y);\n\n                // If we click on something\n                if (hitElement) {\n                  if (hitElement.isSelected) {\n                    // If that element is not already selected, do nothing,\n                    // we're likely going to drag it\n                  } else {\n                    // We unselect every other elements unless shift is pressed\n                    if (!e.shiftKey) {\n                      clearSelection();\n                    }\n                    // No matter what, we select it\n                    hitElement.isSelected = true;\n                  }\n                } else {\n                  // If we don't click on anything, let's remove all the selected elements\n                  clearSelection();\n                }\n\n                isDraggingElements = someElementIsSelected();\n\n                if (isDraggingElements) {\n                  document.documentElement.style.cursor = \"move\";\n                }\n              }\n            }\n\n            if (isTextElement(element)) {\n              if (!addTextElement(element)) {\n                return;\n              }\n            }\n\n            generateDraw(element);\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.height += element.y - lastY;\n                        element.x = lastX;\n                        element.y = lastY;\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        element.height = lastY - element.y;\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                    generateDraw(el);\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  skipHistory = true;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  skipHistory = true;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey\n                ? Math.abs(width) * Math.sign(height)\n                : height;\n\n              generateDraw(draggingElement);\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(draggingElement);\n              }\n              // We don't want to save history when moving an element\n              skipHistory = true;\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection();\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            skipHistory = true;\n            this.forceUpdate();\n          }}\n          onDoubleClick={e => {\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n\n            if (getElementAtPosition(x, y)) {\n              return;\n            }\n\n            const element = newElement(\n              \"text\",\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n\n            if (!addTextElement(element as ExcalidrawTextElement)) {\n              return;\n            }\n\n            generateDraw(element);\n            elements.push(element);\n\n            this.setState({\n              draggingElement: null,\n              elementType: \"selection\"\n            });\n            element.isSelected = true;\n\n            this.forceUpdate();\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  componentDidUpdate() {\n    renderScene(rc, canvas, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    save(this.state);\n    if (!skipHistory) {\n      pushHistoryEntry(generateHistoryCurrentEntry());\n      redoStack.splice(0, redoStack.length);\n    }\n    skipHistory = false;\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}