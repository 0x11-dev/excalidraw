{"version":3,"sources":["zindex.ts","random.ts","element/newElement.ts","math.ts","element/bounds.ts","element/handlerRectangles.ts","element/collision.ts","element/resizeTest.ts","element/typeChecks.ts","scene/scrollbars.ts","scene/selection.ts","scene/roundRect.ts","renderer/renderElement.ts","renderer/renderScene.ts","scene/data.ts","scene/comparisons.ts","utils.ts","components/ButtonSelect.tsx","shapes.tsx","history.ts","components/Popover.tsx","components/ContextMenu.tsx","components/panels/PanelTools.tsx","components/panels/PanelSelection.tsx","components/ColorPicker.tsx","components/panels/PanelColor.tsx","components/EditableText.tsx","components/panels/PanelExport.tsx","components/panels/PanelCanvas.tsx","index.tsx","scene/createScene.ts"],"names":["swap","elements","indexA","indexB","element","moveOneLeft","indicesToMove","sort","a","b","isSorted","forEach","index","i","moveOneRight","reversedIndicesToMove","length","moveAllLeft","leftMostElements","map","reverse","concat","pos","moveAllRight","rightMostElements","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","newElement","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","width","height","isSelected","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","rotate","angle","cos","sin","getElementAbsoluteCoords","getDiamondPoints","topX","rightX","rightY","getArrowPoints","distance","minSize","min","xs","ys","PI","x3","y3","handlerRectangles","sceneState","elementX1","elementX2","elementY1","elementY2","handlers","marginX","marginY","abs","scrollX","scrollY","nw","se","hitTest","px","py","tx","ty","ex","ey","rx","ry","qx","qy","r","q","max","t","topY","bottomX","bottomY","leftX","leftY","x4","y4","console","warn","Error","resizeTest","filter","Object","keys","key","handler","isTextElement","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","clearSelection","deleteSelectedElements","splice","getSelectedIndices","selectedIndices","push","someElementIsSelected","some","getSelectedAttribute","getAttribute","attributes","Array","from","Set","roundRect","context","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","generator","rough","renderElement","rc","fillRect","shape","rectangle","globalAlpha","translate","draw","polygon","ellipse","options","shapes","line","font","fillText","text","actualBoundingBoxAscent","renderScene","canvas","offsetX","offsetY","renderScrollbars","renderSelection","getContext","viewBackgroundColor","clearRect","selectedElements","el","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","window","devicePixelRatio","strokeStyle","scrollBar","saveFile","name","data","link","document","createElement","setAttribute","click","remove","restore","savedElements","savedState","JSON","parse","undefined","e","getElementAtPosition","hitElement","capitalizeString","str","charAt","toUpperCase","slice","isInputLike","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","ButtonSelect","value","onChange","className","option","onClick","SHAPES","icon","viewBox","d","shapesShortcutKeys","findShapeByKey","reduce","SceneHistory","recording","stateHistory","redoStack","stringify","newEntry","this","entry","newElements","skipRecording","currentEntry","generateCurrentEntry","entryToRestore","pop","restoreEntry","Popover","children","left","onCloseRequest","top","style","onContextMenu","preventDefault","contextMenuNode","ContextMenu","idx","ContextMenuOption","label","action","getContextMenuNode","div","body","appendChild","handleClose","unmountComponentAtNode","params","of","render","PanelTools","activeTool","onToolChange","title","checked","PanelSelection","onBringForward","onBringToFront","onSendBackward","onSendToBack","ColorPicker","color","React","useState","isActive","setActive","colors","changedColor","hex","onPaste","clipboardData","getData","PanelColor","onColorChange","colorValue","EditableText","props","state","edit","setState","maxLength","handleEdit","onBlur","handleBlur","onKeyDown","autoFocus","Component","PanelExport","projectName","exportBackground","onProjectNameChange","onExportBackgroundChange","onSaveScene","onLoadScene","onExportAsPNG","PanelCanvas","onViewBackgroundColorChange","onClearCanvas","history","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","getMinutes","secs","getSeconds","getDateTime","KEYS","META_KEY","test","navigator","platform","copiedStyles","isArrowKey","keyCode","resetCursor","documentElement","cursor","addTextElement","prompt","textMeasure","measureText","actualBoundingBoxDescent","lastCanvasWidth","lastCanvasHeight","lastMouseUp","App","draggingElement","resizingElement","elementType","currentItemStrokeColor","currentItemBackgroundColor","onResize","forceUpdate","event","step","shiftKey","altKey","code","includes","toLowerCase","redoOnce","undoOnce","metaKey","copyStyles","pasteStyles","clearCanvas","confirm","find","pastedElement","removeWheelEventListener","changeProperty","callback","changeOpacity","changeStrokeColor","changeBackgroundColor","copyToClipboard","clipboard","writeText","pasteFromClipboard","readText","then","addElementsFromPaste","handleWheel","deltaX","deltaY","paste","parsedElements","isArray","parsedElement","addEventListener","localStorage","getItem","removeEventListener","innerWidth","innerHeight","onCut","setData","onCopy","hasStroke","val","updateProjectName","exportPadding","alert","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","display","toDataURL","exportAsPNG","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","input","reader","FileReader","accept","onchange","files","readAsText","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","id","ref","passive","scale","clientX","clientY","onMouseDown","button","activeElement","blur","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","resizeHandle","isDraggingElements","isResizingElements","resizeElement","lastX","lastY","onMouseMove","HTMLElement","sign","selection","selectionX1","selectionY1","selectionX2","selectionY2","setSelection","onMouseUp","onDoubleClick","setItem","isRecording","pushEntry","clearRedoStack","resumeRecording","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.e0944150.chunk.js","sourcesContent":["function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n}\n","// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nexport const LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nexport function randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nexport function withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n","import { randomSeed } from \"../random\";\n\nexport function newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    type,\n    x,\n    y,\n    width,\n    height,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    isSelected: false,\n    seed: randomSeed()\n  };\n  return element;\n}\n","// https://stackoverflow.com/a/6853926/232122\nexport function distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nexport function rotate(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number\n) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { rotate } from \"../math\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nexport function getElementAbsoluteCoords(element: ExcalidrawElement) {\n  return [\n    element.width >= 0 ? element.x : element.x + element.width, // x1\n    element.height >= 0 ? element.y : element.y + element.height, // y1\n    element.width >= 0 ? element.x + element.width : element.x, // x2\n    element.height >= 0 ? element.y + element.height : element.y // y2\n  ];\n}\n\nexport function getDiamondPoints(element: ExcalidrawElement) {\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nexport function getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n","import { SceneState } from \"../scene/types\";\nimport { ExcalidrawElement } from \"./types\";\n\nexport function handlerRectangles(\n  element: ExcalidrawElement,\n  sceneState: SceneState\n) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers: { [handler: string]: number[] } = {};\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY1 - margin + sceneState.scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY2 - margin + sceneState.scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + sceneState.scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + sceneState.scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    };\n  }\n\n  return handlers;\n}\n","import { distanceBetweenPointAndSegment } from \"../math\";\n\nimport { ExcalidrawElement } from \"./types\";\nimport {\n  getArrowPoints,\n  getDiamondPoints,\n  getElementAbsoluteCoords\n} from \"./bounds\";\n\nexport function hitTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number\n): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = Math.abs(element.width) / 2;\n    const b = Math.abs(element.height) / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    const [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { ExcalidrawElement } from \"./types\";\nimport { SceneState } from \"../scene/types\";\n\nimport { handlerRectangles } from \"./handlerRectangles\";\n\nexport function resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  sceneState: SceneState\n): string | false {\n  if (element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, sceneState);\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key];\n\n    return (\n      x + sceneState.scrollX >= handler[0] &&\n      x + sceneState.scrollX <= handler[0] + handler[2] &&\n      y + sceneState.scrollY >= handler[1] &&\n      y + sceneState.scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n}\n","import { ExcalidrawElement, ExcalidrawTextElement } from \"./types\";\n\nexport function isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport function getScrollBars(\n  elements: ExcalidrawElement[],\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nexport function isOverScrollBars(\n  elements: ExcalidrawElement[],\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(\n    elements,\n    canvasWidth,\n    canvasHeight,\n    scrollX,\n    scrollY\n  );\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\n\nexport function setSelection(\n  elements: ExcalidrawElement[],\n  selection: ExcalidrawElement\n) {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2\n  ] = getElementAbsoluteCoords(selection);\n  elements.forEach(element => {\n    const [\n      elementX1,\n      elementY1,\n      elementX2,\n      elementY2\n    ] = getElementAbsoluteCoords(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nexport function clearSelection(elements: ExcalidrawElement[]) {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nexport function deleteSelectedElements(elements: ExcalidrawElement[]) {\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nexport function getSelectedIndices(elements: ExcalidrawElement[]) {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nexport const someElementIsSelected = (elements: ExcalidrawElement[]) =>\n  elements.some(element => element.isSelected);\n\nexport function getSelectedAttribute<T>(\n  elements: ExcalidrawElement[],\n  getAttribute: (element: ExcalidrawElement) => T\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => getAttribute(element))\n    )\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import rough from \"roughjs/bin/wrappers/rough\";\n\nimport { withCustomMathRandom } from \"../random\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { isTextElement } from \"../element/typeChecks\";\nimport { getDiamondPoints, getArrowPoints } from \"../element/bounds\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { SceneState } from \"../scene/types\";\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nexport function renderElement(\n  element: ExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  { scrollX, scrollY }: SceneState\n) {\n  if (element.type === \"selection\") {\n    const fillStyle = context.fillStyle;\n    context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n    context.fillRect(\n      element.x + scrollX,\n      element.y + scrollY,\n      element.width,\n      element.height\n    );\n    context.fillStyle = fillStyle;\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor,\n        fillStyle: element.fillStyle,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness\n      });\n    });\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"diamond\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      const [\n        topX,\n        topY,\n        rightX,\n        rightY,\n        bottomX,\n        bottomY,\n        leftX,\n        leftY\n      ] = getDiamondPoints(element);\n      return generator.polygon(\n        [\n          [topX, topY],\n          [rightX, rightY],\n          [bottomX, bottomY],\n          [leftX, leftY]\n        ],\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      );\n    });\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      )\n    );\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    rc.draw(shape);\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const options = {\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      roughness: element.roughness\n    };\n\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, options),\n      // -----\n      generator.line(x1, y1, x2, y2, options),\n      //    /\n      generator.line(x4, y4, x2, y2, options)\n    ]);\n\n    context.globalAlpha = element.opacity / 100;\n    context.translate(element.x + scrollX, element.y + scrollY);\n    shapes.forEach(shape => rc.draw(shape));\n    context.translate(-element.x - scrollX, -element.y - scrollY);\n    context.globalAlpha = 1;\n    return;\n  } else if (isTextElement(element)) {\n    context.globalAlpha = element.opacity / 100;\n    const font = context.font;\n    context.font = element.font;\n    const fillStyle = context.fillStyle;\n    context.fillStyle = element.strokeColor;\n    context.fillText(\n      element.text,\n      element.x + scrollX,\n      element.y + element.actualBoundingBoxAscent + scrollY\n    );\n    context.fillStyle = fillStyle;\n    context.font = font;\n    context.globalAlpha = 1;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords, handlerRectangles } from \"../element\";\n\nimport { roundRect } from \"../scene/roundRect\";\nimport { SceneState } from \"../scene/types\";\nimport {\n  getScrollBars,\n  SCROLLBAR_COLOR,\n  SCROLLBAR_WIDTH\n} from \"../scene/scrollbars\";\n\nimport { renderElement } from \"./renderElement\";\n\nexport function renderScene(\n  elements: ExcalidrawElement[],\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    renderElement(element, rc, context, sceneState);\n  });\n\n  if (renderSelection) {\n    const selectedElements = elements.filter(el => el.isSelected);\n\n    selectedElements.forEach(element => {\n      const margin = 4;\n\n      const [\n        elementX1,\n        elementY1,\n        elementX2,\n        elementY2\n      ] = getElementAbsoluteCoords(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n    });\n\n    if (selectedElements.length === 1 && selectedElements[0].type !== \"text\") {\n      const handlers = handlerRectangles(selectedElements[0], sceneState);\n      Object.values(handlers).forEach(handler => {\n        context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n      });\n    }\n  }\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      elements,\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n","import rough from \"roughjs/bin/wrappers/rough\";\n\nimport { ExcalidrawElement } from \"../element/types\";\n\nimport { getElementAbsoluteCoords } from \"../element\";\n\nimport { renderScene } from \"../renderer\";\nimport { AppState } from \"../types\";\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\nexport function saveAsJSON(elements: ExcalidrawElement[], name: string) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nexport function loadFromJSON(elements: ExcalidrawElement[]) {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        const data = JSON.parse(reader.result as string);\n        restore(elements, data.elements, null);\n        resolve();\n      }\n    };\n  });\n}\n\nexport function exportAsPNG(\n  elements: ExcalidrawElement[],\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    scrollX: number;\n    scrollY: number;\n    name: string;\n  }\n) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    subCanvasX1 = Math.min(subCanvasX1, x1);\n    subCanvasY1 = Math.min(subCanvasY1, y1);\n    subCanvasX2 = Math.max(subCanvasX2, x2);\n    subCanvasY2 = Math.max(subCanvasY2, y2);\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    elements,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction restore(\n  elements: ExcalidrawElement[],\n  savedElements: string | ExcalidrawElement[] | null,\n  savedState: string | null\n) {\n  try {\n    if (savedElements) {\n      elements.splice(\n        0,\n        elements.length,\n        ...(typeof savedElements === \"string\"\n          ? JSON.parse(savedElements)\n          : savedElements)\n      );\n      elements.forEach((element: ExcalidrawElement) => {\n        element.fillStyle = element.fillStyle || \"hachure\";\n        element.strokeWidth = element.strokeWidth || 1;\n        element.roughness = element.roughness || 1;\n        element.opacity =\n          element.opacity === null || element.opacity === undefined\n            ? 100\n            : element.opacity;\n      });\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements.splice(0, elements.length);\n    return null;\n  }\n}\n\nexport function restoreFromLocalStorage(elements: ExcalidrawElement[]) {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  return restore(elements, savedElements, savedState);\n}\n\nexport function saveToLocalStorage(\n  elements: ExcalidrawElement[],\n  state: AppState\n) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n","import { ExcalidrawElement } from \"../element/types\";\nimport { hitTest } from \"../element/collision\";\n\nexport const hasBackground = (elements: ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\")\n  );\n\nexport const hasStroke = (elements: ExcalidrawElement[]) =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\" ||\n        element.type === \"arrow\")\n  );\n\nexport function getElementAtPosition(\n  elements: ExcalidrawElement[],\n  x: number,\n  y: number\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], x, y)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n","export function getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\nexport function capitalizeString(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n","import React from \"react\";\n\nexport function ButtonSelect<T>({\n  options,\n  value,\n  onChange\n}: {\n  options: { value: T; text: string }[];\n  value: T | null;\n  onChange: (value: T) => void;\n}) {\n  return (\n    <div className=\"buttonList\">\n      {options.map(option => (\n        <button\n          key={option.text}\n          onClick={() => onChange(option.value)}\n          className={value === option.value ? \"active\" : \"\"}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nexport const SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nexport const shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nexport function findShapeByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n","import { ExcalidrawElement } from \"./element/types\";\n\nclass SceneHistory {\n  private recording: boolean = true;\n  private stateHistory: string[] = [];\n  private redoStack: string[] = [];\n\n  generateCurrentEntry(elements: ExcalidrawElement[]) {\n    return JSON.stringify(\n      elements.map(element => ({ ...element, isSelected: false }))\n    );\n  }\n\n  pushEntry(newEntry: string) {\n    if (\n      this.stateHistory.length > 0 &&\n      this.stateHistory[this.stateHistory.length - 1] === newEntry\n    ) {\n      // If the last entry is the same as this one, ignore it\n      return;\n    }\n    this.stateHistory.push(newEntry);\n  }\n\n  restoreEntry(elements: ExcalidrawElement[], entry: string) {\n    const newElements = JSON.parse(entry);\n    elements.splice(0, elements.length);\n    newElements.forEach((newElement: ExcalidrawElement) => {\n      elements.push(newElement);\n    });\n    // When restoring, we shouldn't add an history entry otherwise we'll be stuck with it and can't go back\n    this.skipRecording();\n  }\n\n  clearRedoStack() {\n    this.redoStack.splice(0, this.redoStack.length);\n  }\n\n  redoOnce(elements: ExcalidrawElement[]) {\n    const currentEntry = this.generateCurrentEntry(elements);\n    const entryToRestore = this.redoStack.pop();\n    if (entryToRestore !== undefined) {\n      this.restoreEntry(elements, entryToRestore);\n      this.stateHistory.push(currentEntry);\n    }\n  }\n\n  undoOnce(elements: ExcalidrawElement[]) {\n    const currentEntry = this.generateCurrentEntry(elements);\n    let entryToRestore = this.stateHistory.pop();\n\n    // If nothing was changed since last, take the previous one\n    if (currentEntry === entryToRestore) {\n      entryToRestore = this.stateHistory.pop();\n    }\n    if (entryToRestore !== undefined) {\n      this.restoreEntry(elements, entryToRestore);\n      this.redoStack.push(currentEntry);\n    }\n  }\n\n  isRecording() {\n    return this.recording;\n  }\n\n  skipRecording() {\n    this.recording = false;\n  }\n\n  resumeRecording() {\n    this.recording = true;\n  }\n}\n\nexport const createHistory: () => { history: SceneHistory } = () => {\n  const history = new SceneHistory();\n  return { history };\n};\n","import React from \"react\";\n\ntype Props = {\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n  onCloseRequest?(): void;\n};\n\nexport function Popover({ children, left, onCloseRequest, top }: Props) {\n  return (\n    <div className=\"popover\" style={{ top: top, left: left }}>\n      <div\n        className=\"cover\"\n        onClick={onCloseRequest}\n        onContextMenu={e => {\n          e.preventDefault();\n          if (onCloseRequest) onCloseRequest();\n        }}\n      />\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Popover } from \"./Popover\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\n\nimport \"./ContextMenu.css\";\n\ntype ContextMenuOption = {\n  label: string;\n  action(): void;\n};\n\ntype Props = {\n  options: ContextMenuOption[];\n  onCloseRequest?(): void;\n  top: number;\n  left: number;\n};\n\nfunction ContextMenu({ options, onCloseRequest, top, left }: Props) {\n  return (\n    <Popover onCloseRequest={onCloseRequest} top={top} left={left}>\n      <ul className=\"context-menu\" onContextMenu={e => e.preventDefault()}>\n        {options.map((option, idx) => (\n          <li\n            key={idx}\n            className=\"context-menu__option\"\n            onClick={onCloseRequest}\n          >\n            <ContextMenuOption {...option} />\n          </li>\n        ))}\n      </ul>\n    </Popover>\n  );\n}\n\nfunction ContextMenuOption({ label, action }: ContextMenuOption) {\n  return (\n    <button className=\"context-menu-option\" onClick={action}>\n      {label}\n    </button>\n  );\n}\n\nlet contextMenuNode: HTMLDivElement;\nfunction getContextMenuNode(): HTMLDivElement {\n  if (contextMenuNode) {\n    return contextMenuNode;\n  }\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  return (contextMenuNode = div);\n}\n\ntype ContextMenuParams = {\n  options: (ContextMenuOption | false | null | undefined)[];\n  top: number;\n  left: number;\n};\n\nfunction handleClose() {\n  unmountComponentAtNode(getContextMenuNode());\n}\n\nexport default {\n  push(params: ContextMenuParams) {\n    const options = Array.of<ContextMenuOption>();\n    params.options.forEach(option => {\n      if (option) {\n        options.push(option);\n      }\n    });\n    if (options.length) {\n      render(\n        <ContextMenu\n          top={params.top}\n          left={params.left}\n          options={options}\n          onCloseRequest={handleClose}\n        />,\n        getContextMenuNode()\n      );\n    }\n  }\n};\n","import React from \"react\";\n\nimport { SHAPES } from \"../../shapes\";\nimport { capitalizeString } from \"../../utils\";\n\ninterface PanelToolsProps {\n  activeTool: string;\n  onToolChange: (value: string) => void;\n}\n\nexport const PanelTools: React.FC<PanelToolsProps> = ({\n  activeTool,\n  onToolChange\n}) => {\n  return (\n    <>\n      <h4>Shapes</h4>\n      <div className=\"panelTools\">\n        {SHAPES.map(({ value, icon }) => (\n          <label\n            key={value}\n            className=\"tool\"\n            title={`${capitalizeString(value)} - ${capitalizeString(value)[0]}`}\n          >\n            <input\n              type=\"radio\"\n              checked={activeTool === value}\n              onChange={() => {\n                onToolChange(value);\n              }}\n            />\n            <div className=\"toolIcon\">{icon}</div>\n          </label>\n        ))}\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\n\ninterface PanelSelectionProps {\n  onBringForward: React.MouseEventHandler;\n  onBringToFront: React.MouseEventHandler;\n  onSendBackward: React.MouseEventHandler;\n  onSendToBack: React.MouseEventHandler;\n}\n\nexport const PanelSelection: React.FC<PanelSelectionProps> = ({\n  onBringForward,\n  onBringToFront,\n  onSendBackward,\n  onSendToBack\n}) => {\n  return (\n    <>\n      <h4>Selection</h4>\n      <div className=\"buttonList\">\n        <button type=\"button\" onClick={onBringForward}>\n          Bring forward\n        </button>\n        <button type=\"button\" onClick={onBringToFront}>\n          Bring to front\n        </button>\n        <button type=\"button\" onClick={onSendBackward}>\n          Send backward\n        </button>\n        <button type=\"button\" onClick={onSendToBack}>\n          Send to back\n        </button>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { TwitterPicker } from \"react-color\";\nimport { Popover } from \"./Popover\";\n\nexport function ColorPicker({\n  color,\n  onChange\n}: {\n  color: string | null;\n  onChange: (color: string) => void;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  return (\n    <div>\n      <button\n        className=\"swatch\"\n        style={color ? { backgroundColor: color } : undefined}\n        onClick={() => setActive(!isActive)}\n      />\n      {isActive ? (\n        <Popover onCloseRequest={() => setActive(false)}>\n          <TwitterPicker\n            colors={[\n              \"#000000\",\n              \"#ABB8C3\",\n              \"#FFFFFF\",\n              \"#FF6900\",\n              \"#FCB900\",\n              \"#00D084\",\n              \"#8ED1FC\",\n              \"#0693E3\",\n              \"#EB144C\",\n              \"#F78DA7\",\n              \"#9900EF\"\n            ]}\n            width=\"205px\"\n            color={color || undefined}\n            onChange={changedColor => {\n              onChange(changedColor.hex);\n            }}\n          />\n        </Popover>\n      ) : null}\n      <input\n        type=\"text\"\n        className=\"swatch-input\"\n        value={color || \"\"}\n        onPaste={e => onChange(e.clipboardData.getData(\"text\"))}\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ColorPicker } from \"../ColorPicker\";\n\ninterface PanelColorProps {\n  title: string;\n  colorValue: string | null;\n  onColorChange: (value: string) => void;\n}\n\nexport const PanelColor: React.FC<PanelColorProps> = ({\n  title,\n  onColorChange,\n  colorValue\n}) => {\n  return (\n    <>\n      <h5>{title}</h5>\n      <ColorPicker\n        color={colorValue}\n        onChange={color => onColorChange(color)}\n      />\n    </>\n  );\n};\n","import React, { Fragment, Component } from \"react\";\n\ntype InputState = {\n  value: string;\n  edit: boolean;\n};\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport class EditableText extends Component<Props, InputState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      edit: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props: Props) {\n    this.setState({ value: props.value });\n  }\n\n  private handleEdit(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  private handleBlur() {\n    const { value } = this.state;\n\n    if (!value) {\n      this.setState({ value: this.props.value, edit: false });\n      return;\n    }\n    this.props.onChange(value);\n    this.setState({ edit: false });\n  }\n\n  public render() {\n    const { value, edit } = this.state;\n\n    return (\n      <Fragment>\n        {edit ? (\n          <input\n            className=\"project-name-input\"\n            name=\"name\"\n            maxLength={25}\n            value={value}\n            onChange={e => this.handleEdit(e)}\n            onBlur={() => this.handleBlur()}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                this.handleBlur();\n              }\n            }}\n            autoFocus\n          />\n        ) : (\n          <span\n            onClick={() => this.setState({ edit: true })}\n            className=\"project-name\"\n          >\n            {value}\n          </span>\n        )}\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { EditableText } from \"../EditableText\";\n\ninterface PanelExportProps {\n  projectName: string;\n  onProjectNameChange: (name: string) => void;\n  onExportAsPNG: React.MouseEventHandler;\n  exportBackground: boolean;\n  onExportBackgroundChange: (val: boolean) => void;\n  onSaveScene: React.MouseEventHandler;\n  onLoadScene: React.MouseEventHandler;\n}\n\nexport const PanelExport: React.FC<PanelExportProps> = ({\n  projectName,\n  exportBackground,\n  onProjectNameChange,\n  onExportBackgroundChange,\n  onSaveScene,\n  onLoadScene,\n  onExportAsPNG\n}) => {\n  return (\n    <>\n      <h4>Export</h4>\n      <div className=\"panelColumn\">\n        <h5>Name</h5>\n        {projectName && (\n          <EditableText\n            value={projectName}\n            onChange={(name: string) => onProjectNameChange(name)}\n          />\n        )}\n        <h5>Image</h5>\n        <button onClick={onExportAsPNG}>Export to png</button>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={exportBackground}\n            onChange={e => {\n              onExportBackgroundChange(e.target.checked);\n            }}\n          />\n          background\n        </label>\n        <h5>Scene</h5>\n        <button onClick={onSaveScene}>Save as...</button>\n        <button onClick={onLoadScene}>Load file...</button>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { ColorPicker } from \"../ColorPicker\";\n\ninterface PanelCanvasProps {\n  viewBackgroundColor: string;\n  onViewBackgroundColorChange: (val: string) => void;\n  onClearCanvas: React.MouseEventHandler;\n}\n\nexport const PanelCanvas: React.FC<PanelCanvasProps> = ({\n  viewBackgroundColor,\n  onViewBackgroundColorChange,\n  onClearCanvas\n}) => {\n  return (\n    <>\n      <h4>Canvas</h4>\n      <div className=\"panelColumn\">\n        <h5>Canvas Background Color</h5>\n        <ColorPicker\n          color={viewBackgroundColor}\n          onChange={color => onViewBackgroundColorChange(color)}\n        />\n        <button\n          type=\"button\"\n          onClick={onClearCanvas}\n          title=\"Clear the canvas & reset background color\"\n        >\n          Clear canvas\n        </button>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\n\nimport { moveOneLeft, moveAllLeft, moveOneRight, moveAllRight } from \"./zindex\";\nimport { randomSeed } from \"./random\";\nimport { newElement, resizeTest, isTextElement } from \"./element\";\nimport {\n  clearSelection,\n  getSelectedIndices,\n  deleteSelectedElements,\n  setSelection,\n  isOverScrollBars,\n  someElementIsSelected,\n  getSelectedAttribute,\n  loadFromJSON,\n  saveAsJSON,\n  exportAsPNG,\n  restoreFromLocalStorage,\n  saveToLocalStorage,\n  hasBackground,\n  hasStroke,\n  getElementAtPosition,\n  createScene\n} from \"./scene\";\n\nimport { renderScene } from \"./renderer\";\nimport { AppState } from \"./types\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"./element/types\";\n\nimport { getDateTime, isInputLike } from \"./utils\";\n\nimport { ButtonSelect } from \"./components/ButtonSelect\";\nimport { findShapeByKey, shapesShortcutKeys } from \"./shapes\";\nimport { createHistory } from \"./history\";\n\nimport \"./styles.scss\";\nimport ContextMenu from \"./components/ContextMenu\";\nimport { PanelTools } from \"./components/panels/PanelTools\";\nimport { PanelSelection } from \"./components/panels/PanelSelection\";\nimport { PanelColor } from \"./components/panels/PanelColor\";\nimport { PanelExport } from \"./components/panels/PanelExport\";\nimport { PanelCanvas } from \"./components/panels/PanelCanvas\";\n\nconst { elements } = createScene();\nconst { history } = createHistory();\n\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nconst KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nconst META_KEY = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform)\n  ? \"metaKey\"\n  : \"ctrlKey\";\n\nlet copiedStyles: string = \"{}\";\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction addTextElement(element: ExcalidrawTextElement) {\n  resetCursor();\n  const text = prompt(\"What text do you want?\");\n  if (text === null || text === \"\") {\n    return false;\n  }\n  const fontSize = 20;\n  element.text = text;\n  element.font = `${fontSize}px Virgil`;\n  const font = context.font;\n  context.font = element.font;\n  const textMeasure = context.measureText(element.text);\n  const width = textMeasure.width;\n  const actualBoundingBoxAscent =\n    textMeasure.actualBoundingBoxAscent || fontSize;\n  const actualBoundingBoxDescent = textMeasure.actualBoundingBoxDescent || 0;\n  element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n  context.font = font;\n  const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n  // Center the text\n  element.x -= width / 2;\n  element.y -= actualBoundingBoxAscent;\n  element.width = width;\n  element.height = height;\n\n  return true;\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const savedState = restoreFromLocalStorage(elements);\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (isInputLike(event.target)) return;\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection(elements);\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      this.deleteSelectedElements();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n\n      // Send backward: Cmd-Shift-Alt-B\n    } else if (\n      event[META_KEY] &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyB\"\n    ) {\n      this.moveOneLeft();\n      event.preventDefault();\n\n      // Send to back: Cmd-Shift-B\n    } else if (event[META_KEY] && event.shiftKey && event.code === \"KeyB\") {\n      this.moveAllLeft();\n      event.preventDefault();\n\n      // Bring forward: Cmd-Shift-Alt-F\n    } else if (\n      event[META_KEY] &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyF\"\n    ) {\n      this.moveOneRight();\n      event.preventDefault();\n\n      // Bring to front: Cmd-Shift-F\n    } else if (event[META_KEY] && event.shiftKey && event.code === \"KeyF\") {\n      this.moveAllRight();\n      event.preventDefault();\n      // Select all: Cmd-A\n    } else if (event[META_KEY] && event.code === \"KeyA\") {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findShapeByKey(event.key) });\n    } else if (event[META_KEY] && event.code === \"KeyZ\") {\n      if (event.shiftKey) {\n        // Redo action\n        history.redoOnce(elements);\n      } else {\n        // undo action\n        history.undoOnce(elements);\n      }\n      this.forceUpdate();\n      event.preventDefault();\n      // Copy Styles: Cmd-Shift-C\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyC\") {\n      this.copyStyles();\n      // Paste Styles: Cmd-Shift-V\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyV\") {\n      this.pasteStyles();\n      event.preventDefault();\n    }\n  };\n\n  private deleteSelectedElements = () => {\n    deleteSelectedElements(elements);\n    this.forceUpdate();\n  };\n\n  private clearCanvas = () => {\n    if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n      elements.splice(0, elements.length);\n      this.setState({\n        viewBackgroundColor: \"#ffffff\",\n        scrollX: 0,\n        scrollY: 0\n      });\n      this.forceUpdate();\n    }\n  };\n\n  private copyStyles = () => {\n    const element = elements.find(el => el.isSelected);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n  };\n\n  private pasteStyles = () => {\n    const pastedElement = JSON.parse(copiedStyles);\n    elements.forEach(element => {\n      if (element.isSelected) {\n        element.backgroundColor = pastedElement?.backgroundColor;\n        element.strokeWidth = pastedElement?.strokeWidth;\n        element.strokeColor = pastedElement?.strokeColor;\n        element.fillStyle = pastedElement?.fillStyle;\n        element.opacity = pastedElement?.opacity;\n        element.roughness = pastedElement?.roughness;\n      }\n    });\n    this.forceUpdate();\n  };\n\n  private moveAllLeft = () => {\n    moveAllLeft(elements, getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveOneLeft = () => {\n    moveOneLeft(elements, getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveAllRight = () => {\n    moveAllRight(elements, getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private moveOneRight = () => {\n    moveOneRight(elements, getSelectedIndices(elements));\n    this.forceUpdate();\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private updateProjectName(name: string): void {\n    this.setState({ name });\n  }\n\n  private changeProperty = (callback: (element: ExcalidrawElement) => void) => {\n    elements.forEach(element => {\n      if (element.isSelected) {\n        callback(element);\n      }\n    });\n\n    this.forceUpdate();\n  };\n\n  private changeOpacity = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.changeProperty(element => (element.opacity = +event.target.value));\n  };\n\n  private changeStrokeColor = (color: string) => {\n    this.changeProperty(element => (element.strokeColor = color));\n    this.setState({ currentItemStrokeColor: color });\n  };\n\n  private changeBackgroundColor = (color: string) => {\n    this.changeProperty(element => (element.backgroundColor = color));\n    this.setState({ currentItemBackgroundColor: color });\n  };\n\n  private copyToClipboard = () => {\n    if (navigator.clipboard) {\n      const text = JSON.stringify(\n        elements.filter(element => element.isSelected)\n      );\n      navigator.clipboard.writeText(text);\n    }\n  };\n\n  private pasteFromClipboard = (x?: number, y?: number) => {\n    if (navigator.clipboard) {\n      navigator.clipboard\n        .readText()\n        .then(text => this.addElementsFromPaste(text, x, y));\n    }\n  };\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements(elements);\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          this.addElementsFromPaste(paste);\n          e.preventDefault();\n        }}\n      >\n        <div className=\"sidePanel\">\n          <PanelTools\n            activeTool={this.state.elementType}\n            onToolChange={value => {\n              this.setState({ elementType: value });\n              clearSelection(elements);\n              document.documentElement.style.cursor =\n                value === \"text\" ? \"text\" : \"crosshair\";\n              this.forceUpdate();\n            }}\n          />\n          {someElementIsSelected(elements) && (\n            <div className=\"panelColumn\">\n              <PanelSelection\n                onBringForward={this.moveOneRight}\n                onBringToFront={this.moveAllRight}\n                onSendBackward={this.moveOneLeft}\n                onSendToBack={this.moveAllLeft}\n              />\n\n              <PanelColor\n                title=\"Stroke Color\"\n                onColorChange={this.changeStrokeColor}\n                colorValue={getSelectedAttribute(\n                  elements,\n                  element => element.strokeColor\n                )}\n              />\n\n              {hasBackground(elements) && (\n                <>\n                  <PanelColor\n                    title=\"Background Color\"\n                    onColorChange={this.changeBackgroundColor}\n                    colorValue={getSelectedAttribute(\n                      elements,\n                      element => element.backgroundColor\n                    )}\n                  />\n\n                  <h5>Fill</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: \"solid\", text: \"Solid\" },\n                      { value: \"hachure\", text: \"Hachure\" },\n                      { value: \"cross-hatch\", text: \"Cross-hatch\" }\n                    ]}\n                    value={getSelectedAttribute(\n                      elements,\n                      element => element.fillStyle\n                    )}\n                    onChange={value => {\n                      this.changeProperty(element => {\n                        element.fillStyle = value;\n                      });\n                    }}\n                  />\n                </>\n              )}\n\n              {hasStroke(elements) && (\n                <>\n                  <h5>Stroke Width</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: 1, text: \"Thin\" },\n                      { value: 2, text: \"Bold\" },\n                      { value: 4, text: \"Extra Bold\" }\n                    ]}\n                    value={getSelectedAttribute(\n                      elements,\n                      element => element.strokeWidth\n                    )}\n                    onChange={value => {\n                      this.changeProperty(element => {\n                        element.strokeWidth = value;\n                      });\n                    }}\n                  />\n\n                  <h5>Sloppiness</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: 0, text: \"Draftsman\" },\n                      { value: 1, text: \"Artist\" },\n                      { value: 3, text: \"Cartoonist\" }\n                    ]}\n                    value={getSelectedAttribute(\n                      elements,\n                      element => element.roughness\n                    )}\n                    onChange={value =>\n                      this.changeProperty(element => {\n                        element.roughness = value;\n                      })\n                    }\n                  />\n                </>\n              )}\n\n              <h5>Opacity</h5>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                onChange={this.changeOpacity}\n                value={\n                  getSelectedAttribute(elements, element => element.opacity) ||\n                  0 /* Put the opacity at 0 if there are two conflicting ones */\n                }\n              />\n\n              <button onClick={this.deleteSelectedElements}>\n                Delete selected\n              </button>\n            </div>\n          )}\n          <PanelCanvas\n            onClearCanvas={this.clearCanvas}\n            onViewBackgroundColorChange={val =>\n              this.setState({ viewBackgroundColor: val })\n            }\n            viewBackgroundColor={this.state.viewBackgroundColor}\n          />\n          <PanelExport\n            projectName={this.state.name}\n            onProjectNameChange={this.updateProjectName}\n            onExportAsPNG={() => exportAsPNG(elements, canvas, this.state)}\n            exportBackground={this.state.exportBackground}\n            onExportBackgroundChange={val =>\n              this.setState({ exportBackground: val })\n            }\n            onSaveScene={() => saveAsJSON(elements, this.state.name)}\n            onLoadScene={() =>\n              loadFromJSON(elements).then(() => this.forceUpdate())\n            }\n          />\n        </div>\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onContextMenu={e => {\n            e.preventDefault();\n\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n\n            const element = getElementAtPosition(elements, x, y);\n            if (!element) {\n              ContextMenu.push({\n                options: [\n                  navigator.clipboard && {\n                    label: \"Paste\",\n                    action: () => this.pasteFromClipboard(x, y)\n                  }\n                ],\n                top: e.clientY,\n                left: e.clientX\n              });\n              return;\n            }\n\n            if (!element.isSelected) {\n              clearSelection(elements);\n              element.isSelected = true;\n              this.forceUpdate();\n            }\n\n            ContextMenu.push({\n              options: [\n                navigator.clipboard && {\n                  label: \"Copy\",\n                  action: this.copyToClipboard\n                },\n                navigator.clipboard && {\n                  label: \"Paste\",\n                  action: () => this.pasteFromClipboard(x, y)\n                },\n                { label: \"Copy Styles\", action: this.copyStyles },\n                { label: \"Paste Styles\", action: this.pasteStyles },\n                { label: \"Delete\", action: this.deleteSelectedElements },\n                { label: \"Move Forward\", action: this.moveOneRight },\n                { label: \"Send to Front\", action: this.moveAllRight },\n                { label: \"Move Backwards\", action: this.moveOneLeft },\n                { label: \"Send to Back\", action: this.moveAllLeft }\n              ],\n              top: e.clientY,\n              left: e.clientX\n            });\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              elements,\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n            let resizeHandle: string | false = false;\n            let isDraggingElements = false;\n            let isResizingElements = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = elements.find(element => {\n                return resizeTest(element, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              });\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeTest(resizeElement, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                const hitElement = getElementAtPosition(elements, x, y);\n\n                // If we click on something\n                if (hitElement) {\n                  if (hitElement.isSelected) {\n                    // If that element is not already selected, do nothing,\n                    // we're likely going to drag it\n                  } else {\n                    // We unselect every other elements unless shift is pressed\n                    if (!e.shiftKey) {\n                      clearSelection(elements);\n                    }\n                    // No matter what, we select it\n                    hitElement.isSelected = true;\n                  }\n                } else {\n                  // If we don't click on anything, let's remove all the selected elements\n                  clearSelection(elements);\n                }\n\n                isDraggingElements = someElementIsSelected(elements);\n\n                if (isDraggingElements) {\n                  document.documentElement.style.cursor = \"move\";\n                }\n              }\n            }\n\n            if (isTextElement(element)) {\n              if (!addTextElement(element)) {\n                return;\n              }\n            }\n\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          element.height += element.y - lastY;\n                          element.y = lastY;\n                        }\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        if (e.shiftKey) {\n                          element.y += element.height - element.width;\n                          element.height = element.width;\n                        } else {\n                          element.height += element.y - lastY;\n                          element.y = lastY;\n                        }\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height = lastY - element.y;\n                        }\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  history.skipRecording();\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey\n                ? Math.abs(width) * Math.sign(height)\n                : height;\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(elements, draggingElement);\n              }\n              // We don't want to save history when moving an element\n              history.skipRecording();\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection(elements);\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            history.skipRecording();\n            this.forceUpdate();\n          }}\n          onDoubleClick={e => {\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n\n            if (getElementAtPosition(elements, x, y)) {\n              return;\n            }\n\n            const element = newElement(\n              \"text\",\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n\n            if (!addTextElement(element as ExcalidrawTextElement)) {\n              return;\n            }\n\n            elements.push(element);\n\n            this.setState({\n              draggingElement: null,\n              elementType: \"selection\"\n            });\n            element.isSelected = true;\n\n            this.forceUpdate();\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  private addElementsFromPaste = (paste: string, x?: number, y?: number) => {\n    let parsedElements;\n    try {\n      parsedElements = JSON.parse(paste);\n    } catch (e) {}\n    if (\n      Array.isArray(parsedElements) &&\n      parsedElements.length > 0 &&\n      parsedElements[0].type // need to implement a better check here...\n    ) {\n      clearSelection(elements);\n\n      let dx: number;\n      let dy: number;\n      if (x) {\n        let minX = Math.min(...parsedElements.map(element => element.x));\n        dx = x - minX;\n      }\n      if (y) {\n        let minY = Math.min(...parsedElements.map(element => element.y));\n        dy = y - minY;\n      }\n\n      parsedElements.forEach(parsedElement => {\n        parsedElement.x = dx ? parsedElement.x + dx : 10 - this.state.scrollX;\n        parsedElement.y = dy ? parsedElement.y + dy : 10 - this.state.scrollY;\n        parsedElement.seed = randomSeed();\n        elements.push(parsedElement);\n      });\n      this.forceUpdate();\n    }\n  };\n\n  componentDidUpdate() {\n    renderScene(elements, rc, canvas, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    saveToLocalStorage(elements, this.state);\n    if (history.isRecording()) {\n      history.pushEntry(history.generateCurrentEntry(elements));\n      history.clearRedoStack();\n    }\n    history.resumeRecording();\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\nReactDOM.render(<App />, rootElement);\n","import { ExcalidrawElement } from \"../element/types\";\n\nexport const createScene = () => {\n  const elements = Array.of<ExcalidrawElement>();\n  return { elements };\n};\n"],"sourceRoot":""}