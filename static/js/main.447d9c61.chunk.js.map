{"version":3,"sources":["index.tsx"],"names":["elements","Array","of","withCustomMathRandom","seed","cb","random","Math","imul","LCG","result","distanceBetweenPointAndSegment","x","y","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","sqrt","renderScene","rc","context","sceneState","fillStyle","viewBackgroundColor","fillRect","canvas","width","height","clearRect","forEach","element","draw","isSelected","elementX1","getElementAbsoluteX1","elementX2","getElementAbsoluteX2","elementY1","getElementAbsoluteY1","elementY2","getElementAbsoluteY2","lineDash","getLineDash","setLineDash","strokeRect","scrollX","scrollY","margin","minX","Infinity","maxX","minY","maxY","min","max","scrollBars","canvasWidth","canvasHeight","scrollBarWidth","abs","horizontalScrollBar","SCROLLBAR_MARGIN","scrollBarHeight","horizontal","vertical","SCROLLBAR_WIDTH","getScrollbars","exportAsPNG","exportBackground","exportVisibleOnly","exportPadding","length","window","alert","clearSelection","ReactDOM","render","App","rootElement","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","document","createElement","tempCanvasCtx","getContext","style","display","body","appendChild","drawImage","link","setAttribute","toDataURL","click","remove","rotate","angle","cos","sin","generator","rough","isTextElement","type","getArrowPoints","distance","pow","minSize","xs","ys","PI","x3","y3","generateDraw","shape","rectangle","stroke","strokeColor","fill","backgroundColor","translate","ellipse","contex","x4","y4","shapes","line","Error","font","fillText","text","actualBoundingBoxAscent","deleteSelectedElements","i","splice","KEYS","SHAPES","label","value","shapesShortcutKeys","map","toLowerCase","findElementByKey","key","reduce","isArrowKey","keyCode","state","draggingElement","elementType","currentItemStrokeColor","currentItemBackgroundColor","onKeyDown","event","target","nodeName","forceUpdate","preventDefault","step","shiftKey","metaKey","includes","setState","addEventListener","this","savedState","savedElements","localStorage","getItem","JSON","parse","e","restore","removeEventListener","onCut","clipboardData","setData","stringify","filter","onCopy","onPaste","parsedElements","paste","getData","isArray","parsedElement","push","checked","onChange","id","innerWidth","innerHeight","onWheel","deltaX","deltaY","onMouseDown","clientX","offsetLeft","clientY","offsetTop","floor","newElement","isDraggingElements","cursorStyle","documentElement","cursor","hitElement","find","console","warn","hitTest","some","prompt","measureText","actualBoundingBoxDescent","lastX","lastY","onMouseMove","HTMLElement","selectedElements","el","selection","selectionX1","selectionX2","selectionY1","selectionY2","setSelection","onMouseUp","pop","onClick","Number","disabled","setItem","React","Component","getElementById"],"mappings":"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","file":"static/js/main.447d9c61.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport \"./styles.css\";\n\ntype ExcalidrawElement = ReturnType<typeof newElement>;\ntype ExcalidrawTextElement = ExcalidrawElement & {\n  type: \"text\";\n  font: string;\n  text: string;\n  actualBoundingBoxAscent: number;\n};\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nvar elements = Array.of<ExcalidrawElement>();\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nconst LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nfunction withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n\n// https://stackoverflow.com/a/6853926/232122\nfunction distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction hitTest(element: ExcalidrawElement, x: number, y: number): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (\n    element.type === \"rectangle\" ||\n    // There doesn't seem to be a closed form solution for the distance between\n    // a point and an ellipse, let's assume it's a rectangle for now...\n    element.type === \"ellipse\"\n  ) {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\nfunction newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    type: type,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    isSelected: false,\n    strokeColor: strokeColor,\n    backgroundColor: backgroundColor,\n    seed: Math.floor(Math.random() * 2 ** 31),\n    draw(\n      rc: RoughCanvas,\n      context: CanvasRenderingContext2D,\n      sceneState: SceneState\n    ) {}\n  };\n  return element;\n}\n\ntype SceneState = {\n  scrollX: number;\n  scrollY: number;\n  // null indicates transparent bg\n  viewBackgroundColor: string | null;\n};\n\nconst SCROLLBAR_WIDTH = 6;\nconst SCROLLBAR_MARGIN = 4;\nconst SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nfunction getScrollbars(\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  // horizontal scrollbar\n  const sceneWidth = canvasWidth + Math.abs(scrollX);\n  const scrollBarWidth = (canvasWidth * canvasWidth) / sceneWidth;\n  const scrollBarX = scrollX > 0 ? 0 : canvasWidth - scrollBarWidth;\n  const horizontalScrollBar = {\n    x: scrollBarX + SCROLLBAR_MARGIN,\n    y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n    width: scrollBarWidth - SCROLLBAR_MARGIN * 2,\n    height: SCROLLBAR_WIDTH\n  };\n\n  // vertical scrollbar\n  const sceneHeight = canvasHeight + Math.abs(scrollY);\n  const scrollBarHeight = (canvasHeight * canvasHeight) / sceneHeight;\n  const scrollBarY = scrollY > 0 ? 0 : canvasHeight - scrollBarHeight;\n  const verticalScrollBar = {\n    x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n    y: scrollBarY + SCROLLBAR_MARGIN,\n    width: SCROLLBAR_WIDTH,\n    height: scrollBarHeight - SCROLLBAR_WIDTH * 2\n  };\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nfunction renderScene(\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  sceneState: SceneState\n) {\n  if (!context) return;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(-0.5, -0.5, canvas.width, canvas.height);\n  } else {\n    context.clearRect(-0.5, -0.5, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  elements.forEach(element => {\n    element.draw(rc, context, sceneState);\n    if (element.isSelected) {\n      const margin = 4;\n\n      const elementX1 = getElementAbsoluteX1(element);\n      const elementX2 = getElementAbsoluteX2(element);\n      const elementY1 = getElementAbsoluteY1(element);\n      const elementY2 = getElementAbsoluteY2(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n    }\n  });\n\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    minX = Math.min(minX, getElementAbsoluteX1(element));\n    maxX = Math.max(maxX, getElementAbsoluteX2(element));\n    minY = Math.min(minY, getElementAbsoluteY1(element));\n    maxY = Math.max(maxY, getElementAbsoluteY2(element));\n  });\n\n  const scrollBars = getScrollbars(\n    context.canvas.width,\n    context.canvas.height,\n    sceneState.scrollX,\n    sceneState.scrollY\n  );\n\n  context.fillStyle = SCROLLBAR_COLOR;\n  context.fillRect(\n    scrollBars.horizontal.x,\n    scrollBars.horizontal.y,\n    scrollBars.horizontal.width,\n    scrollBars.horizontal.height\n  );\n  context.fillRect(\n    scrollBars.vertical.x,\n    scrollBars.vertical.y,\n    scrollBars.vertical.width,\n    scrollBars.vertical.height\n  );\n  context.fillStyle = fillStyle;\n}\n\nfunction exportAsPNG({\n  exportBackground,\n  exportVisibleOnly,\n  exportPadding = 10,\n  viewBackgroundColor\n}: {\n  exportBackground: boolean;\n  exportVisibleOnly: boolean;\n  exportPadding?: number;\n  viewBackgroundColor: string;\n}) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n\n  // deselect & rerender\n\n  clearSelection();\n  ReactDOM.render(<App />, rootElement, () => {\n    // calculate visible-area coords\n\n    let subCanvasX1 = Infinity;\n    let subCanvasX2 = 0;\n    let subCanvasY1 = Infinity;\n    let subCanvasY2 = 0;\n\n    elements.forEach(element => {\n      subCanvasX1 = Math.min(subCanvasX1, getElementAbsoluteX1(element));\n      subCanvasX2 = Math.max(subCanvasX2, getElementAbsoluteX2(element));\n      subCanvasY1 = Math.min(subCanvasY1, getElementAbsoluteY1(element));\n      subCanvasY2 = Math.max(subCanvasY2, getElementAbsoluteY2(element));\n    });\n\n    // create temporary canvas from which we'll export\n\n    const tempCanvas = document.createElement(\"canvas\");\n    const tempCanvasCtx = tempCanvas.getContext(\"2d\")!;\n    tempCanvas.style.display = \"none\";\n    document.body.appendChild(tempCanvas);\n    tempCanvas.width = exportVisibleOnly\n      ? subCanvasX2 - subCanvasX1 + exportPadding * 2\n      : canvas.width;\n    tempCanvas.height = exportVisibleOnly\n      ? subCanvasY2 - subCanvasY1 + exportPadding * 2\n      : canvas.height;\n\n    // if we're exporting without bg, we need to rerender the scene without it\n    //  (it's reset again, below)\n    if (!exportBackground) {\n      renderScene(rc, context, {\n        viewBackgroundColor: null,\n        scrollX: 0,\n        scrollY: 0\n      });\n    }\n\n    // copy our original canvas onto the temp canvas\n    tempCanvasCtx.drawImage(\n      canvas, // source\n      exportVisibleOnly // sx\n        ? subCanvasX1 - exportPadding\n        : 0,\n      exportVisibleOnly // sy\n        ? subCanvasY1 - exportPadding\n        : 0,\n      exportVisibleOnly // sWidth\n        ? subCanvasX2 - subCanvasX1 + exportPadding * 2\n        : canvas.width,\n      exportVisibleOnly // sHeight\n        ? subCanvasY2 - subCanvasY1 + exportPadding * 2\n        : canvas.height,\n      0, // dx\n      0, // dy\n      exportVisibleOnly ? tempCanvas.width : canvas.width, // dWidth\n      exportVisibleOnly ? tempCanvas.height : canvas.height // dHeight\n    );\n\n    // reset transparent bg back to original\n    if (!exportBackground) {\n      renderScene(rc, context, { viewBackgroundColor, scrollX: 0, scrollY: 0 });\n    }\n\n    // create a temporary <a> elem which we'll use to download the image\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"download\", \"excalidraw.png\");\n    link.setAttribute(\"href\", tempCanvas.toDataURL(\"image/png\"));\n    link.click();\n\n    // clean up the DOM\n    link.remove();\n    if (tempCanvas !== canvas) tempCanvas.remove();\n  });\n}\n\nfunction rotate(x1: number, y1: number, x2: number, y2: number, angle: number) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nvar generator = rough.generator(null, null as any);\n\nfunction isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n\nfunction getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n\nfunction generateDraw(element: ExcalidrawElement) {\n  if (element.type === \"selection\") {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(\n        element.x + scrollX,\n        element.y + scrollY,\n        element.width,\n        element.height\n      );\n      context.fillStyle = fillStyle;\n    };\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor\n      });\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        { stroke: element.strokeColor, fill: element.backgroundColor }\n      )\n    );\n    element.draw = (rc, contex, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, { stroke: element.strokeColor }),\n      // -----\n      generator.line(x1, y1, x2, y2, { stroke: element.strokeColor }),\n      //    /\n      generator.line(x4, y4, x2, y2, { stroke: element.strokeColor })\n    ]);\n\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      shapes.forEach(shape => rc.draw(shape));\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n    return;\n  } else if (isTextElement(element)) {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const font = context.font;\n      context.font = element.font;\n      const fillStyle = context.fillStyle;\n      context.fillStyle = element.strokeColor;\n      context.fillText(\n        element.text,\n        element.x + scrollX,\n        element.y + element.actualBoundingBoxAscent + scrollY\n      );\n      context.fillStyle = fillStyle;\n      context.font = font;\n    };\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nfunction getElementAbsoluteX1(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x : element.x + element.width;\n}\nfunction getElementAbsoluteX2(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x + element.width : element.x;\n}\nfunction getElementAbsoluteY1(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y : element.y + element.height;\n}\nfunction getElementAbsoluteY2(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y + element.height : element.y;\n}\n\nfunction setSelection(selection: ExcalidrawElement) {\n  const selectionX1 = getElementAbsoluteX1(selection);\n  const selectionX2 = getElementAbsoluteX2(selection);\n  const selectionY1 = getElementAbsoluteY1(selection);\n  const selectionY2 = getElementAbsoluteY2(selection);\n  elements.forEach(element => {\n    const elementX1 = getElementAbsoluteX1(element);\n    const elementX2 = getElementAbsoluteX2(element);\n    const elementY1 = getElementAbsoluteY1(element);\n    const elementY2 = getElementAbsoluteY2(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nfunction clearSelection() {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nfunction deleteSelectedElements() {\n  for (var i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nfunction save(state: AppState) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n\nfunction restore() {\n  try {\n    const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n    const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n    if (savedElements) {\n      elements = JSON.parse(savedElements);\n      elements.forEach((element: ExcalidrawElement) => generateDraw(element));\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements = [];\n    return null;\n  }\n}\n\ntype AppState = {\n  draggingElement: ExcalidrawElement | null;\n  elementType: string;\n  exportBackground: boolean;\n  exportVisibleOnly: boolean;\n  exportPadding: number;\n  currentItemStrokeColor: string;\n  currentItemBackgroundColor: string;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n};\n\nconst KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\nconst SHAPES = [\n  {\n    label: \"Rectange\",\n    value: \"rectangle\"\n  },\n  {\n    label: \"Ellipse\",\n    value: \"ellipse\"\n  },\n  {\n    label: \"Arrow\",\n    value: \"arrow\"\n  },\n  {\n    label: \"Text\",\n    value: \"text\"\n  },\n  {\n    label: \"Selection\",\n    value: \"selection\"\n  }\n];\n\nconst shapesShortcutKeys = SHAPES.map(shape => shape.label[0].toLowerCase());\n\nfunction findElementByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n\n    const savedState = restore();\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    elementType: \"selection\",\n    exportBackground: false,\n    exportVisibleOnly: true,\n    exportPadding: 10,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if ((event.target as HTMLElement).nodeName === \"INPUT\") {\n      return;\n    }\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      deleteSelectedElements();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === \"a\" && event.metaKey) {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findElementByKey(event.key) });\n    }\n  };\n\n  public render() {\n    return (\n      <div\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements();\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          let parsedElements;\n          try {\n            parsedElements = JSON.parse(paste);\n          } catch (e) {}\n          if (\n            Array.isArray(parsedElements) &&\n            parsedElements.length > 0 &&\n            parsedElements[0].type // need to implement a better check here...\n          ) {\n            clearSelection();\n            parsedElements.forEach(parsedElement => {\n              parsedElement.x += 10;\n              parsedElement.y += 10;\n              generateDraw(parsedElement);\n              elements.push(parsedElement);\n            });\n            this.forceUpdate();\n          }\n          e.preventDefault();\n        }}\n      >\n        <fieldset>\n          <legend>Shapes</legend>\n          {SHAPES.map(({ value, label }) => (\n            <label>\n              <input\n                type=\"radio\"\n                checked={this.state.elementType === value}\n                onChange={() => {\n                  this.setState({ elementType: value });\n                  clearSelection();\n                  this.forceUpdate();\n                }}\n              />\n              <span>{label}</span>\n            </label>\n          ))}\n        </fieldset>\n\n        <canvas\n          id=\"canvas\"\n          width={window.innerWidth}\n          height={window.innerHeight - 210}\n          onWheel={e => {\n            e.preventDefault();\n            const { deltaX, deltaY } = e;\n            this.setState(state => ({\n              scrollX: state.scrollX - deltaX,\n              scrollY: state.scrollY - deltaY\n            }));\n          }}\n          onMouseDown={e => {\n            const x =\n              e.clientX -\n              (e.target as HTMLElement).offsetLeft -\n              this.state.scrollX;\n            const y =\n              e.clientY -\n              (e.target as HTMLElement).offsetTop -\n              this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor\n            );\n            let isDraggingElements = false;\n            const cursorStyle = document.documentElement.style.cursor;\n            if (this.state.elementType === \"selection\") {\n              const hitElement = elements.find(element => {\n                return hitTest(element, x, y);\n              });\n\n              // If we click on something\n              if (hitElement) {\n                if (hitElement.isSelected) {\n                  // If that element is not already selected, do nothing,\n                  // we're likely going to drag it\n                } else {\n                  // We unselect every other elements unless shift is pressed\n                  if (!e.shiftKey) {\n                    clearSelection();\n                  }\n                  // No matter what, we select it\n                  hitElement.isSelected = true;\n                }\n              } else {\n                // If we don't click on anything, let's remove all the selected elements\n                clearSelection();\n              }\n\n              isDraggingElements = elements.some(element => element.isSelected);\n\n              if (isDraggingElements) {\n                document.documentElement.style.cursor = \"move\";\n              }\n            }\n\n            if (isTextElement(element)) {\n              const text = prompt(\"What text do you want?\");\n              if (text === null) {\n                return;\n              }\n              element.text = text;\n              element.font = \"20px Virgil\";\n              const font = context.font;\n              context.font = element.font;\n              const {\n                actualBoundingBoxAscent,\n                actualBoundingBoxDescent,\n                width\n              } = context.measureText(element.text);\n              element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n              context.font = font;\n              const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n              // Center the text\n              element.x -= width / 2;\n              element.y -= actualBoundingBoxAscent;\n              element.width = width;\n              element.height = height;\n            }\n\n            generateDraw(element);\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x = e.clientX - target.offsetLeft - this.state.scrollX;\n                  const y = e.clientY - target.offsetTop - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                target.offsetLeft -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                target.offsetTop -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey ? width : height;\n\n              generateDraw(draggingElement);\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(draggingElement);\n              }\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              document.documentElement.style.cursor = cursorStyle;\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection();\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            this.forceUpdate();\n          }}\n        />\n        <fieldset>\n          <legend>Colors</legend>\n          <label>\n            <input\n              type=\"color\"\n              value={this.state.viewBackgroundColor}\n              onChange={e => {\n                this.setState({ viewBackgroundColor: e.target.value });\n              }}\n            />\n            Background\n          </label>\n          <label>\n            <input\n              type=\"color\"\n              value={this.state.currentItemStrokeColor}\n              onChange={e => {\n                this.setState({ currentItemStrokeColor: e.target.value });\n              }}\n            />\n            Shape Stroke\n          </label>\n          <label>\n            <input\n              type=\"color\"\n              value={this.state.currentItemBackgroundColor}\n              onChange={e => {\n                this.setState({ currentItemBackgroundColor: e.target.value });\n              }}\n            />\n            Shape Background\n          </label>\n        </fieldset>\n        <fieldset>\n          <legend>Export</legend>\n          <button\n            onClick={() => {\n              exportAsPNG({\n                exportBackground: this.state.exportBackground,\n                exportVisibleOnly: this.state.exportVisibleOnly,\n                exportPadding: this.state.exportPadding,\n                viewBackgroundColor: this.state.viewBackgroundColor\n              });\n            }}\n          >\n            Export to png\n          </button>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={this.state.exportBackground}\n              onChange={e => {\n                this.setState({ exportBackground: e.target.checked });\n              }}\n            />\n            background\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={this.state.exportVisibleOnly}\n              onChange={e => {\n                this.setState({ exportVisibleOnly: e.target.checked });\n              }}\n            />\n            visible area only\n          </label>\n          (padding:\n          <input\n            type=\"number\"\n            value={this.state.exportPadding}\n            onChange={e => {\n              this.setState({ exportPadding: Number(e.target.value) });\n            }}\n            disabled={!this.state.exportVisibleOnly}\n          />\n          px)\n        </fieldset>\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    renderScene(rc, context, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    save(this.state);\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\n// Big hack to ensure that all the 1px lines are drawn at 1px instead of 2px\n// https://stackoverflow.com/questions/13879322/drawing-a-1px-thick-line-in-canvas-creates-a-2px-thick-line/13879402#comment90766599_13879402\ncontext.translate(0.5, 0.5);\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}