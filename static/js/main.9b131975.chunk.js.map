{"version":3,"sources":["zindex.ts","index.tsx"],"names":["swap","elements","indexA","indexB","element","moveOneLeft","indicesToMove","sort","a","b","isSorted","forEach","index","i","moveOneRight","reversedIndicesToMove","length","moveAllLeft","leftMostElements","map","reverse","concat","pos","moveAllRight","rightMostElements","Array","of","skipHistory","stateHistory","generateHistoryCurrentEntry","JSON","stringify","isSelected","restoreHistoryEntry","entry","newElements","parse","splice","newElement","generateDraw","push","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","distanceBetweenPointAndSegment","x","y","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","hitTest","type","px","abs","width","py","height","tx","ty","ex","ey","rx","ry","qx","qy","r","q","min","max","t","getElementAbsoluteX1","getElementAbsoluteX2","getElementAbsoluteY1","getElementAbsoluteY2","getArrowPoints","x3","y3","x4","y4","console","warn","Error","resizeTest","sceneState","handlers","handlerRectangles","filter","Object","keys","key","handler","scrollX","scrollY","getScrollbars","canvasWidth","canvasHeight","scrollBarWidth","horizontalScrollBar","SCROLLBAR_MARGIN","scrollBarHeight","horizontal","vertical","SCROLLBAR_WIDTH","elementX1","elementX2","elementY1","elementY2","marginX","marginY","nw","se","renderScene","rc","canvas","offsetX","offsetY","renderScrollbars","renderSelection","context","getContext","fillStyle","viewBackgroundColor","fillRect","clearRect","selectedIndices","getSelectedIndices","draw","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","window","devicePixelRatio","saveFile","name","data","link","document","createElement","setAttribute","click","remove","rotate","angle","cos","sin","generator","rough","isTextElement","isInputLike","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","distance","minSize","xs","ys","PI","shape","rectangle","stroke","strokeColor","fill","backgroundColor","translate","ellipse","shapes","line","font","fillText","text","actualBoundingBoxAscent","clearSelection","resetCursor","documentElement","style","cursor","deleteSelectedElements","restore","savedElements","savedState","e","KEYS","SHAPES","icon","viewBox","d","value","shapesShortcutKeys","capitalize","str","charAt","toUpperCase","slice","findElementByKey","reduce","isArrowKey","keyCode","someElementIsSelected","some","lastCanvasWidth","lastCanvasHeight","lastMouseUp","App","state","draggingElement","resizingElement","elementType","exportBackground","currentItemStrokeColor","currentItemBackgroundColor","onResize","forceUpdate","onKeyDown","event","preventDefault","step","shiftKey","metaKey","altKey","code","includes","toLowerCase","setState","lastEntry","pop","undefined","clearCanvas","confirm","removeWheelEventListener","handleWheel","deltaX","deltaY","addEventListener","this","localStorage","getItem","removeEventListener","innerWidth","innerHeight","className","onCut","clipboardData","setData","onCopy","onPaste","parsedElements","paste","getData","isArray","parsedElement","title","checked","onChange","onClick","exportPadding","alert","subCanvasX1","Infinity","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","display","body","appendChild","toDataURL","exportAsPNG","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","input","reader","FileReader","accept","onchange","files","readAsText","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","then","id","ref","passive","scale","onMouseDown","button","activeElement","blur","scrollBar","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","clientX","clientY","resizeHandle","isDraggingElements","isResizingElements","resizeElement","find","hitElement","prompt","textMeasure","measureText","actualBoundingBoxDescent","lastX","lastY","onMouseMove","HTMLElement","el","selectedElements","sign","selection","selectionX1","selectionX2","selectionY1","selectionY2","setSelection","onMouseUp","newEntry","setItem","React","Component","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.9b131975.chunk.js","sourcesContent":["function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\n\nimport { moveOneLeft, moveAllLeft, moveOneRight, moveAllRight } from \"./zindex\";\n\nimport \"./styles.scss\";\n\ntype ExcalidrawElement = ReturnType<typeof newElement>;\ntype ExcalidrawTextElement = ExcalidrawElement & {\n  type: \"text\";\n  font: string;\n  text: string;\n  actualBoundingBoxAscent: number;\n};\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nconst elements = Array.of<ExcalidrawElement>();\n\nlet skipHistory = false;\nconst stateHistory: string[] = [];\nfunction generateHistoryCurrentEntry() {\n  return JSON.stringify(\n    elements.map(element => ({ ...element, isSelected: false }))\n  );\n}\nfunction pushHistoryEntry(newEntry: string) {\n  if (\n    stateHistory.length > 0 &&\n    stateHistory[stateHistory.length - 1] === newEntry\n  ) {\n    // If the last entry is the same as this one, ignore it\n    return;\n  }\n  stateHistory.push(newEntry);\n}\nfunction restoreHistoryEntry(entry: string) {\n  const newElements = JSON.parse(entry);\n  elements.splice(0, elements.length);\n  newElements.forEach((newElement: ExcalidrawElement) => {\n    generateDraw(newElement);\n    elements.push(newElement);\n  });\n  // When restoring, we shouldn't add an history entry otherwise we'll be stuck with it and can't go back\n  skipHistory = true;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nconst LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nfunction randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nfunction withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n\n// https://stackoverflow.com/a/6853926/232122\nfunction distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nfunction hitTest(element: ExcalidrawElement, x: number, y: number): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = element.width / 2;\n    const b = element.height / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\nfunction resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  sceneState: SceneState\n): string | false {\n  if (element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, sceneState);\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key];\n\n    return (\n      x + sceneState.scrollX >= handler[0] &&\n      x + sceneState.scrollX <= handler[0] + handler[2] &&\n      y + sceneState.scrollY >= handler[1] &&\n      y + sceneState.scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n}\n\nfunction newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    type: type,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    isSelected: false,\n    strokeColor: strokeColor,\n    backgroundColor: backgroundColor,\n    seed: randomSeed(),\n    draw(\n      rc: RoughCanvas,\n      context: CanvasRenderingContext2D,\n      sceneState: SceneState\n    ) {}\n  };\n  return element;\n}\n\ntype SceneState = {\n  scrollX: number;\n  scrollY: number;\n  // null indicates transparent bg\n  viewBackgroundColor: string | null;\n};\n\nconst SCROLLBAR_WIDTH = 6;\nconst SCROLLBAR_MARGIN = 4;\nconst SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nfunction getScrollbars(\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  // horizontal scrollbar\n  const sceneWidth = canvasWidth + Math.abs(scrollX);\n  const scrollBarWidth = (canvasWidth * canvasWidth) / sceneWidth;\n  const scrollBarX = scrollX > 0 ? 0 : canvasWidth - scrollBarWidth;\n  const horizontalScrollBar = {\n    x: scrollBarX + SCROLLBAR_MARGIN,\n    y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n    width: scrollBarWidth - SCROLLBAR_MARGIN * 2,\n    height: SCROLLBAR_WIDTH\n  };\n\n  // vertical scrollbar\n  const sceneHeight = canvasHeight + Math.abs(scrollY);\n  const scrollBarHeight = (canvasHeight * canvasHeight) / sceneHeight;\n  const scrollBarY = scrollY > 0 ? 0 : canvasHeight - scrollBarHeight;\n  const verticalScrollBar = {\n    x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n    y: scrollBarY + SCROLLBAR_MARGIN,\n    width: SCROLLBAR_WIDTH,\n    height: scrollBarHeight - SCROLLBAR_WIDTH * 2\n  };\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nfunction isOverScrollBars(\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollbars(canvasWidth, canvasHeight, scrollX, scrollY);\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n\nfunction handlerRectangles(element: ExcalidrawElement, sceneState: SceneState) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers: { [handler: string]: number[] } = {};\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY1 - margin + sceneState.scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY2 - margin + sceneState.scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + sceneState.scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + sceneState.scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    };\n  }\n\n  return handlers;\n}\n\nfunction renderScene(\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  const selectedIndices = getSelectedIndices();\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    element.draw(rc, context, sceneState);\n    if (renderSelection && element.isSelected) {\n      const margin = 4;\n\n      const elementX1 = getElementAbsoluteX1(element);\n      const elementX2 = getElementAbsoluteX2(element);\n      const elementY1 = getElementAbsoluteY1(element);\n      const elementY2 = getElementAbsoluteY2(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n\n      if (element.type !== \"text\" && selectedIndices.length === 1) {\n        const handlers = handlerRectangles(element, sceneState);\n        Object.values(handlers).forEach(handler => {\n          context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n        });\n      }\n    }\n  });\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollbars(\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.fillRect(\n      scrollBars.horizontal.x,\n      scrollBars.horizontal.y,\n      scrollBars.horizontal.width,\n      scrollBars.horizontal.height\n    );\n    context.fillRect(\n      scrollBars.vertical.x,\n      scrollBars.vertical.y,\n      scrollBars.vertical.width,\n      scrollBars.vertical.height\n    );\n    context.fillStyle = fillStyle;\n  }\n}\n\nfunction saveAsJSON() {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements\n  });\n\n  saveFile(\n    \"excalidraw.json\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nfunction loadFromJSON() {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        const data = JSON.parse(reader.result as string);\n        restore(data.elements, null);\n        resolve();\n      }\n    };\n  });\n}\n\nfunction exportAsPNG({\n  exportBackground,\n  exportPadding = 10,\n  viewBackgroundColor\n}: {\n  exportBackground: boolean;\n  exportPadding?: number;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n}) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    subCanvasX1 = Math.min(subCanvasX1, getElementAbsoluteX1(element));\n    subCanvasX2 = Math.max(subCanvasX2, getElementAbsoluteX2(element));\n    subCanvasY1 = Math.min(subCanvasY1, getElementAbsoluteY1(element));\n    subCanvasY2 = Math.max(subCanvasY2, getElementAbsoluteY2(element));\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  saveFile(\"excalidraw.png\", tempCanvas.toDataURL(\"image/png\"));\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\nfunction rotate(x1: number, y1: number, x2: number, y2: number, angle: number) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nfunction isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n\nfunction isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\nfunction getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n\nfunction generateDraw(element: ExcalidrawElement) {\n  if (element.type === \"selection\") {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(\n        element.x + scrollX,\n        element.y + scrollY,\n        element.width,\n        element.height\n      );\n      context.fillStyle = fillStyle;\n    };\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor\n      });\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        { stroke: element.strokeColor, fill: element.backgroundColor }\n      )\n    );\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, { stroke: element.strokeColor }),\n      // -----\n      generator.line(x1, y1, x2, y2, { stroke: element.strokeColor }),\n      //    /\n      generator.line(x4, y4, x2, y2, { stroke: element.strokeColor })\n    ]);\n\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.translate(element.x + scrollX, element.y + scrollY);\n      shapes.forEach(shape => rc.draw(shape));\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n    };\n    return;\n  } else if (isTextElement(element)) {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const font = context.font;\n      context.font = element.font;\n      const fillStyle = context.fillStyle;\n      context.fillStyle = element.strokeColor;\n      context.fillText(\n        element.text,\n        element.x + scrollX,\n        element.y + element.actualBoundingBoxAscent + scrollY\n      );\n      context.fillStyle = fillStyle;\n      context.font = font;\n    };\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nfunction getElementAbsoluteX1(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x : element.x + element.width;\n}\nfunction getElementAbsoluteX2(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x + element.width : element.x;\n}\nfunction getElementAbsoluteY1(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y : element.y + element.height;\n}\nfunction getElementAbsoluteY2(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y + element.height : element.y;\n}\n\nfunction setSelection(selection: ExcalidrawElement) {\n  const selectionX1 = getElementAbsoluteX1(selection);\n  const selectionX2 = getElementAbsoluteX2(selection);\n  const selectionY1 = getElementAbsoluteY1(selection);\n  const selectionY2 = getElementAbsoluteY2(selection);\n  elements.forEach(element => {\n    const elementX1 = getElementAbsoluteX1(element);\n    const elementX2 = getElementAbsoluteX2(element);\n    const elementY1 = getElementAbsoluteY1(element);\n    const elementY2 = getElementAbsoluteY2(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nfunction clearSelection() {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction deleteSelectedElements() {\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nfunction save(state: AppState) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n\nfunction restoreFromLocalStorage() {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  return restore(savedElements, savedState);\n}\n\nfunction restore(\n  savedElements: string | ExcalidrawElement[] | null,\n  savedState: string | null\n) {\n  try {\n    if (savedElements) {\n      elements.splice(\n        0,\n        elements.length,\n        ...(typeof savedElements === \"string\"\n          ? JSON.parse(savedElements)\n          : savedElements)\n      );\n      elements.forEach((element: ExcalidrawElement) => generateDraw(element));\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements.splice(0, elements.length);\n    return null;\n  }\n}\n\ntype AppState = {\n  draggingElement: ExcalidrawElement | null;\n  resizingElement: ExcalidrawElement | null;\n  elementType: string;\n  exportBackground: boolean;\n  currentItemStrokeColor: string;\n  currentItemBackgroundColor: string;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n};\n\nconst KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nconst SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nconst shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\n\nfunction capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction findElementByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nfunction getSelectedIndices() {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nconst someElementIsSelected = () =>\n  elements.some(element => element.isSelected);\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const savedState = restoreFromLocalStorage();\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (isInputLike(event.target)) return;\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      deleteSelectedElements();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n\n      // Send backward: Cmd-Shift-Alt-B\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyB\"\n    ) {\n      this.moveOneLeft();\n      event.preventDefault();\n\n      // Send to back: Cmd-Shift-B\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyB\") {\n      this.moveAllLeft();\n      event.preventDefault();\n\n      // Bring forward: Cmd-Shift-Alt-F\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyF\"\n    ) {\n      this.moveOneRight();\n      event.preventDefault();\n\n      // Bring to front: Cmd-Shift-F\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyF\") {\n      this.moveAllRight();\n      event.preventDefault();\n\n      // Select all: Cmd-A\n    } else if (event.metaKey && event.code === \"KeyA\") {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findElementByKey(event.key) });\n    } else if (event.metaKey && event.code === \"KeyZ\") {\n      let lastEntry = stateHistory.pop();\n      // If nothing was changed since last, take the previous one\n      if (generateHistoryCurrentEntry() === lastEntry) {\n        lastEntry = stateHistory.pop();\n      }\n      if (lastEntry !== undefined) {\n        restoreHistoryEntry(lastEntry);\n      }\n      this.forceUpdate();\n      event.preventDefault();\n    }\n  };\n\n  private deleteSelectedElements = () => {\n    deleteSelectedElements();\n    this.forceUpdate();\n  };\n\n  private clearCanvas = () => {\n    if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n      elements.splice(0, elements.length);\n      this.setState({\n        viewBackgroundColor: \"#ffffff\",\n        scrollX: 0,\n        scrollY: 0\n      });\n      this.forceUpdate();\n    }\n  };\n\n  private moveAllLeft = () => {\n    moveAllLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneLeft = () => {\n    moveOneLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveAllRight = () => {\n    moveAllRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneRight = () => {\n    moveOneRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements();\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          let parsedElements;\n          try {\n            parsedElements = JSON.parse(paste);\n          } catch (e) {}\n          if (\n            Array.isArray(parsedElements) &&\n            parsedElements.length > 0 &&\n            parsedElements[0].type // need to implement a better check here...\n          ) {\n            clearSelection();\n            parsedElements.forEach(parsedElement => {\n              parsedElement.x += 10;\n              parsedElement.y += 10;\n              parsedElement.seed = randomSeed();\n              generateDraw(parsedElement);\n              elements.push(parsedElement);\n            });\n            this.forceUpdate();\n          }\n          e.preventDefault();\n        }}\n      >\n        <div className=\"sidePanel\">\n          <h4>Shapes</h4>\n          <div className=\"panelTools\">\n            {SHAPES.map(({ value, icon }) => (\n              <label key={value} className=\"tool\" title={`${capitalize(value)} - ${capitalize(value)[0]}`}>\n                <input\n                  type=\"radio\"\n                  checked={this.state.elementType === value}\n                  onChange={() => {\n                    this.setState({ elementType: value });\n                    clearSelection();\n                    document.documentElement.style.cursor =\n                      value === \"text\" ? \"text\" : \"crosshair\";\n                    this.forceUpdate();\n                  }}\n                />\n                <div className=\"toolIcon\">{icon}</div>\n              </label>\n            ))}\n          </div>\n          <h4>Colors</h4>\n          <div className=\"panelColumn\">\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.viewBackgroundColor}\n                onChange={e => {\n                  this.setState({ viewBackgroundColor: e.target.value });\n                }}\n              />\n              Background\n            </label>\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.currentItemStrokeColor}\n                onChange={e => {\n                  this.setState({ currentItemStrokeColor: e.target.value });\n                }}\n              />\n              Shape Stroke\n            </label>\n            <label>\n              <input\n                type=\"color\"\n                value={this.state.currentItemBackgroundColor}\n                onChange={e => {\n                  this.setState({ currentItemBackgroundColor: e.target.value });\n                }}\n              />\n              Shape Background\n            </label>\n          </div>\n          <h4>Canvas</h4>\n          <div className=\"panelColumn\">\n            <button\n              onClick={this.clearCanvas}\n              title=\"Clear the canvas & reset background color\"\n            >\n              Clear canvas\n            </button>\n          </div>\n          <h4>Export</h4>\n          <div className=\"panelColumn\">\n            <button\n              onClick={() => {\n                exportAsPNG(this.state);\n              }}\n            >\n              Export to png\n            </button>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.exportBackground}\n                onChange={e => {\n                  this.setState({ exportBackground: e.target.checked });\n                }}\n              />\n              background\n            </label>\n          </div>\n          <h4>Save/Load</h4>\n          <div className=\"panelColumn\">\n            <button\n              onClick={() => {\n                saveAsJSON();\n              }}\n            >\n              Save as...\n            </button>\n            <button\n              onClick={() => {\n                loadFromJSON().then(() => this.forceUpdate());\n              }}\n            >\n              Load file...\n            </button>\n          </div>\n          {someElementIsSelected() && (\n            <>\n              <h4>Shape options</h4>\n              <div className=\"panelColumn\">\n                <button onClick={this.deleteSelectedElements}>Delete</button>\n                <button onClick={this.moveOneRight}>Bring forward</button>\n                <button onClick={this.moveAllRight}>Bring to front</button>\n                <button onClick={this.moveOneLeft}>Send backward</button>\n                <button onClick={this.moveAllLeft}>Send to back</button>\n              </div>\n            </>\n          )}\n        </div>\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor\n            );\n            let resizeHandle: string | false = false;\n            let isDraggingElements = false;\n            let isResizingElements = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = elements.find(element => {\n                return resizeTest(element, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              });\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeTest(resizeElement, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                let hitElement = null;\n                // We need to to hit testing from front (end of the array) to back (beginning of the array)\n                for (let i = elements.length - 1; i >= 0; --i) {\n                  if (hitTest(elements[i], x, y)) {\n                    hitElement = elements[i];\n                    break;\n                  }\n                }\n\n                // If we click on something\n                if (hitElement) {\n                  if (hitElement.isSelected) {\n                    // If that element is not already selected, do nothing,\n                    // we're likely going to drag it\n                  } else {\n                    // We unselect every other elements unless shift is pressed\n                    if (!e.shiftKey) {\n                      clearSelection();\n                    }\n                    // No matter what, we select it\n                    hitElement.isSelected = true;\n                  }\n                } else {\n                  // If we don't click on anything, let's remove all the selected elements\n                  clearSelection();\n                }\n\n                isDraggingElements = someElementIsSelected();\n\n                if (isDraggingElements) {\n                  document.documentElement.style.cursor = \"move\";\n                }\n              }\n            }\n\n            if (isTextElement(element)) {\n              resetCursor();\n              const text = prompt(\"What text do you want?\");\n              if (text === null) {\n                return;\n              }\n              const fontSize = 20;\n              element.text = text;\n              element.font = `${fontSize}px Virgil`;\n              const font = context.font;\n              context.font = element.font;\n              const textMeasure = context.measureText(element.text);\n              const width = textMeasure.width;\n              const actualBoundingBoxAscent =\n                textMeasure.actualBoundingBoxAscent || fontSize;\n              const actualBoundingBoxDescent =\n                textMeasure.actualBoundingBoxDescent || 0;\n              element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n              context.font = font;\n              const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n              // Center the text\n              element.x -= width / 2;\n              element.y -= actualBoundingBoxAscent;\n              element.width = width;\n              element.height = height;\n            }\n\n            generateDraw(element);\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.height += element.y - lastY;\n                        element.x = lastX;\n                        element.y = lastY;\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        element.height = lastY - element.y;\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                    generateDraw(el);\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  skipHistory = true;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  skipHistory = true;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey\n                ? Math.abs(width) * Math.sign(height)\n                : height;\n\n              generateDraw(draggingElement);\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(draggingElement);\n              }\n              // We don't want to save history when moving an element\n              skipHistory = true;\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection();\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            skipHistory = true;\n            this.forceUpdate();\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  componentDidUpdate() {\n    renderScene(rc, canvas, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    save(this.state);\n    if (!skipHistory) {\n      pushHistoryEntry(generateHistoryCurrentEntry());\n    }\n    skipHistory = false;\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}